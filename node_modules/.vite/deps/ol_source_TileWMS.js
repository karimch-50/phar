import {
  DEFAULT_WMS_VERSION,
  WMSServerType_default,
  appendParams
} from "./chunk-ZL4HMHTQ.js";
import {
  TileImage_default,
  hash
} from "./chunk-T35VWYBJ.js";
import "./chunk-VE7BPTDQ.js";
import {
  calculateSourceResolution
} from "./chunk-L75HGMIB.js";
import "./chunk-5WYTDWXW.js";
import "./chunk-JB74NW23.js";
import "./chunk-JJIVDN2V.js";
import {
  buffer as buffer2,
  scale,
  toSize
} from "./chunk-V7IIVM7C.js";
import "./chunk-D4HWCROW.js";
import "./chunk-K3YCFAS2.js";
import "./chunk-NALJJYT7.js";
import "./chunk-PN2SGMHC.js";
import {
  compareVersions,
  get2 as get,
  transform,
  transformExtent
} from "./chunk-HGML5IPI.js";
import {
  buffer,
  createEmpty
} from "./chunk-C7XNUD4N.js";
import {
  modulo
} from "./chunk-JFL7O5KA.js";
import "./chunk-FV2F4KM5.js";
import "./chunk-IRMQKYQT.js";
import {
  assert
} from "./chunk-FE3DXTD6.js";
import "./chunk-OAOBVDCL.js";
import {
  assign
} from "./chunk-K4RYKKJS.js";
import "./chunk-WGAPYIUP.js";

// node_modules/ol/source/TileWMS.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TileWMS = (
  /** @class */
  function(_super) {
    __extends(TileWMS2, _super);
    function TileWMS2(opt_options) {
      var _this = this;
      var options = opt_options ? opt_options : (
        /** @type {Options} */
        {}
      );
      var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
      if (options.interpolate !== void 0) {
        interpolate = options.interpolate;
      }
      var params = options.params || {};
      var transparent = "TRANSPARENT" in params ? params["TRANSPARENT"] : true;
      _this = _super.call(this, {
        attributions: options.attributions,
        attributionsCollapsible: options.attributionsCollapsible,
        cacheSize: options.cacheSize,
        crossOrigin: options.crossOrigin,
        interpolate,
        opaque: !transparent,
        projection: options.projection,
        reprojectionErrorThreshold: options.reprojectionErrorThreshold,
        tileClass: options.tileClass,
        tileGrid: options.tileGrid,
        tileLoadFunction: options.tileLoadFunction,
        url: options.url,
        urls: options.urls,
        wrapX: options.wrapX !== void 0 ? options.wrapX : true,
        transition: options.transition,
        zDirection: options.zDirection
      }) || this;
      _this.gutter_ = options.gutter !== void 0 ? options.gutter : 0;
      _this.params_ = params;
      _this.v13_ = true;
      _this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */
      options.serverType;
      _this.hidpi_ = options.hidpi !== void 0 ? options.hidpi : true;
      _this.tmpExtent_ = createEmpty();
      _this.updateV13_();
      _this.setKey(_this.getKeyForParams_());
      return _this;
    }
    TileWMS2.prototype.getFeatureInfoUrl = function(coordinate, resolution, projection, params) {
      var projectionObj = get(projection);
      var sourceProjectionObj = this.getProjection();
      var tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projectionObj);
      }
      var z = tileGrid.getZForResolution(resolution, this.zDirection);
      var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);
      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return void 0;
      }
      var tileResolution = tileGrid.getResolution(tileCoord[0]);
      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);
      var gutter = this.gutter_;
      if (gutter !== 0) {
        tileSize = buffer2(tileSize, gutter, this.tmpSize);
        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }
      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);
        tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }
      var baseParams = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetFeatureInfo",
        "FORMAT": "image/png",
        "TRANSPARENT": true,
        "QUERY_LAYERS": this.params_["LAYERS"]
      };
      assign(baseParams, this.params_, params);
      var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);
      var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);
      baseParams[this.v13_ ? "I" : "X"] = x;
      baseParams[this.v13_ ? "J" : "Y"] = y;
      return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);
    };
    TileWMS2.prototype.getLegendUrl = function(resolution, params) {
      if (this.urls[0] === void 0) {
        return void 0;
      }
      var baseParams = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetLegendGraphic",
        "FORMAT": "image/png"
      };
      if (params === void 0 || params["LAYER"] === void 0) {
        var layers = this.params_.LAYERS;
        var isSingleLayer = !Array.isArray(layers) || layers.length === 1;
        if (!isSingleLayer) {
          return void 0;
        }
        baseParams["LAYER"] = layers;
      }
      if (resolution !== void 0) {
        var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;
        var pixelSize = 28e-5;
        baseParams["SCALE"] = resolution * mpu / pixelSize;
      }
      assign(baseParams, params);
      return appendParams(
        /** @type {string} */
        this.urls[0],
        baseParams
      );
    };
    TileWMS2.prototype.getGutter = function() {
      return this.gutter_;
    };
    TileWMS2.prototype.getParams = function() {
      return this.params_;
    };
    TileWMS2.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {
      var urls = this.urls;
      if (!urls) {
        return void 0;
      }
      params["WIDTH"] = tileSize[0];
      params["HEIGHT"] = tileSize[1];
      params[this.v13_ ? "CRS" : "SRS"] = projection.getCode();
      if (!("STYLES" in this.params_)) {
        params["STYLES"] = "";
      }
      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case WMSServerType_default.GEOSERVER:
            var dpi = 90 * pixelRatio + 0.5 | 0;
            if ("FORMAT_OPTIONS" in params) {
              params["FORMAT_OPTIONS"] += ";dpi:" + dpi;
            } else {
              params["FORMAT_OPTIONS"] = "dpi:" + dpi;
            }
            break;
          case WMSServerType_default.MAPSERVER:
            params["MAP_RESOLUTION"] = 90 * pixelRatio;
            break;
          case WMSServerType_default.CARMENTA_SERVER:
          case WMSServerType_default.QGIS:
            params["DPI"] = 90 * pixelRatio;
            break;
          default:
            assert(false, 52);
            break;
        }
      }
      var axisOrientation = projection.getAxisOrientation();
      var bbox = tileExtent;
      if (this.v13_ && axisOrientation.substr(0, 2) == "ne") {
        var tmp = void 0;
        tmp = tileExtent[0];
        bbox[0] = tileExtent[1];
        bbox[1] = tmp;
        tmp = tileExtent[2];
        bbox[2] = tileExtent[3];
        bbox[3] = tmp;
      }
      params["BBOX"] = bbox.join(",");
      var url;
      if (urls.length == 1) {
        url = urls[0];
      } else {
        var index = modulo(hash(tileCoord), urls.length);
        url = urls[index];
      }
      return appendParams(url, params);
    };
    TileWMS2.prototype.getTilePixelRatio = function(pixelRatio) {
      return !this.hidpi_ || this.serverType_ === void 0 ? 1 : pixelRatio;
    };
    TileWMS2.prototype.getKeyForParams_ = function() {
      var i = 0;
      var res = [];
      for (var key in this.params_) {
        res[i++] = key + "-" + this.params_[key];
      }
      return res.join("/");
    };
    TileWMS2.prototype.updateParams = function(params) {
      assign(this.params_, params);
      this.updateV13_();
      this.setKey(this.getKeyForParams_());
    };
    TileWMS2.prototype.updateV13_ = function() {
      var version = this.params_["VERSION"] || DEFAULT_WMS_VERSION;
      this.v13_ = compareVersions(version, "1.3") >= 0;
    };
    TileWMS2.prototype.tileUrlFunction = function(tileCoord, pixelRatio, projection) {
      var tileGrid = this.getTileGrid();
      if (!tileGrid) {
        tileGrid = this.getTileGridForProjection(projection);
      }
      if (tileGrid.getResolutions().length <= tileCoord[0]) {
        return void 0;
      }
      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === void 0)) {
        pixelRatio = 1;
      }
      var tileResolution = tileGrid.getResolution(tileCoord[0]);
      var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);
      var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);
      var gutter = this.gutter_;
      if (gutter !== 0) {
        tileSize = buffer2(tileSize, gutter, this.tmpSize);
        tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);
      }
      if (pixelRatio != 1) {
        tileSize = scale(tileSize, pixelRatio, this.tmpSize);
      }
      var baseParams = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetMap",
        "FORMAT": "image/png",
        "TRANSPARENT": true
      };
      assign(baseParams, this.params_);
      return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);
    };
    return TileWMS2;
  }(TileImage_default)
);
var TileWMS_default = TileWMS;
export {
  TileWMS_default as default
};
//# sourceMappingURL=ol_source_TileWMS.js.map
