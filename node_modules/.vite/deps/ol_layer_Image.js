import {
  ENABLE_RASTER_REPROJECTION,
  IMAGE_SMOOTHING_DISABLED,
  IMAGE_SMOOTHING_ENABLED
} from "./chunk-5WYTDWXW.js";
import {
  ViewHint_default
} from "./chunk-OV3VFSJD.js";
import {
  Layer_default,
  Layer_default2
} from "./chunk-AXS2TYSQ.js";
import "./chunk-EBEDITAK.js";
import {
  apply,
  compose,
  makeInverse,
  toString
} from "./chunk-BCHRP4W6.js";
import "./chunk-PN2SGMHC.js";
import "./chunk-NALJJYT7.js";
import {
  fromUserExtent
} from "./chunk-HGML5IPI.js";
import {
  containsCoordinate,
  containsExtent,
  getHeight,
  getIntersection,
  getWidth,
  intersects,
  isEmpty
} from "./chunk-C7XNUD4N.js";
import "./chunk-JFL7O5KA.js";
import "./chunk-IRMQKYQT.js";
import "./chunk-FE3DXTD6.js";
import "./chunk-OAOBVDCL.js";
import {
  assign
} from "./chunk-K4RYKKJS.js";
import "./chunk-WGAPYIUP.js";

// node_modules/ol/layer/BaseImage.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var BaseImageLayer = (
  /** @class */
  function(_super) {
    __extends(BaseImageLayer2, _super);
    function BaseImageLayer2(opt_options) {
      var options = opt_options ? opt_options : {};
      return _super.call(this, options) || this;
    }
    return BaseImageLayer2;
  }(Layer_default)
);
var BaseImage_default = BaseImageLayer;

// node_modules/ol/renderer/canvas/ImageLayer.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CanvasImageLayerRenderer = (
  /** @class */
  function(_super) {
    __extends2(CanvasImageLayerRenderer2, _super);
    function CanvasImageLayerRenderer2(imageLayer) {
      var _this = _super.call(this, imageLayer) || this;
      _this.image_ = null;
      return _this;
    }
    CanvasImageLayerRenderer2.prototype.getImage = function() {
      return !this.image_ ? null : this.image_.getImage();
    };
    CanvasImageLayerRenderer2.prototype.prepareFrame = function(frameState) {
      var layerState = frameState.layerStatesArray[frameState.layerIndex];
      var pixelRatio = frameState.pixelRatio;
      var viewState = frameState.viewState;
      var viewResolution = viewState.resolution;
      var imageSource = this.getLayer().getSource();
      var hints = frameState.viewHints;
      var renderedExtent = frameState.extent;
      if (layerState.extent !== void 0) {
        renderedExtent = getIntersection(renderedExtent, fromUserExtent(layerState.extent, viewState.projection));
      }
      if (!hints[ViewHint_default.ANIMATING] && !hints[ViewHint_default.INTERACTING] && !isEmpty(renderedExtent)) {
        if (imageSource) {
          var projection = viewState.projection;
          if (!ENABLE_RASTER_REPROJECTION) {
            var sourceProjection = imageSource.getProjection();
            if (sourceProjection) {
              projection = sourceProjection;
            }
          }
          var image = imageSource.getImage(renderedExtent, viewResolution, pixelRatio, projection);
          if (image && this.loadImage(image)) {
            this.image_ = image;
          } else {
            this.image_ = null;
          }
        } else {
          this.image_ = null;
        }
      }
      return !!this.image_;
    };
    CanvasImageLayerRenderer2.prototype.getData = function(pixel) {
      var frameState = this.frameState;
      if (!frameState) {
        return null;
      }
      var layer = this.getLayer();
      var coordinate = apply(frameState.pixelToCoordinateTransform, pixel.slice());
      var layerExtent = layer.getExtent();
      if (layerExtent) {
        if (!containsCoordinate(layerExtent, coordinate)) {
          return null;
        }
      }
      var imageExtent = this.image_.getExtent();
      var img = this.image_.getImage();
      var imageMapWidth = getWidth(imageExtent);
      var col = Math.floor(img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth));
      if (col < 0 || col >= img.width) {
        return null;
      }
      var imageMapHeight = getHeight(imageExtent);
      var row = Math.floor(img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight));
      if (row < 0 || row >= img.height) {
        return null;
      }
      return this.getImageData(img, col, row);
    };
    CanvasImageLayerRenderer2.prototype.renderFrame = function(frameState, target) {
      var image = this.image_;
      var imageExtent = image.getExtent();
      var imageResolution = image.getResolution();
      var imagePixelRatio = image.getPixelRatio();
      var layerState = frameState.layerStatesArray[frameState.layerIndex];
      var pixelRatio = frameState.pixelRatio;
      var viewState = frameState.viewState;
      var viewCenter = viewState.center;
      var viewResolution = viewState.resolution;
      var size = frameState.size;
      var scale = pixelRatio * imageResolution / (viewResolution * imagePixelRatio);
      var width = Math.round(size[0] * pixelRatio);
      var height = Math.round(size[1] * pixelRatio);
      var rotation = viewState.rotation;
      if (rotation) {
        var size_1 = Math.round(Math.sqrt(width * width + height * height));
        width = size_1;
        height = size_1;
      }
      compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);
      makeInverse(this.inversePixelTransform, this.pixelTransform);
      var canvasTransform = toString(this.pixelTransform);
      this.useContainer(target, canvasTransform, layerState.opacity, this.getBackground(frameState));
      var context = this.context;
      var canvas = context.canvas;
      if (canvas.width != width || canvas.height != height) {
        canvas.width = width;
        canvas.height = height;
      } else if (!this.containerReused) {
        context.clearRect(0, 0, width, height);
      }
      var clipped = false;
      var render = true;
      if (layerState.extent) {
        var layerExtent = fromUserExtent(layerState.extent, viewState.projection);
        render = intersects(layerExtent, frameState.extent);
        clipped = render && !containsExtent(layerExtent, frameState.extent);
        if (clipped) {
          this.clipUnrotated(context, frameState, layerExtent);
        }
      }
      var img = image.getImage();
      var transform = compose(this.tempTransform, width / 2, height / 2, scale, scale, 0, imagePixelRatio * (imageExtent[0] - viewCenter[0]) / imageResolution, imagePixelRatio * (viewCenter[1] - imageExtent[3]) / imageResolution);
      this.renderedResolution = imageResolution * pixelRatio / imagePixelRatio;
      var dw = img.width * transform[0];
      var dh = img.height * transform[3];
      if (!this.getLayer().getSource().getInterpolate()) {
        assign(context, IMAGE_SMOOTHING_DISABLED);
      }
      this.preRender(context, frameState);
      if (render && dw >= 0.5 && dh >= 0.5) {
        var dx = transform[4];
        var dy = transform[5];
        var opacity = layerState.opacity;
        var previousAlpha = void 0;
        if (opacity !== 1) {
          previousAlpha = context.globalAlpha;
          context.globalAlpha = opacity;
        }
        context.drawImage(img, 0, 0, +img.width, +img.height, Math.round(dx), Math.round(dy), Math.round(dw), Math.round(dh));
        if (opacity !== 1) {
          context.globalAlpha = previousAlpha;
        }
      }
      this.postRender(context, frameState);
      if (clipped) {
        context.restore();
      }
      assign(context, IMAGE_SMOOTHING_ENABLED);
      if (canvasTransform !== canvas.style.transform) {
        canvas.style.transform = canvasTransform;
      }
      return this.container;
    };
    return CanvasImageLayerRenderer2;
  }(Layer_default2)
);
var ImageLayer_default = CanvasImageLayerRenderer;

// node_modules/ol/layer/Image.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ImageLayer = (
  /** @class */
  function(_super) {
    __extends3(ImageLayer2, _super);
    function ImageLayer2(opt_options) {
      return _super.call(this, opt_options) || this;
    }
    ImageLayer2.prototype.createRenderer = function() {
      return new ImageLayer_default(this);
    };
    ImageLayer2.prototype.getData = function(pixel) {
      return _super.prototype.getData.call(this, pixel);
    };
    return ImageLayer2;
  }(BaseImage_default)
);
var Image_default = ImageLayer;
export {
  Image_default as default
};
//# sourceMappingURL=ol_layer_Image.js.map
