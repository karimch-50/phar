{
  "version": 3,
  "sources": ["../../ol/src/source/Source.js"],
  "sourcesContent": ["/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport SourceState from './State.js';\nimport {abstract} from '../util.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./State.js\").default} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./State.js\").default}\n     */\n    this.state_ =\n      options.state !== undefined ? options.state : SourceState.READY;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return abstract();\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link module:ol/source/State~State} for possible states.\n   * @return {import(\"./State.js\").default} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./State.js\").default} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAA;;EAAA,SAAA,QAAA;AAAqB,cAAAA,SAAA,MAAA;AAInB,aAAAA,QAAY,SAAO;AAAnB,UAAA,QACE,OAAA,KAAA,IAAA,KAAO;AAMP,YAAK,aAAa,IAAc,QAAQ,UAAU;AAMlD,YAAK,gBAAgB,kBAAkB,QAAQ,YAAY;AAM3D,YAAK,2BACH,QAAQ,4BAA4B,SAChC,QAAQ,0BACR;AAON,YAAK,UAAU;AAMf,YAAK,SACH,QAAQ,UAAU,SAAY,QAAQ,QAAQ,cAAY;AAM5D,YAAK,SAAS,QAAQ,UAAU,SAAY,QAAQ,QAAQ;AAM5D,YAAK,eAAe,CAAC,CAAC,QAAQ;AAM9B,YAAK,eAAe;AAMpB,YAAK,eAAe;AAEpB,UAAM,OAAO;AAKb,YAAK,eAAe,IAAI,QAAQ,SAAU,SAAS,QAAM;AACvD,aAAK,eAAe;AACpB,aAAK,eAAe;MACtB,CAAC;;IACH;AAOA,IAAAA,QAAA,UAAA,kBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,QAAA,UAAA,6BAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,gBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,QAAA,UAAA,iBAAA,WAAA;AACE,aAAO,SAAQ;IACjB;AAKA,IAAAA,QAAA,UAAA,UAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,QAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAKA,IAAAA,QAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAKA,IAAAA,QAAA,UAAA,iBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,QAAA,UAAA,UAAA,WAAA;AACE,WAAK,QAAO;IACd;AASA,IAAAA,QAAA,UAAA,kBAAA,SAAgB,cAAY;AAC1B,WAAK,gBAAgB,kBAAkB,YAAY;AACnD,WAAK,QAAO;IACd;AAMA,IAAAA,QAAA,UAAA,WAAA,SAAS,OAAK;AACZ,WAAK,SAAS;AACd,WAAK,QAAO;IACd;AACF,WAAAA;EAAA,EAzKqB,cAAU;;AAgL/B,SAAS,kBAAkB,iBAAe;AACxC,MAAI,CAAC,iBAAiB;AACpB,WAAO;;AAET,MAAI,MAAM,QAAQ,eAAe,GAAG;AAClC,WAAO,SAAU,YAAU;AACzB,aAAO;IACT;;AAGF,MAAI,OAAO,oBAAoB,YAAY;AACzC,WAAO;;AAGT,SAAO,SAAU,YAAU;AACzB,WAAO,CAAC,eAAe;EACzB;AACF;AAEA,IAAA,iBAAe;",
  "names": ["Source"]
}
