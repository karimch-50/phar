import {
  CollapsibleMixin,
  SummaryController,
  details,
  detailsSummary
} from "./chunk-3DTPVLMB.js";
import {
  DelegateStateMixin
} from "./chunk-IDC7WHOS.js";
import {
  DelegateFocusMixin
} from "./chunk-TVB6PYW6.js";
import {
  ActiveMixin
} from "./chunk-CEKQDUPK.js";
import {
  TooltipController
} from "./chunk-44TTWRW5.js";
import {
  ControllerMixin
} from "./chunk-QGCYTHXO.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-BBNA52CT.js";
import {
  css
} from "./chunk-CMT2GIH3.js";
import {
  DirMixin
} from "./chunk-B6NQGUVK.js";
import {
  defineCustomElement
} from "./chunk-JDVQIXGE.js";
import {
  PolymerElement
} from "./chunk-4TYUW4EB.js";
import {
  html
} from "./chunk-XB4RSW42.js";

// node_modules/@vaadin/accordion/theme/lumo/vaadin-accordion-heading-styles.js
var accordionHeading = css`
  :host {
    padding: 0;
  }

  [part='content'] {
    padding: var(--lumo-space-s) 0;
  }

  :host([theme~='filled']) {
    padding-top: 0;
    padding-bottom: 0;
  }
`;
registerStyles("vaadin-accordion-heading", [detailsSummary, accordionHeading], { moduleId: "lumo-accordion-heading" });

// node_modules/@vaadin/accordion/src/vaadin-accordion-heading-styles.js
var accordionHeading2 = css`
  :host {
    display: block;
    outline: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }

  :host([hidden]) {
    display: none !important;
  }

  button {
    display: flex;
    align-items: center;
    justify-content: inherit;
    width: 100%;
    margin: 0;
    padding: 0;
    background-color: initial;
    color: inherit;
    border: initial;
    outline: none;
    font: inherit;
    text-align: inherit;
  }
`;

// node_modules/@vaadin/accordion/src/vaadin-accordion-heading.js
registerStyles("vaadin-accordion-heading", accordionHeading2, { moduleId: "vaadin-accordion-heading-styles" });
var AccordionHeading = class extends ActiveMixin(DirMixin(ThemableMixin(PolymerElement))) {
  static get is() {
    return "vaadin-accordion-heading";
  }
  static get template() {
    return html`
      <button id="button" part="content" disabled$="[[disabled]]" aria-expanded$="[[__updateAriaExpanded(opened)]]">
        <span part="toggle" aria-hidden="true"></span>
        <slot></slot>
      </button>
    `;
  }
  static get properties() {
    return {
      /**
       * When true, the element is opened.
       */
      opened: {
        type: Boolean,
        reflectToAttribute: true
      }
    };
  }
  /**
   * @param {DocumentFragment} dom
   * @return {null}
   * @protected
   * @override
   */
  _attachDom(dom) {
    const root = this.attachShadow({ mode: "open", delegatesFocus: true });
    root.appendChild(dom);
    return root;
  }
  /** @protected */
  ready() {
    super.ready();
    if (!this.hasAttribute("role")) {
      this.setAttribute("role", "heading");
    }
  }
  /** @private */
  __updateAriaExpanded(opened) {
    return opened ? "true" : "false";
  }
};
defineCustomElement(AccordionHeading);

// node_modules/@vaadin/accordion/theme/lumo/vaadin-accordion-panel-styles.js
var accordionPanel = css`
  :host {
    margin: 0;
    border-bottom: solid 1px var(--lumo-contrast-10pct);
  }

  :host(:last-child) {
    border-bottom: none;
  }

  :host([theme~='filled']) {
    border-bottom: none;
  }

  :host([theme~='filled']:not(:last-child)) {
    margin-bottom: 2px;
  }
`;
registerStyles("vaadin-accordion-panel", [details, accordionPanel], { moduleId: "lumo-accordion-panel" });

// node_modules/@vaadin/accordion/src/vaadin-accordion-panel-styles.js
var accordionPanel2 = css`
  :host {
    display: block;
  }

  :host([hidden]) {
    display: none !important;
  }

  [part='content'] {
    display: none;
    overflow: hidden;
  }

  :host([opened]) [part='content'] {
    display: block;
    overflow: visible;
  }
`;

// node_modules/@vaadin/accordion/src/vaadin-accordion-panel.js
registerStyles("vaadin-accordion-panel", accordionPanel2, { moduleId: "vaadin-accordion-panel-styles" });
var AccordionPanel = class extends CollapsibleMixin(
  DelegateFocusMixin(DelegateStateMixin(ThemableMixin(ControllerMixin(PolymerElement))))
) {
  static get is() {
    return "vaadin-accordion-panel";
  }
  static get template() {
    return html`
      <slot name="summary"></slot>

      <div part="content">
        <slot></slot>
      </div>

      <slot name="tooltip"></slot>
    `;
  }
  static get properties() {
    return {
      /**
       * A text that is displayed in the heading, if no
       * element is assigned to the `summary` slot.
       */
      summary: {
        type: String,
        observer: "_summaryChanged"
      }
    };
  }
  static get observers() {
    return ["__updateAriaAttributes(focusElement, _contentElements)"];
  }
  static get delegateAttrs() {
    return ["theme"];
  }
  static get delegateProps() {
    return ["disabled", "opened"];
  }
  constructor() {
    super();
    this._summaryController = new SummaryController(this, "vaadin-accordion-heading");
    this._summaryController.addEventListener("slot-content-changed", (event) => {
      const { node } = event.target;
      this._setFocusElement(node);
      this.stateTarget = node;
      this._tooltipController.setTarget(node);
    });
    this._tooltipController = new TooltipController(this);
    this._tooltipController.setPosition("bottom-start");
  }
  /** @protected */
  ready() {
    super.ready();
    this.addController(this._summaryController);
    this.addController(this._tooltipController);
  }
  /**
   * Override method inherited from `DisabledMixin`
   * to not set `aria-disabled` on the host element.
   *
   * @protected
   * @override
   */
  _setAriaDisabled() {
  }
  /** @private */
  _summaryChanged(summary) {
    this._summaryController.setSummary(summary);
  }
  /** @private */
  __updateAriaAttributes(focusElement, contentElements) {
    if (focusElement && contentElements) {
      const node = contentElements[0];
      if (node) {
        node.setAttribute("role", "region");
        node.setAttribute("aria-labelledby", focusElement.id);
      }
      if (node && node.id) {
        focusElement.setAttribute("aria-controls", node.id);
      } else {
        focusElement.removeAttribute("aria-controls");
      }
    }
  }
};
defineCustomElement(AccordionPanel);

export {
  AccordionPanel
};
/*! Bundled license information:

@vaadin/accordion/src/vaadin-accordion-heading-styles.js:
  (**
   * @license
   * Copyright (c) 2019 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/accordion/src/vaadin-accordion-heading.js:
  (**
   * @license
   * Copyright (c) 2019 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/accordion/src/vaadin-accordion-panel-styles.js:
  (**
   * @license
   * Copyright (c) 2019 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/accordion/src/vaadin-accordion-panel.js:
  (**
   * @license
   * Copyright (c) 2019 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)
*/
//# sourceMappingURL=chunk-DFBOZ2F4.js.map
