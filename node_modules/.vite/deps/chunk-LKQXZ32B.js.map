{
  "version": 3,
  "sources": ["../../ol/src/CollectionEventType.js", "../../ol/src/Collection.js"],
  "sourcesContent": ["/**\n * @module ol/CollectionEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when an item is added to the collection.\n   * @event module:ol/Collection.CollectionEvent#add\n   * @api\n   */\n  ADD: 'add',\n  /**\n   * Triggered when an item is removed from the collection.\n   * @event module:ol/Collection.CollectionEvent#remove\n   * @api\n   */\n  REMOVE: 'remove',\n};\n", "/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {*} [opt_element] Element.\n   * @param {number} [opt_index] The index of the added or removed element.\n   */\n  constructor(type, opt_element, opt_index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {*}\n     * @api\n     */\n    this.element = opt_element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = opt_index;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [opt_array] Array.\n   * @param {Options} [opt_options] Collection options.\n   */\n  constructor(opt_array, opt_options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<void>}\n     */\n    this.un;\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = opt_array ? opt_array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index < n) {\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      const prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      );\n      this.dispatchEvent(\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      );\n    } else {\n      for (let j = n; j < index; ++j) {\n        this.insertAt(j, undefined);\n      }\n      this.insertAt(index, elem);\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [opt_except] Optional index to ignore.\n   */\n  assertUnique_(elem, opt_except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== opt_except) {\n        throw new AssertionError(58);\n      }\n    }\n  }\n}\n\nexport default Collection;\n"],
  "mappings": "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",
  "names": ["CollectionEvent", "Collection"]
}
