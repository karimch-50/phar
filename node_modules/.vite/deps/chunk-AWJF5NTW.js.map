{
  "version": 3,
  "sources": ["../../ol/src/geom/flat/deflate.js", "../../ol/src/geom/Point.js"],
  "sourcesContent": ["/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [opt_ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  opt_ends\n) {\n  const ends = opt_ends ? opt_ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [opt_endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  opt_endss\n) {\n  const endss = opt_endss ? opt_endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i]\n    );\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n", "/**\n * @module ol/geom/Point\n */\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    this.setCoordinates(coordinates, opt_layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.POINT;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n"],
  "mappings": "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",
  "names": ["Point", "squaredDistance"]
}
