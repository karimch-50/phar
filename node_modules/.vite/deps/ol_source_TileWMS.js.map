{
  "version": 3,
  "sources": ["../../ol/src/source/TileWMS.js"],
  "sourcesContent": ["/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [opt_options] Tile WMS options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : /** @type {Options} */ ({});\n\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    const params = options.params || {};\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ =\n      /** @type {import(\"./WMSServerType.js\").default|undefined} */ (\n        options.serverType\n      );\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],
  "mappings": "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",
  "names": ["TileWMS", "buffer"]
}
