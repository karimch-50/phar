{
  "version": 3,
  "sources": ["../../ol/src/style/TextPlacement.js", "../../ol/src/style/Text.js"],
  "sourcesContent": ["/**\n * @module ol/style/TextPlacement\n */\n\n/**\n * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n * @enum {string}\n */\nexport default {\n  POINT: 'point',\n  LINE: 'line',\n};\n", "/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport {toSize} from '../size.js';\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ =\n      options.fill !== undefined\n        ? options.fill\n        : new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ =\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n    this.placement_ =\n      options.placement !== undefined ? options.placement : TextPlacement.POINT;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill\n      ? options.backgroundFill\n      : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke\n      ? options.backgroundStroke\n      : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill()\n        ? this.getBackgroundFill().clone()\n        : undefined,\n      backgroundStroke: this.getBackgroundStroke()\n        ? this.getBackgroundStroke().clone()\n        : undefined,\n      padding: this.getPadding() || undefined,\n    });\n  }\n\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Set the text.\n   *\n   * @param {string|undefined} text Text.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n"],
  "mappings": ";;;;;;;;AAWA,IAAA,wBAAe;EACb,OAAO;EACP,MAAM;;;;ACAR,IAAM,qBAAqB;AAyC3B,IAAA;;EAAA,WAAA;AAIE,aAAAA,MAAY,aAAW;AACrB,UAAM,UAAU,eAAe,CAAA;AAM/B,WAAK,QAAQ,QAAQ;AAMrB,WAAK,YAAY,QAAQ;AAMzB,WAAK,kBAAkB,QAAQ;AAM/B,WAAK,SAAS,QAAQ;AAMtB,WAAK,cAAc,OAAO,QAAQ,UAAU,SAAY,QAAQ,QAAQ,CAAC;AAMzE,WAAK,QAAQ,QAAQ;AAMrB,WAAK,aAAa,QAAQ;AAM1B,WAAK,gBAAgB,QAAQ;AAM7B,WAAK,QACH,QAAQ,SAAS,SACb,QAAQ,OACR,IAAI,aAAK,EAAC,OAAO,mBAAkB,CAAC;AAM1C,WAAK,YACH,QAAQ,aAAa,SAAY,QAAQ,WAAW,KAAK,KAAK;AAMhE,WAAK,aACH,QAAQ,cAAc,SAAY,QAAQ,YAAY,sBAAc;AAMtE,WAAK,YAAY,CAAC,CAAC,QAAQ;AAM3B,WAAK,UAAU,QAAQ,WAAW,SAAY,QAAQ,SAAS;AAM/D,WAAK,WAAW,QAAQ,YAAY,SAAY,QAAQ,UAAU;AAMlE,WAAK,WAAW,QAAQ,YAAY,SAAY,QAAQ,UAAU;AAMlE,WAAK,kBAAkB,QAAQ,iBAC3B,QAAQ,iBACR;AAMJ,WAAK,oBAAoB,QAAQ,mBAC7B,QAAQ,mBACR;AAMJ,WAAK,WAAW,QAAQ,YAAY,SAAY,OAAO,QAAQ;IACjE;AAOA,IAAAA,MAAA,UAAA,QAAA,WAAA;AACE,UAAM,QAAQ,KAAK,SAAQ;AAC3B,aAAO,IAAIA,MAAK;QACd,MAAM,KAAK,QAAO;QAClB,WAAW,KAAK,aAAY;QAC5B,UAAU,KAAK,YAAW;QAC1B,UAAU,KAAK,YAAW;QAC1B,UAAU,KAAK,YAAW;QAC1B,gBAAgB,KAAK,kBAAiB;QACtC,OAAO,MAAM,QAAQ,KAAK,IAAI,MAAM,MAAK,IAAK;QAC9C,MAAM,KAAK,QAAO;QAClB,WAAW,KAAK,aAAY;QAC5B,cAAc,KAAK,gBAAe;QAClC,MAAM,KAAK,QAAO,IAAK,KAAK,QAAO,EAAG,MAAK,IAAK;QAChD,QAAQ,KAAK,UAAS,IAAK,KAAK,UAAS,EAAG,MAAK,IAAK;QACtD,SAAS,KAAK,WAAU;QACxB,SAAS,KAAK,WAAU;QACxB,gBAAgB,KAAK,kBAAiB,IAClC,KAAK,kBAAiB,EAAG,MAAK,IAC9B;QACJ,kBAAkB,KAAK,oBAAmB,IACtC,KAAK,oBAAmB,EAAG,MAAK,IAChC;QACJ,SAAS,KAAK,WAAU,KAAM;OAC/B;IACH;AAOA,IAAAA,MAAA,UAAA,cAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,UAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,cAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,eAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,aAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,aAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,UAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,oBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,cAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,MAAA,UAAA,gBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,YAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,UAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,eAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,kBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,oBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,sBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,MAAA,UAAA,aAAA,WAAA;AACE,aAAO,KAAK;IACd;AAQA,IAAAA,MAAA,UAAA,cAAA,SAAY,UAAQ;AAClB,WAAK,YAAY;IACnB;AAQA,IAAAA,MAAA,UAAA,UAAA,SAAQ,MAAI;AACV,WAAK,QAAQ;IACf;AAQA,IAAAA,MAAA,UAAA,cAAA,SAAY,UAAQ;AAClB,WAAK,YAAY;IACnB;AAQA,IAAAA,MAAA,UAAA,aAAA,SAAW,SAAO;AAChB,WAAK,WAAW;IAClB;AAQA,IAAAA,MAAA,UAAA,aAAA,SAAW,SAAO;AAChB,WAAK,WAAW;IAClB;AAQA,IAAAA,MAAA,UAAA,eAAA,SAAa,WAAS;AACpB,WAAK,aAAa;IACpB;AAQA,IAAAA,MAAA,UAAA,oBAAA,SAAkB,gBAAc;AAC9B,WAAK,kBAAkB;IACzB;AAQA,IAAAA,MAAA,UAAA,UAAA,SAAQ,MAAI;AACV,WAAK,QAAQ;IACf;AAQA,IAAAA,MAAA,UAAA,cAAA,SAAY,UAAQ;AAClB,WAAK,YAAY;IACnB;AAQA,IAAAA,MAAA,UAAA,WAAA,SAAS,OAAK;AACZ,WAAK,SAAS;AACd,WAAK,cAAc,OAAO,UAAU,SAAY,QAAQ,CAAC;IAC3D;AAQA,IAAAA,MAAA,UAAA,YAAA,SAAU,QAAM;AACd,WAAK,UAAU;IACjB;AAQA,IAAAA,MAAA,UAAA,UAAA,SAAQ,MAAI;AACV,WAAK,QAAQ;IACf;AAQA,IAAAA,MAAA,UAAA,eAAA,SAAa,WAAS;AACpB,WAAK,aAAa;IACpB;AAQA,IAAAA,MAAA,UAAA,kBAAA,SAAgB,cAAY;AAC1B,WAAK,gBAAgB;IACvB;AAQA,IAAAA,MAAA,UAAA,oBAAA,SAAkB,MAAI;AACpB,WAAK,kBAAkB;IACzB;AAQA,IAAAA,MAAA,UAAA,sBAAA,SAAoB,QAAM;AACxB,WAAK,oBAAoB;IAC3B;AAQA,IAAAA,MAAA,UAAA,aAAA,SAAW,SAAO;AAChB,WAAK,WAAW;IAClB;AACF,WAAAA;EAAA,EAxeA;;AA0eA,IAAA,eAAe;",
  "names": ["Text"]
}
