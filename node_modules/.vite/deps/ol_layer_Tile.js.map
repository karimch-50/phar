{
  "version": 3,
  "sources": ["../../ol/src/layer/TileProperty.js", "../../ol/src/layer/BaseTile.js", "../../ol/src/renderer/canvas/TileLayer.js", "../../ol/src/layer/Tile.js"],
  "sourcesContent": ["/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n", "/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\nimport {assign} from '../obj.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source'|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   'change:source'|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [opt_options] Tile layer options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true\n    );\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n", "/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {IMAGE_SMOOTHING_DISABLED, IMAGE_SMOOTHING_ENABLED} from './common.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {assign} from '../../obj.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  equals,\n  getIntersection,\n  getTopLeft,\n  intersects,\n} from '../../extent.js';\nimport {cssOpacity} from '../../css.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (!tileLayer.getUseInterimTilesOnError()) {\n        // When useInterimTilesOnError is false, we consider the error tile as loaded.\n        tile.setState(TileState.LOADED);\n      } else if (tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(\n        z,\n        tileCoord[1],\n        tileCoord[2],\n        pixelRatio,\n        projection\n      );\n      if (!(tile instanceof ImageTile || tile instanceof ReprojTile)) {\n        return null;\n      }\n\n      if (tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0])\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1])\n      );\n\n      return this.getImageData(tile.getImage(), col, row);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(\n        extent,\n        fromUserExtent(layerState.extent, projection)\n      );\n    }\n\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n\n    // desired dimensions of the canvas in pixels\n    let width = Math.round(frameState.size[0] * tilePixelRatio);\n    let height = Math.round(frameState.size[1] * tilePixelRatio);\n\n    if (rotation) {\n      const size = Math.round(Math.sqrt(width * width + height * height));\n      width = size;\n      height = size;\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            const inTransition = tile.inTransition(uid);\n            if (\n              !this.newTiles_ &&\n              (inTransition || this.renderedTiles.indexOf(tile) === -1)\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale = tileResolution / viewResolution;\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / tilePixelRatio,\n      1 / tilePixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(\n      target,\n      canvasTransform,\n      layerState.opacity,\n      this.getBackground(frameState)\n    );\n    const context = this.context;\n    const canvas = context.canvas;\n\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      assign(context, IMAGE_SMOOTHING_DISABLED);\n    }\n\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (\n                  intersects(\n                    [x, y, x + w, y + h],\n                    [clip[0], clip[3], clip[4], clip[7]]\n                  )\n                ) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition\n        );\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    assign(context, IMAGE_SMOOTHING_ENABLED);\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n    const opacity = cssOpacity(layerState.opacity);\n    const container = this.container;\n    if (opacity !== container.style.opacity) {\n      container.style.opacity = opacity;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const alpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== 1) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../PluggableMap.js\").default} map Map.\n       * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [opt_tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    opt_tileCallback\n  ) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (opt_tileCallback !== undefined) {\n              opt_tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\nexport default CanvasTileLayerRenderer;\n", "/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [opt_options] Tile layer options.\n   */\n  constructor(opt_options) {\n    super(opt_options);\n  }\n\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\n\nexport default TileLayer;\n"],
  "mappings": "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",
  "names": ["BaseTileLayer", "__extends", "CanvasTileLayerRenderer", "tileSource", "frameState", "Layer_default", "__extends", "TileLayer", "Tile_default"]
}
