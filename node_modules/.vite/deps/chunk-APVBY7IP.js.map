{
  "version": 3,
  "sources": ["../../lit-html/src/directives/unsafe-html.ts", "../../lit-html/src/directives/unsafe-svg.ts", "../../@vaadin/icon/src/vaadin-icon-svg.js", "../../@vaadin/icon/src/vaadin-iconset.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n", "/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {directive} from '../directive.js';\nimport {UnsafeHTMLDirective} from './unsafe-html.js';\n\nconst SVG_RESULT = 2;\n\nclass UnsafeSVGDirective extends UnsafeHTMLDirective {\n  static override directiveName = 'unsafeSVG';\n  static override resultType = SVG_RESULT;\n}\n\n/**\n * Renders the result as SVG, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeSVG = directive(UnsafeSVGDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {UnsafeSVGDirective};\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { nothing, render, svg } from 'lit';\nimport { isTemplateResult, TemplateResultType } from 'lit/directive-helpers.js';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\n\n/**\n * Clone given node and return its content as SVG literal.\n *\n * @param {Element} source\n */\nexport function cloneSvgNode(source) {\n  let result = nothing;\n  if (source) {\n    const content = source.cloneNode(true);\n    content.removeAttribute('id');\n    result = svg`${unsafeSVG(content.outerHTML)}`;\n  }\n\n  return result;\n}\n\n/**\n * Test if the given argument is a valid SVG literal.\n *\n * @param {unknown} source\n */\nexport function isValidSvg(source) {\n  return isTemplateResult(source, TemplateResultType.SVG) || source === nothing;\n}\n\n/**\n * Create a valid SVG literal based on the argument.\n *\n * @param {unknown} svg\n */\nexport function ensureSvgLiteral(source) {\n  let result = source == null || source === '' ? nothing : source;\n\n  if (!isValidSvg(result)) {\n    console.error('[vaadin-icon] Invalid svg passed, please use Lit svg literal.');\n    result = nothing;\n  }\n\n  return result;\n}\n\n/**\n * Render a given SVG literal to the container.\n *\n * @param {unknown} source\n * @param {SVGElement} container\n */\nexport function renderSvg(source, container) {\n  const result = ensureSvgLiteral(source);\n  render(result, container);\n}\n\n/**\n * Create an SVG literal from source string.\n *\n * @param {string} source\n */\nexport function unsafeSvgLiteral(source) {\n  return svg`${unsafeSVG(source)}`;\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { cloneSvgNode } from './vaadin-icon-svg.js';\n\nconst iconsetRegistry = {};\n\nconst attachedIcons = new Set();\n\nfunction getIconId(id, name) {\n  return (id || '').replace(`${name}:`, '');\n}\n\nfunction getIconsetName(icon) {\n  if (!icon) {\n    return;\n  }\n\n  const parts = icon.split(':');\n\n  // Use \"vaadin\" as a fallback\n  return parts[0] || 'vaadin';\n}\n\nfunction initIconsMap(iconset, name) {\n  iconset._icons = [...iconset.querySelectorAll('[id]')].reduce((map, svg) => {\n    const key = getIconId(svg.id, name);\n    map[key] = svg;\n    return map;\n  }, {});\n}\n\n/**\n * `<vaadin-iconset>` is a Web Component for creating SVG icon collections.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ElementMixin\n */\nclass Iconset extends ElementMixin(PolymerElement) {\n  static get template() {\n    return null;\n  }\n\n  static get is() {\n    return 'vaadin-iconset';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the iconset. Every iconset is required to have its own unique name.\n       * All the SVG icons in the iconset must have IDs conforming to its name.\n       *\n       * See also [`name`](#/elements/vaadin-icon#property-name) property of `vaadin-icon`.\n       */\n      name: {\n        type: String,\n        observer: '__nameChanged',\n      },\n\n      /**\n       * The size of an individual icon. Note that icons must be square.\n       *\n       * When using `vaadin-icon`, the size of the iconset will take precedence\n       * over the size defined by the user to ensure correct appearance.\n       */\n      size: {\n        type: Number,\n        value: 24,\n      },\n    };\n  }\n\n  /**\n   * Set of the `vaadin-icon` instances in the DOM.\n   *\n   * @return {Set<Icon>}\n   */\n  static get attachedIcons() {\n    return attachedIcons;\n  }\n\n  /**\n   * Returns an instance of the iconset by its name.\n   *\n   * @param {string} name\n   * @return {Iconset}\n   */\n  static getIconset(name) {\n    return iconsetRegistry[name];\n  }\n\n  /**\n   * Returns SVGTemplateResult for the `icon` ID matching `name` of the\n   * iconset, or `nothing` literal if there is no matching icon found.\n   *\n   * @param {string} icon\n   * @param {?string} name\n   */\n  static getIconSvg(icon, name) {\n    const iconsetName = name || getIconsetName(icon);\n    const iconset = this.getIconset(iconsetName);\n\n    if (!icon || !iconset) {\n      // Missing icon, return `nothing` literal.\n      return { svg: cloneSvgNode(null) };\n    }\n\n    const iconId = getIconId(icon, iconsetName);\n    const iconSvg = iconset._icons[iconId];\n\n    return {\n      preserveAspectRatio: iconSvg ? iconSvg.getAttribute('preserveAspectRatio') : null,\n      svg: cloneSvgNode(iconSvg),\n      size: iconset.size,\n      viewBox: iconSvg ? iconSvg.getAttribute('viewBox') : null,\n    };\n  }\n\n  /**\n   * Register an iconset without adding to the DOM.\n   *\n   * @param {string} name\n   * @param {number} size\n   * @param {?HTMLTemplateElement} template\n   */\n  static register(name, size, template) {\n    if (!iconsetRegistry[name]) {\n      const iconset = document.createElement('vaadin-iconset');\n      iconset.appendChild(template.content.cloneNode(true));\n      iconsetRegistry[name] = iconset;\n\n      initIconsMap(iconset, name);\n\n      iconset.size = size;\n      iconset.name = name;\n\n      // Call this function manually instead of using observer\n      // to make it work without appending element to the DOM.\n      iconset.__nameChanged(name);\n    }\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this.style.display = 'none';\n\n    // Store reference and init icons.\n    const { name } = this;\n    iconsetRegistry[name] = this;\n    initIconsMap(this, name);\n    this.__updateIcons(name);\n  }\n\n  /**\n   * Update all the icons instances in the DOM.\n   *\n   * @param {string} name\n   * @private\n   */\n  __updateIcons(name) {\n    attachedIcons.forEach((element) => {\n      if (name === getIconsetName(element.icon)) {\n        element._applyIcon();\n      }\n    });\n  }\n\n  /** @private */\n  __nameChanged(name, oldName) {\n    if (oldName) {\n      iconsetRegistry[name] = iconsetRegistry[oldName];\n      delete iconsetRegistry[oldName];\n    }\n    if (name) {\n      this.__updateIcons(name);\n    }\n  }\n}\n\ndefineCustomElement(Iconset);\n\nexport { Iconset };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAM,cAAc;AAEd,IAAO,sBAAP,cAAmC,UAAS;EAOhD,YAAY,UAAkB;AAC5B,UAAM,QAAQ;AAJR,SAAA,SAAkB;AAKxB,QAAI,SAAS,SAAS,SAAS,OAAO;AACpC,YAAM,IAAI,MACR,GACG,KAAK,YAA2C,aACnD,uCAAuC;IAE3C;EACF;EAEA,OAAO,OAAmE;AACxE,QAAI,UAAU,WAAW,SAAS,MAAM;AACtC,WAAK,kBAAkB;AACvB,aAAQ,KAAK,SAAS;IACxB;AACA,QAAI,UAAU,UAAU;AACtB,aAAO;IACT;AACA,QAAI,OAAO,SAAS,UAAU;AAC5B,YAAM,IAAI,MACR,GACG,KAAK,YAA2C,aACnD,mCAAmC;IAEvC;AACA,QAAI,UAAU,KAAK,QAAQ;AACzB,aAAO,KAAK;IACd;AACA,SAAK,SAAS;AACd,UAAM,UAAU,CAAC,KAAK;AAErB,YAAgB,MAAM;AAGvB,WAAQ,KAAK,kBAAkB;;;;MAI7B,CAAC,YAAY,GAAI,KAAK,YACnB;MACH;MACA,QAAQ,CAAA;;EAEZ;;AAlDO,oBAAA,gBAAgB;AAChB,oBAAA,aAAa;AA8Df,IAAM,aAAa,UAAU,mBAAmB;;;AClEvD,IAAM,aAAa;AAEnB,IAAM,qBAAN,cAAiC,oBAAmB;;AAClC,mBAAA,gBAAgB;AAChB,mBAAA,aAAa;AAaxB,IAAM,YAAY,UAAU,kBAAkB;;;ACZ9C,SAAS,aAAa,QAAQ;AACnC,MAAI,SAAS;AACb,MAAI,QAAQ;AACV,UAAM,UAAU,OAAO,UAAU,IAAI;AACrC,YAAQ,gBAAgB,IAAI;AAC5B,aAAS,MAAM,UAAU,QAAQ,SAAS,CAAC;AAAA,EAC7C;AAEA,SAAO;AACT;AAOO,SAAS,WAAW,QAAQ;AACjC,SAAO,iBAAiB,QAAQ,mBAAmB,GAAG,KAAK,WAAW;AACxE;AAOO,SAAS,iBAAiB,QAAQ;AACvC,MAAI,SAAS,UAAU,QAAQ,WAAW,KAAK,UAAU;AAEzD,MAAI,CAAC,WAAW,MAAM,GAAG;AACvB,YAAQ,MAAM,+DAA+D;AAC7E,aAAS;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAAS,UAAU,QAAQ,WAAW;AAC3C,QAAM,SAAS,iBAAiB,MAAM;AACtC,SAAO,QAAQ,SAAS;AAC1B;AAOO,SAAS,iBAAiB,QAAQ;AACvC,SAAO,MAAM,UAAU,MAAM,CAAC;AAChC;;;AC1DA,IAAM,kBAAkB,CAAC;AAEzB,IAAM,gBAAgB,oBAAI,IAAI;AAE9B,SAAS,UAAU,IAAI,MAAM;AAC3B,UAAQ,MAAM,IAAI,QAAQ,GAAG,IAAI,KAAK,EAAE;AAC1C;AAEA,SAAS,eAAe,MAAM;AAC5B,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,QAAM,QAAQ,KAAK,MAAM,GAAG;AAG5B,SAAO,MAAM,CAAC,KAAK;AACrB;AAEA,SAAS,aAAa,SAAS,MAAM;AACnC,UAAQ,SAAS,CAAC,GAAG,QAAQ,iBAAiB,MAAM,CAAC,EAAE,OAAO,CAAC,KAAKA,SAAQ;AAC1E,UAAM,MAAM,UAAUA,KAAI,IAAI,IAAI;AAClC,QAAI,GAAG,IAAIA;AACX,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AASA,IAAM,UAAN,cAAsB,aAAa,cAAc,EAAE;AAAA,EACjD,WAAW,WAAW;AACpB,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOL,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,UAAU;AAAA,MACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,MAAM;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,gBAAgB;AACzB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,MAAM;AACtB,WAAO,gBAAgB,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,MAAM,MAAM;AAC5B,UAAM,cAAc,QAAQ,eAAe,IAAI;AAC/C,UAAM,UAAU,KAAK,WAAW,WAAW;AAE3C,QAAI,CAAC,QAAQ,CAAC,SAAS;AAErB,aAAO,EAAE,KAAK,aAAa,IAAI,EAAE;AAAA,IACnC;AAEA,UAAM,SAAS,UAAU,MAAM,WAAW;AAC1C,UAAM,UAAU,QAAQ,OAAO,MAAM;AAErC,WAAO;AAAA,MACL,qBAAqB,UAAU,QAAQ,aAAa,qBAAqB,IAAI;AAAA,MAC7E,KAAK,aAAa,OAAO;AAAA,MACzB,MAAM,QAAQ;AAAA,MACd,SAAS,UAAU,QAAQ,aAAa,SAAS,IAAI;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,SAAS,MAAM,MAAM,UAAU;AACpC,QAAI,CAAC,gBAAgB,IAAI,GAAG;AAC1B,YAAM,UAAU,SAAS,cAAc,gBAAgB;AACvD,cAAQ,YAAY,SAAS,QAAQ,UAAU,IAAI,CAAC;AACpD,sBAAgB,IAAI,IAAI;AAExB,mBAAa,SAAS,IAAI;AAE1B,cAAQ,OAAO;AACf,cAAQ,OAAO;AAIf,cAAQ,cAAc,IAAI;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA,EAGA,oBAAoB;AAClB,UAAM,kBAAkB;AAExB,SAAK,MAAM,UAAU;AAGrB,UAAM,EAAE,KAAK,IAAI;AACjB,oBAAgB,IAAI,IAAI;AACxB,iBAAa,MAAM,IAAI;AACvB,SAAK,cAAc,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,MAAM;AAClB,kBAAc,QAAQ,CAAC,YAAY;AACjC,UAAI,SAAS,eAAe,QAAQ,IAAI,GAAG;AACzC,gBAAQ,WAAW;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,cAAc,MAAM,SAAS;AAC3B,QAAI,SAAS;AACX,sBAAgB,IAAI,IAAI,gBAAgB,OAAO;AAC/C,aAAO,gBAAgB,OAAO;AAAA,IAChC;AACA,QAAI,MAAM;AACR,WAAK,cAAc,IAAI;AAAA,IACzB;AAAA,EACF;AACF;AAEA,oBAAoB,OAAO;",
  "names": ["svg"]
}
