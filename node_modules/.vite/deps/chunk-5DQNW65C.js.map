{
  "version": 3,
  "sources": ["../../@vaadin-component-factory/vcf-pdf-viewer/pdfjs/dist/fetch_stream.js"],
  "sourcesContent": ["import { c as assert, l as createPromiseCapability, A as AbortException } from './util.js';\r\nimport { a as validateResponseStatus, c as createResponseStatusError, v as validateRangeRequestCapabilities, e as extractFilenameFromHeader } from './network_utils.js';\r\nimport './display_utils.js';\r\n\r\n/* Copyright 2012 Mozilla Foundation\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\r\n  throw new Error('Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.');\r\n}\r\n\r\nfunction createFetchOptions(headers, withCredentials, abortController) {\r\n  return {\r\n    method: \"GET\",\r\n    headers,\r\n    signal: abortController === null || abortController === void 0 ? void 0 : abortController.signal,\r\n    mode: \"cors\",\r\n    credentials: withCredentials ? \"include\" : \"same-origin\",\r\n    redirect: \"follow\"\r\n  };\r\n}\r\n\r\nfunction createHeaders(httpHeaders) {\r\n  const headers = new Headers();\r\n\r\n  for (const property in httpHeaders) {\r\n    const value = httpHeaders[property];\r\n\r\n    if (typeof value === \"undefined\") {\r\n      continue;\r\n    }\r\n\r\n    headers.append(property, value);\r\n  }\r\n\r\n  return headers;\r\n}\r\n/** @implements {IPDFStream} */\r\n\r\n\r\nclass PDFFetchStream {\r\n  constructor(source) {\r\n    this.source = source;\r\n    this.isHttp = /^https?:/i.test(source.url);\r\n    this.httpHeaders = this.isHttp && source.httpHeaders || {};\r\n    this._fullRequestReader = null;\r\n    this._rangeRequestReaders = [];\r\n  }\r\n\r\n  get _progressiveDataLength() {\r\n    var _this$_fullRequestRea, _this$_fullRequestRea2;\r\n\r\n    return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;\r\n  }\r\n\r\n  getFullReader() {\r\n    assert(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\r\n    this._fullRequestReader = new PDFFetchStreamReader(this);\r\n    return this._fullRequestReader;\r\n  }\r\n\r\n  getRangeReader(begin, end) {\r\n    if (end <= this._progressiveDataLength) {\r\n      return null;\r\n    }\r\n\r\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\r\n\r\n    this._rangeRequestReaders.push(reader);\r\n\r\n    return reader;\r\n  }\r\n\r\n  cancelAllRequests(reason) {\r\n    if (this._fullRequestReader) {\r\n      this._fullRequestReader.cancel(reason);\r\n    }\r\n\r\n    for (const reader of this._rangeRequestReaders.slice(0)) {\r\n      reader.cancel(reason);\r\n    }\r\n  }\r\n\r\n}\r\n/** @implements {IPDFStreamReader} */\r\n\r\n\r\nclass PDFFetchStreamReader {\r\n  constructor(stream) {\r\n    this._stream = stream;\r\n    this._reader = null;\r\n    this._loaded = 0;\r\n    this._filename = null;\r\n    const source = stream.source;\r\n    this._withCredentials = source.withCredentials || false;\r\n    this._contentLength = source.length;\r\n    this._headersCapability = createPromiseCapability();\r\n    this._disableRange = source.disableRange || false;\r\n    this._rangeChunkSize = source.rangeChunkSize;\r\n\r\n    if (!this._rangeChunkSize && !this._disableRange) {\r\n      this._disableRange = true;\r\n    }\r\n\r\n    if (typeof AbortController !== \"undefined\") {\r\n      this._abortController = new AbortController();\r\n    }\r\n\r\n    this._isStreamingSupported = !source.disableStream;\r\n    this._isRangeSupported = !source.disableRange;\r\n    this._headers = createHeaders(this._stream.httpHeaders);\r\n    const url = source.url;\r\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\r\n      if (!validateResponseStatus(response.status)) {\r\n        throw createResponseStatusError(response.status, url);\r\n      }\r\n\r\n      this._reader = response.body.getReader();\r\n\r\n      this._headersCapability.resolve();\r\n\r\n      const getResponseHeader = name => {\r\n        return response.headers.get(name);\r\n      };\r\n\r\n      const {\r\n        allowRangeRequests,\r\n        suggestedLength\r\n      } = validateRangeRequestCapabilities({\r\n        getResponseHeader,\r\n        isHttp: this._stream.isHttp,\r\n        rangeChunkSize: this._rangeChunkSize,\r\n        disableRange: this._disableRange\r\n      });\r\n      this._isRangeSupported = allowRangeRequests; // Setting right content length.\r\n\r\n      this._contentLength = suggestedLength || this._contentLength;\r\n      this._filename = extractFilenameFromHeader(getResponseHeader); // We need to stop reading when range is supported and streaming is\r\n      // disabled.\r\n\r\n      if (!this._isStreamingSupported && this._isRangeSupported) {\r\n        this.cancel(new AbortException(\"Streaming is disabled.\"));\r\n      }\r\n    }).catch(this._headersCapability.reject);\r\n    this.onProgress = null;\r\n  }\r\n\r\n  get headersReady() {\r\n    return this._headersCapability.promise;\r\n  }\r\n\r\n  get filename() {\r\n    return this._filename;\r\n  }\r\n\r\n  get contentLength() {\r\n    return this._contentLength;\r\n  }\r\n\r\n  get isRangeSupported() {\r\n    return this._isRangeSupported;\r\n  }\r\n\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n\r\n  async read() {\r\n    await this._headersCapability.promise;\r\n    const {\r\n      value,\r\n      done\r\n    } = await this._reader.read();\r\n\r\n    if (done) {\r\n      return {\r\n        value,\r\n        done\r\n      };\r\n    }\r\n\r\n    this._loaded += value.byteLength;\r\n\r\n    if (this.onProgress) {\r\n      this.onProgress({\r\n        loaded: this._loaded,\r\n        total: this._contentLength\r\n      });\r\n    }\r\n\r\n    const buffer = new Uint8Array(value).buffer;\r\n    return {\r\n      value: buffer,\r\n      done: false\r\n    };\r\n  }\r\n\r\n  cancel(reason) {\r\n    if (this._reader) {\r\n      this._reader.cancel(reason);\r\n    }\r\n\r\n    if (this._abortController) {\r\n      this._abortController.abort();\r\n    }\r\n  }\r\n\r\n}\r\n/** @implements {IPDFStreamRangeReader} */\r\n\r\n\r\nclass PDFFetchStreamRangeReader {\r\n  constructor(stream, begin, end) {\r\n    this._stream = stream;\r\n    this._reader = null;\r\n    this._loaded = 0;\r\n    const source = stream.source;\r\n    this._withCredentials = source.withCredentials || false;\r\n    this._readCapability = createPromiseCapability();\r\n    this._isStreamingSupported = !source.disableStream;\r\n\r\n    if (typeof AbortController !== \"undefined\") {\r\n      this._abortController = new AbortController();\r\n    }\r\n\r\n    this._headers = createHeaders(this._stream.httpHeaders);\r\n\r\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\r\n\r\n    const url = source.url;\r\n    fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\r\n      if (!validateResponseStatus(response.status)) {\r\n        throw createResponseStatusError(response.status, url);\r\n      }\r\n\r\n      this._readCapability.resolve();\r\n\r\n      this._reader = response.body.getReader();\r\n    }).catch(reason => {\r\n      if ((reason === null || reason === void 0 ? void 0 : reason.name) === \"AbortError\") {\r\n        return;\r\n      }\r\n\r\n      throw reason;\r\n    });\r\n    this.onProgress = null;\r\n  }\r\n\r\n  get isStreamingSupported() {\r\n    return this._isStreamingSupported;\r\n  }\r\n\r\n  async read() {\r\n    await this._readCapability.promise;\r\n    const {\r\n      value,\r\n      done\r\n    } = await this._reader.read();\r\n\r\n    if (done) {\r\n      return {\r\n        value,\r\n        done\r\n      };\r\n    }\r\n\r\n    this._loaded += value.byteLength;\r\n\r\n    if (this.onProgress) {\r\n      this.onProgress({\r\n        loaded: this._loaded\r\n      });\r\n    }\r\n\r\n    const buffer = new Uint8Array(value).buffer;\r\n    return {\r\n      value: buffer,\r\n      done: false\r\n    };\r\n  }\r\n\r\n  cancel(reason) {\r\n    if (this._reader) {\r\n      this._reader.cancel(reason);\r\n    }\r\n\r\n    if (this._abortController) {\r\n      this._abortController.abort();\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport { PDFFetchStream };\r\n"],
  "mappings": "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",
  "names": []
}
