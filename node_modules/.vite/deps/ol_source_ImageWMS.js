import {
  DEFAULT_WMS_VERSION,
  WMSServerType_default,
  appendParams
} from "./chunk-ZL4HMHTQ.js";
import {
  Triangulation_default,
  calculateSourceResolution,
  render
} from "./chunk-L75HGMIB.js";
import {
  ENABLE_RASTER_REPROJECTION,
  ERROR_THRESHOLD
} from "./chunk-5WYTDWXW.js";
import {
  Source_default
} from "./chunk-D4HWCROW.js";
import {
  ImageBase_default,
  Image_default
} from "./chunk-K3YCFAS2.js";
import "./chunk-NALJJYT7.js";
import {
  ImageState_default
} from "./chunk-PN2SGMHC.js";
import {
  compareVersions,
  equivalent,
  get2 as get,
  transform
} from "./chunk-HGML5IPI.js";
import {
  containsExtent,
  equals,
  getCenter,
  getForViewAndSize,
  getHeight,
  getIntersection,
  getWidth
} from "./chunk-C7XNUD4N.js";
import {
  ceil,
  floor,
  round
} from "./chunk-JFL7O5KA.js";
import "./chunk-IRMQKYQT.js";
import {
  assert
} from "./chunk-FE3DXTD6.js";
import {
  EventType_default,
  Event_default,
  linearFindNearest,
  listen,
  unlistenByKey
} from "./chunk-OAOBVDCL.js";
import {
  abstract,
  assign
} from "./chunk-K4RYKKJS.js";
import "./chunk-WGAPYIUP.js";

// node_modules/ol/reproj/Image.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ReprojImage = (
  /** @class */
  function(_super) {
    __extends(ReprojImage2, _super);
    function ReprojImage2(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, interpolate) {
      var _this = this;
      var maxSourceExtent = sourceProj.getExtent();
      var maxTargetExtent = targetProj.getExtent();
      var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;
      var targetCenter = getCenter(limitedTargetExtent);
      var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
      var errorThresholdInPixels = ERROR_THRESHOLD;
      var triangulation = new Triangulation_default(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
      var sourceExtent = triangulation.calculateSourceExtent();
      var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);
      var state = sourceImage ? ImageState_default.IDLE : ImageState_default.EMPTY;
      var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;
      _this = _super.call(this, targetExtent, targetResolution, sourcePixelRatio, state) || this;
      _this.targetProj_ = targetProj;
      _this.maxSourceExtent_ = maxSourceExtent;
      _this.triangulation_ = triangulation;
      _this.targetResolution_ = targetResolution;
      _this.targetExtent_ = targetExtent;
      _this.sourceImage_ = sourceImage;
      _this.sourcePixelRatio_ = sourcePixelRatio;
      _this.interpolate_ = interpolate;
      _this.canvas_ = null;
      _this.sourceListenerKey_ = null;
      return _this;
    }
    ReprojImage2.prototype.disposeInternal = function() {
      if (this.state == ImageState_default.LOADING) {
        this.unlistenSource_();
      }
      _super.prototype.disposeInternal.call(this);
    };
    ReprojImage2.prototype.getImage = function() {
      return this.canvas_;
    };
    ReprojImage2.prototype.getProjection = function() {
      return this.targetProj_;
    };
    ReprojImage2.prototype.reproject_ = function() {
      var sourceState = this.sourceImage_.getState();
      if (sourceState == ImageState_default.LOADED) {
        var width = getWidth(this.targetExtent_) / this.targetResolution_;
        var height = getHeight(this.targetExtent_) / this.targetResolution_;
        this.canvas_ = render(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [
          {
            extent: this.sourceImage_.getExtent(),
            image: this.sourceImage_.getImage()
          }
        ], 0, void 0, this.interpolate_);
      }
      this.state = sourceState;
      this.changed();
    };
    ReprojImage2.prototype.load = function() {
      if (this.state == ImageState_default.IDLE) {
        this.state = ImageState_default.LOADING;
        this.changed();
        var sourceState = this.sourceImage_.getState();
        if (sourceState == ImageState_default.LOADED || sourceState == ImageState_default.ERROR) {
          this.reproject_();
        } else {
          this.sourceListenerKey_ = listen(this.sourceImage_, EventType_default.CHANGE, function(e) {
            var sourceState2 = this.sourceImage_.getState();
            if (sourceState2 == ImageState_default.LOADED || sourceState2 == ImageState_default.ERROR) {
              this.unlistenSource_();
              this.reproject_();
            }
          }, this);
          this.sourceImage_.load();
        }
      }
    };
    ReprojImage2.prototype.unlistenSource_ = function() {
      unlistenByKey(
        /** @type {!import("../events.js").EventsKey} */
        this.sourceListenerKey_
      );
      this.sourceListenerKey_ = null;
    };
    return ReprojImage2;
  }(ImageBase_default)
);
var Image_default2 = ReprojImage;

// node_modules/ol/source/Image.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ImageSourceEventType = {
  /**
   * Triggered when an image starts loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart
   * @api
   */
  IMAGELOADSTART: "imageloadstart",
  /**
   * Triggered when an image finishes loading.
   * @event module:ol/source/Image.ImageSourceEvent#imageloadend
   * @api
   */
  IMAGELOADEND: "imageloadend",
  /**
   * Triggered if image loading results in an error.
   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror
   * @api
   */
  IMAGELOADERROR: "imageloaderror"
};
var ImageSourceEvent = (
  /** @class */
  function(_super) {
    __extends2(ImageSourceEvent2, _super);
    function ImageSourceEvent2(type, image) {
      var _this = _super.call(this, type) || this;
      _this.image = image;
      return _this;
    }
    return ImageSourceEvent2;
  }(Event_default)
);
var ImageSource = (
  /** @class */
  function(_super) {
    __extends2(ImageSource2, _super);
    function ImageSource2(options) {
      var _this = this;
      var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
      if (options.interpolate !== void 0) {
        interpolate = options.interpolate;
      }
      _this = _super.call(this, {
        attributions: options.attributions,
        projection: options.projection,
        state: options.state,
        interpolate
      }) || this;
      _this.on;
      _this.once;
      _this.un;
      _this.resolutions_ = options.resolutions !== void 0 ? options.resolutions : null;
      _this.reprojectedImage_ = null;
      _this.reprojectedRevision_ = 0;
      return _this;
    }
    ImageSource2.prototype.getResolutions = function() {
      return this.resolutions_;
    };
    ImageSource2.prototype.findNearestResolution = function(resolution) {
      if (this.resolutions_) {
        var idx = linearFindNearest(this.resolutions_, resolution, 0);
        resolution = this.resolutions_[idx];
      }
      return resolution;
    };
    ImageSource2.prototype.getImage = function(extent, resolution, pixelRatio, projection) {
      var sourceProjection = this.getProjection();
      if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {
        if (sourceProjection) {
          projection = sourceProjection;
        }
        return this.getImageInternal(extent, resolution, pixelRatio, projection);
      } else {
        if (this.reprojectedImage_) {
          if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {
            return this.reprojectedImage_;
          }
          this.reprojectedImage_.dispose();
          this.reprojectedImage_ = null;
        }
        this.reprojectedImage_ = new Image_default2(sourceProjection, projection, extent, resolution, pixelRatio, (function(extent2, resolution2, pixelRatio2) {
          return this.getImageInternal(extent2, resolution2, pixelRatio2, sourceProjection);
        }).bind(this), this.getInterpolate());
        this.reprojectedRevision_ = this.getRevision();
        return this.reprojectedImage_;
      }
    };
    ImageSource2.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
      return abstract();
    };
    ImageSource2.prototype.handleImageChange = function(event) {
      var image = (
        /** @type {import("../Image.js").default} */
        event.target
      );
      var type;
      switch (image.getState()) {
        case ImageState_default.LOADING:
          this.loading = true;
          type = ImageSourceEventType.IMAGELOADSTART;
          break;
        case ImageState_default.LOADED:
          this.loading = false;
          type = ImageSourceEventType.IMAGELOADEND;
          break;
        case ImageState_default.ERROR:
          this.loading = false;
          type = ImageSourceEventType.IMAGELOADERROR;
          break;
        default:
          return;
      }
      if (this.hasListener(type)) {
        this.dispatchEvent(new ImageSourceEvent(type, image));
      }
    };
    return ImageSource2;
  }(Source_default)
);
function defaultImageLoadFunction(image, src) {
  image.getImage().src = src;
}
var Image_default3 = ImageSource;

// node_modules/ol/source/ImageWMS.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DECIMALS = 4;
var GETFEATUREINFO_IMAGE_SIZE = [101, 101];
var ImageWMS = (
  /** @class */
  function(_super) {
    __extends3(ImageWMS2, _super);
    function ImageWMS2(opt_options) {
      var _this = this;
      var options = opt_options ? opt_options : {};
      var interpolate = options.imageSmoothing !== void 0 ? options.imageSmoothing : true;
      if (options.interpolate !== void 0) {
        interpolate = options.interpolate;
      }
      _this = _super.call(this, {
        attributions: options.attributions,
        interpolate,
        projection: options.projection,
        resolutions: options.resolutions
      }) || this;
      _this.crossOrigin_ = options.crossOrigin !== void 0 ? options.crossOrigin : null;
      _this.url_ = options.url;
      _this.imageLoadFunction_ = options.imageLoadFunction !== void 0 ? options.imageLoadFunction : defaultImageLoadFunction;
      _this.params_ = options.params || {};
      _this.v13_ = true;
      _this.updateV13_();
      _this.serverType_ = /** @type {import("./WMSServerType.js").default|undefined} */
      options.serverType;
      _this.hidpi_ = options.hidpi !== void 0 ? options.hidpi : true;
      _this.image_ = null;
      _this.imageSize_ = [0, 0];
      _this.renderedRevision_ = 0;
      _this.ratio_ = options.ratio !== void 0 ? options.ratio : 1.5;
      return _this;
    }
    ImageWMS2.prototype.getFeatureInfoUrl = function(coordinate, resolution, projection, params) {
      if (this.url_ === void 0) {
        return void 0;
      }
      var projectionObj = get(projection);
      var sourceProjectionObj = this.getProjection();
      if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {
        resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);
        coordinate = transform(coordinate, projectionObj, sourceProjectionObj);
      }
      var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);
      var baseParams = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetFeatureInfo",
        "FORMAT": "image/png",
        "TRANSPARENT": true,
        "QUERY_LAYERS": this.params_["LAYERS"]
      };
      assign(baseParams, this.params_, params);
      var x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);
      var y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);
      baseParams[this.v13_ ? "I" : "X"] = x;
      baseParams[this.v13_ ? "J" : "Y"] = y;
      return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);
    };
    ImageWMS2.prototype.getLegendUrl = function(resolution, params) {
      if (this.url_ === void 0) {
        return void 0;
      }
      var baseParams = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetLegendGraphic",
        "FORMAT": "image/png"
      };
      if (params === void 0 || params["LAYER"] === void 0) {
        var layers = this.params_.LAYERS;
        var isSingleLayer = !Array.isArray(layers) || layers.length === 1;
        if (!isSingleLayer) {
          return void 0;
        }
        baseParams["LAYER"] = layers;
      }
      if (resolution !== void 0) {
        var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;
        var pixelSize = 28e-5;
        baseParams["SCALE"] = resolution * mpu / pixelSize;
      }
      assign(baseParams, params);
      return appendParams(
        /** @type {string} */
        this.url_,
        baseParams
      );
    };
    ImageWMS2.prototype.getParams = function() {
      return this.params_;
    };
    ImageWMS2.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {
      if (this.url_ === void 0) {
        return null;
      }
      resolution = this.findNearestResolution(resolution);
      if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === void 0)) {
        pixelRatio = 1;
      }
      var imageResolution = resolution / pixelRatio;
      var center = getCenter(extent);
      var viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);
      var viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);
      var viewExtent = getForViewAndSize(center, imageResolution, 0, [
        viewWidth,
        viewHeight
      ]);
      var requestWidth = ceil(this.ratio_ * getWidth(extent) / imageResolution, DECIMALS);
      var requestHeight = ceil(this.ratio_ * getHeight(extent) / imageResolution, DECIMALS);
      var requestExtent = getForViewAndSize(center, imageResolution, 0, [
        requestWidth,
        requestHeight
      ]);
      var image = this.image_;
      if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {
        return image;
      }
      var params = {
        "SERVICE": "WMS",
        "VERSION": DEFAULT_WMS_VERSION,
        "REQUEST": "GetMap",
        "FORMAT": "image/png",
        "TRANSPARENT": true
      };
      assign(params, this.params_);
      this.imageSize_[0] = round(getWidth(requestExtent) / imageResolution, DECIMALS);
      this.imageSize_[1] = round(getHeight(requestExtent) / imageResolution, DECIMALS);
      var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);
      this.image_ = new Image_default(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);
      this.renderedRevision_ = this.getRevision();
      this.image_.addEventListener(EventType_default.CHANGE, this.handleImageChange.bind(this));
      return this.image_;
    };
    ImageWMS2.prototype.getImageLoadFunction = function() {
      return this.imageLoadFunction_;
    };
    ImageWMS2.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {
      assert(this.url_ !== void 0, 9);
      params[this.v13_ ? "CRS" : "SRS"] = projection.getCode();
      if (!("STYLES" in this.params_)) {
        params["STYLES"] = "";
      }
      if (pixelRatio != 1) {
        switch (this.serverType_) {
          case WMSServerType_default.GEOSERVER:
            var dpi = 90 * pixelRatio + 0.5 | 0;
            if ("FORMAT_OPTIONS" in params) {
              params["FORMAT_OPTIONS"] += ";dpi:" + dpi;
            } else {
              params["FORMAT_OPTIONS"] = "dpi:" + dpi;
            }
            break;
          case WMSServerType_default.MAPSERVER:
            params["MAP_RESOLUTION"] = 90 * pixelRatio;
            break;
          case WMSServerType_default.CARMENTA_SERVER:
          case WMSServerType_default.QGIS:
            params["DPI"] = 90 * pixelRatio;
            break;
          default:
            assert(false, 8);
            break;
        }
      }
      params["WIDTH"] = size[0];
      params["HEIGHT"] = size[1];
      var axisOrientation = projection.getAxisOrientation();
      var bbox;
      if (this.v13_ && axisOrientation.substr(0, 2) == "ne") {
        bbox = [extent[1], extent[0], extent[3], extent[2]];
      } else {
        bbox = extent;
      }
      params["BBOX"] = bbox.join(",");
      return appendParams(
        /** @type {string} */
        this.url_,
        params
      );
    };
    ImageWMS2.prototype.getUrl = function() {
      return this.url_;
    };
    ImageWMS2.prototype.setImageLoadFunction = function(imageLoadFunction) {
      this.image_ = null;
      this.imageLoadFunction_ = imageLoadFunction;
      this.changed();
    };
    ImageWMS2.prototype.setUrl = function(url) {
      if (url != this.url_) {
        this.url_ = url;
        this.image_ = null;
        this.changed();
      }
    };
    ImageWMS2.prototype.updateParams = function(params) {
      assign(this.params_, params);
      this.updateV13_();
      this.image_ = null;
      this.changed();
    };
    ImageWMS2.prototype.updateV13_ = function() {
      var version = this.params_["VERSION"] || DEFAULT_WMS_VERSION;
      this.v13_ = compareVersions(version, "1.3") >= 0;
    };
    return ImageWMS2;
  }(Image_default3)
);
var ImageWMS_default = ImageWMS;
export {
  ImageWMS_default as default
};
//# sourceMappingURL=ol_source_ImageWMS.js.map
