{
  "version": 3,
  "sources": ["../../@vaadin/overlay/theme/lumo/vaadin-overlay-styles.js", "../../@vaadin/overlay/src/vaadin-overlay.js"],
  "sourcesContent": ["import { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\nimport { registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles('vaadin-overlay', overlay, { moduleId: 'lumo-vaadin-overlay' });\n", "/**\n * @license\n * Copyright (c) 2017 - 2024 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { OverlayMixin } from './vaadin-overlay-mixin.js';\nimport { overlayStyles } from './vaadin-overlay-styles.js';\n\nregisterStyles('vaadin-overlay', overlayStyles, { moduleId: 'vaadin-overlay-styles' });\n\n/**\n * `<vaadin-overlay>` is a Web Component for creating overlays. The content of the overlay\n * can be populated imperatively by using `renderer` callback function.\n *\n * ### Rendering\n *\n * The renderer function provides `root`, `owner`, `model` arguments when applicable.\n * Generate DOM content by using `model` object properties if needed, append it to the `root`\n * element and control the state of the host element by accessing `owner`. Before generating new\n * content, users are able to check if there is already content in `root` for reusing it.\n *\n * ```html\n * <vaadin-overlay id=\"overlay\"></vaadin-overlay>\n * ```\n * ```js\n * const overlay = document.querySelector('#overlay');\n * overlay.renderer = function(root) {\n *  root.textContent = \"Overlay content\";\n * };\n * ```\n *\n * Renderer is called on the opening of the overlay and each time the related model is updated.\n * DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * ### Styling\n *\n * The following Shadow DOM parts are available for styling:\n *\n * Part name  | Description\n * -----------|---------------------------------------------------------|\n * `backdrop` | Backdrop of the overlay\n * `overlay`  | Container for position/sizing/alignment of the content\n * `content`  | Content of the overlay\n *\n * The following state attributes are available for styling:\n *\n * Attribute | Description | Part\n * ---|---|---\n * `opening` | Applied just after the overlay is attached to the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n * `closing` | Applied just before the overlay is detached from the DOM. You can apply a CSS @keyframe animation for this state. | `:host`\n *\n * The following custom CSS properties are available for styling:\n *\n * Custom CSS property | Description | Default value\n * ---|---|---\n * `--vaadin-overlay-viewport-bottom` | Bottom offset of the visible viewport area | `0` or detected offset\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} vaadin-overlay-open - Fired after the overlay is opened.\n * @fires {CustomEvent} vaadin-overlay-close - Fired when the opened overlay is about to be closed. Calling `preventDefault()` on the event cancels the closing.\n * @fires {CustomEvent} vaadin-overlay-closing - Fired when the overlay starts to close. Closing the overlay can be asynchronous depending on the animation.\n * @fires {CustomEvent} vaadin-overlay-closed - Fired after the overlay is closed.\n * @fires {CustomEvent} vaadin-overlay-outside-click - Fired before the overlay is closed on outside click. Calling `preventDefault()` on the event cancels the closing.\n * @fires {CustomEvent} vaadin-overlay-escape-press - Fired before the overlay is closed on Escape key press. Calling `preventDefault()` on the event cancels the closing.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ThemableMixin\n * @mixes DirMixin\n * @mixes OverlayMixin\n */\nclass Overlay extends OverlayMixin(ThemableMixin(DirMixin(PolymerElement))) {\n  static get template() {\n    return html`\n      <div id=\"backdrop\" part=\"backdrop\" hidden$=\"[[!withBackdrop]]\"></div>\n      <div part=\"overlay\" id=\"overlay\" tabindex=\"0\">\n        <div part=\"content\" id=\"content\">\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-overlay';\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    processTemplates(this);\n  }\n\n  /**\n   * @event vaadin-overlay-open\n   * Fired after the overlay is opened.\n   */\n\n  /**\n   * @event vaadin-overlay-close\n   * Fired when the opened overlay is about to be closed.\n   * Calling `preventDefault()` on the event cancels the closing.\n   */\n\n  /**\n   * @event vaadin-overlay-closing\n   * Fired when the overlay starts to close.\n   * Closing the overlay can be asynchronous depending on the animation.\n   */\n\n  /**\n   * @event vaadin-overlay-closed\n   * Fired after the overlay is closed.\n   */\n\n  /**\n   * @event vaadin-overlay-escape-press\n   * Fired before the overlay is closed on Escape key press.\n   * Calling `preventDefault()` on the event cancels the closing.\n   */\n\n  /**\n   * @event vaadin-overlay-outside-click\n   * Fired before the overlay is closed on outside click.\n   * Calling `preventDefault()` on the event cancels the closing.\n   */\n}\n\ndefineCustomElement(Overlay);\n\nexport { Overlay };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,eAAe,kBAAkB,SAAS,EAAE,UAAU,sBAAsB,CAAC;;;ACU7E,eAAe,kBAAkB,eAAe,EAAE,UAAU,wBAAwB,CAAC;AAmErF,IAAM,UAAN,cAAsB,aAAa,cAAc,SAAS,cAAc,CAAC,CAAC,EAAE;AAAA,EAC1E,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT;AAAA,EAEA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,qBAAiB,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCF;AAEA,oBAAoB,OAAO;",
  "names": []
}
