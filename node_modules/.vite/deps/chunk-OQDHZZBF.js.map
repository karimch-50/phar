{
  "version": 3,
  "sources": ["../../@vaadin/icon/theme/lumo/vaadin-icon-styles.js", "../../@vaadin/icon/src/vaadin-icon-helpers.js", "../../@vaadin/icon/src/vaadin-icon-font-size-mixin.js", "../../@vaadin/icon/src/vaadin-icon.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/sizing.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-icon',\n  css`\n    :host {\n      width: var(--lumo-icon-size-m);\n      height: var(--lumo-icon-size-m);\n    }\n  `,\n  { moduleId: 'lumo-icon' },\n);\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nimport { isSafari } from '@vaadin/component-base/src/browser-utils.js';\n\n/**\n * Checks if the current browser supports CSS Container Query units for pseudo elements.\n * i.e. if the fix for https://bugs.webkit.org/show_bug.cgi?id=253939 is available.\n */\nexport function supportsCQUnitsForPseudoElements() {\n  const testStyle = document.createElement('style');\n  testStyle.textContent = `\n    .vaadin-icon-test-element {\n      container-type: size;\n      height: 2px;\n      visibility: hidden;\n      position: fixed;\n    }\n\n    .vaadin-icon-test-element::before {\n      content: '';\n      display: block;\n      height: 100cqh;\n    `;\n  const testElement = document.createElement('div');\n  testElement.classList.add('vaadin-icon-test-element');\n\n  document.body.append(testStyle, testElement);\n  const { height } = getComputedStyle(testElement, '::before');\n  testStyle.remove();\n  testElement.remove();\n  return height === '2px';\n}\n\n/**\n * Checks if the current browser needs a fallback for sizing font icons instead of relying on CSS Container Queries.\n */\nexport function needsFontIconSizingFallback() {\n  if (!CSS.supports('container-type: inline-size')) {\n    // The browser does not support CSS Container Queries at all.\n    return true;\n  }\n  if (!isSafari) {\n    // Browsers other than Safari support CSS Container Queries as expected.\n    return false;\n  }\n  // Check if the browser does not support CSS Container Query units for pseudo elements.\n  return !supportsCQUnitsForPseudoElements();\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { needsFontIconSizingFallback } from './vaadin-icon-helpers.js';\n\nconst usesFontIconSizingFallback = needsFontIconSizingFallback();\n\nif (usesFontIconSizingFallback) {\n  registerStyles(\n    'vaadin-icon',\n    css`\n      :host::after,\n      :host::before {\n        font-size: var(--_vaadin-font-icon-size);\n      }\n    `,\n    'vaadin-icon-font-size-mixin-styles',\n  );\n}\n\n/**\n * Mixin which enables the font icon sizing fallback for browsers that do not support CSS Container Queries.\n * The mixin does nothing if the browser supports CSS Container Query units for pseudo elements.\n *\n * @polymerMixin\n */\nexport const IconFontSizeMixin = dedupingMixin((superclass) =>\n  !usesFontIconSizingFallback\n    ? superclass\n    : class extends ResizeMixin(superclass) {\n        static get observers() {\n          return ['__iconFontSizeMixinfontChanged(iconClass, char, ligature)'];\n        }\n\n        /** @protected */\n        ready() {\n          super.ready();\n\n          // Update once initially to avoid a fouc\n          this.__updateFontIconSize();\n        }\n\n        /** @private */\n        __iconFontSizeMixinfontChanged(_iconClass, _char, _ligature) {\n          // Update when iconClass, char or ligature changes\n          this.__updateFontIconSize();\n        }\n\n        /**\n         * @protected\n         * @override\n         */\n        _onResize() {\n          // Update when the element is resized\n          this.__updateFontIconSize();\n        }\n\n        /**\n         * Updates the --_vaadin-font-icon-size CSS variable value if font icons are used.\n         *\n         * @private\n         */\n        __updateFontIconSize() {\n          if (this.char || this.iconClass || this.ligature) {\n            const { paddingTop, paddingBottom, height } = getComputedStyle(this);\n            const fontIconSize = parseFloat(height) - parseFloat(paddingTop) - parseFloat(paddingBottom);\n            this.style.setProperty('--_vaadin-font-icon-size', `${fontIconSize}px`);\n          }\n        }\n      },\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotStylesMixin } from '@vaadin/component-base/src/slot-styles-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { IconFontSizeMixin } from './vaadin-icon-font-size-mixin.js';\nimport { ensureSvgLiteral, renderSvg, unsafeSvgLiteral } from './vaadin-icon-svg.js';\nimport { Iconset } from './vaadin-iconset.js';\n\nconst srcCache = new Map();\n\n/**\n * `<vaadin-icon>` is a Web Component for displaying SVG icons.\n *\n * ### Icon property\n *\n * The `<vaadin-icon>` component is designed to be used as a drop-in replacement for `<iron-icon>`.\n * For example, you can use it with `vaadin-icons` like this:\n *\n * ```html\n * <vaadin-icon icon=\"vaadin:angle-down\"></vaadin-icon>\n * ```\n *\n * Alternatively, you can also pick one of the Lumo icons:\n *\n * ```html\n * <vaadin-icon icon=\"lumo:user\"></vaadin-icon>\n * ```\n *\n * ### Custom SVG icon\n *\n * Alternatively, instead of selecting an icon from an iconset by name, you can pass any custom `svg`\n * literal using the [`svg`](#/elements/vaadin-icon#property-svg) property. In this case you can also\n * define the size of the SVG `viewBox` using the [`size`](#/elements/vaadin-icon#property-size) property:\n *\n * ```js\n * import { html, svg } from 'lit';\n *\n * // in your component\n * render() {\n *   const svgIcon = svg`<path d=\"M13 4v2l-5 5-5-5v-2l5 5z\"></path>`;\n *   return html`\n *     <vaadin-icon\n *       .svg=\"${svgIcon}\"\n *       size=\"16\"\n *     ></vaadin-icon>\n *   `;\n * }\n * ```\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ControllerMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n * @mixes SlotStylesMixin\n * @mixes IconFontSizeMixin\n */\nclass Icon extends ThemableMixin(ElementMixin(ControllerMixin(SlotStylesMixin(IconFontSizeMixin(PolymerElement))))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: inline-flex;\n          justify-content: center;\n          align-items: center;\n          box-sizing: border-box;\n          vertical-align: middle;\n          width: 24px;\n          height: 24px;\n          fill: currentColor;\n          container-type: size;\n        }\n\n        :host::after,\n        :host::before {\n          line-height: 1;\n          font-size: 100cqh;\n          -webkit-font-smoothing: antialiased;\n          text-rendering: optimizeLegibility;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        svg {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n\n        :host(:is([icon-class], [font-icon-content])) svg {\n          display: none;\n        }\n\n        :host([font-icon-content])::before {\n          content: attr(font-icon-content);\n        }\n      </style>\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        viewBox=\"[[__computeViewBox(size, __viewBox)]]\"\n        preserveAspectRatio=\"[[__computePAR(__defaultPAR, __preserveAspectRatio)]]\"\n        fill$=\"[[__fill]]\"\n        stroke$=\"[[__stroke]]\"\n        stroke-width$=\"[[__strokeWidth]]\"\n        stroke-linecap$=\"[[__strokeLinecap]]\"\n        stroke-linejoin$=\"[[__strokeLinejoin]]\"\n        aria-hidden=\"true\"\n      >\n        <g id=\"svg-group\"></g>\n        <g id=\"use-group\" visibility$=\"[[__computeVisibility(__useRef, svg)]]\">\n          <use href$=\"[[__useRef]]\" />\n        </g>\n      </svg>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-icon';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The name of the icon to use. The name should be of the form:\n       * `iconset_name:icon_name`. When using `vaadin-icons` it is possible\n       * to omit the first part and only use `icon_name` as a value.\n       *\n       * Setting the `icon` property updates the `svg` and `size` based on the\n       * values provided by the corresponding `vaadin-iconset` element.\n       *\n       * See also [`name`](#/elements/vaadin-iconset#property-name) property of `vaadin-iconset`.\n       *\n       * @attr {string} icon\n       * @type {string}\n       */\n      icon: {\n        type: String,\n        reflectToAttribute: true,\n        observer: '__iconChanged',\n      },\n\n      /**\n       * The SVG icon wrapped in a Lit template literal.\n       */\n      svg: {\n        type: Object,\n      },\n\n      /**\n       * The SVG source to be loaded as the icon. It can be:\n       * - an URL to a file containing the icon\n       * - an URL in the format \"/path/to/file.svg#objectID\", where the \"objectID\" refers to an ID attribute contained\n       *   inside the SVG referenced by the path. Note that the file needs to follow the same-origin policy.\n       * - a string in the format \"data:image/svg+xml,<svg>...</svg>\". You may need to use the \"encodeURIComponent\"\n       *   function for the SVG content passed\n       *\n       * @type {string}\n       */\n      src: {\n        type: String,\n      },\n\n      /**\n       * The symbol identifier that references an ID of an element contained in the SVG element assigned to the\n       * `src` property\n       *\n       * @type {string}\n       */\n      symbol: {\n        type: String,\n      },\n\n      /**\n       * Class names defining an icon font and/or a specific glyph inside an icon font.\n       *\n       * Example: \"fa-solid fa-user\"\n       *\n       * @attr {string} icon-class\n       * @type {string}\n       */\n      iconClass: {\n        type: String,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * A hexadecimal code point that specifies a glyph from an icon font.\n       *\n       * Example: \"e001\"\n       *\n       * @type {string}\n       */\n      char: {\n        type: String,\n      },\n\n      /**\n       * A ligature name that specifies an icon from an icon font with support for ligatures.\n       *\n       * Example: \"home\".\n       *\n       * @type {string}\n       */\n      ligature: {\n        type: String,\n      },\n\n      /**\n       * The font family to use for the font icon.\n       *\n       * @type {string}\n       */\n      fontFamily: {\n        type: String,\n        observer: '__fontFamilyChanged',\n      },\n\n      /**\n       * The size of an icon, used to set the `viewBox` attribute.\n       */\n      size: {\n        type: Number,\n        value: 24,\n      },\n\n      /** @private */\n      __defaultPAR: {\n        type: String,\n        value: 'xMidYMid meet',\n      },\n\n      /** @private */\n      __preserveAspectRatio: String,\n\n      /** @private */\n      __useRef: Object,\n\n      /** @private */\n      __svgElement: String,\n\n      /** @private */\n      __viewBox: String,\n\n      /** @private */\n      __fill: String,\n\n      /** @private */\n      __stroke: String,\n\n      /** @private */\n      __strokeWidth: String,\n\n      /** @private */\n      __strokeLinecap: String,\n\n      /** @private */\n      __strokeLinejoin: String,\n    };\n  }\n\n  static get observers() {\n    return ['__svgChanged(svg, __svgElement)', '__fontChanged(iconClass, char, ligature)', '__srcChanged(src, symbol)'];\n  }\n\n  static get observedAttributes() {\n    return [...super.observedAttributes, 'class'];\n  }\n\n  constructor() {\n    super();\n\n    this.__fetch = fetch.bind(window);\n  }\n\n  /** @protected */\n  get slotStyles() {\n    const tag = this.localName;\n    return [\n      `\n        ${tag}[icon-class] {\n          display: inline-flex;\n          vertical-align: middle;\n          font-size: inherit;\n        }\n      `,\n    ];\n  }\n\n  /** @private */\n  get __iconClasses() {\n    return this.iconClass ? this.iconClass.split(' ') : [];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.__svgElement = this.shadowRoot.querySelector('#svg-group');\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    Iconset.attachedIcons.add(this);\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    Iconset.attachedIcons.delete(this);\n  }\n\n  /** @protected */\n  _applyIcon() {\n    const { preserveAspectRatio, svg, size, viewBox } = Iconset.getIconSvg(this.icon);\n\n    if (viewBox) {\n      this.__viewBox = viewBox;\n    }\n\n    if (preserveAspectRatio) {\n      this.__preserveAspectRatio = preserveAspectRatio;\n    }\n\n    if (size && size !== this.size) {\n      this.size = size;\n    }\n\n    this.svg = svg;\n  }\n\n  /** @private */\n  __iconChanged(icon) {\n    if (icon) {\n      this._applyIcon();\n    } else {\n      this.svg = ensureSvgLiteral(null);\n    }\n  }\n\n  /** @private */\n  async __srcChanged(src, symbol) {\n    if (!src) {\n      this.svg = null;\n      return;\n    }\n\n    // Need to add the \"icon\" attribute to avoid issues as described in\n    // https://github.com/vaadin/web-components/issues/6301\n    this.icon = '';\n\n    if (!src.startsWith('data:') && (symbol || src.includes('#'))) {\n      const [path, iconId] = src.split('#');\n      this.__useRef = `${path}#${symbol || iconId}`;\n    } else {\n      try {\n        if (!srcCache.has(src)) {\n          srcCache.set(\n            src,\n            this.__fetch(src, { mode: 'cors' }).then((data) => {\n              if (!data.ok) {\n                throw new Error('Error loading icon');\n              }\n              return data.text();\n            }),\n          );\n        }\n        const svgData = await srcCache.get(src);\n\n        if (!Icon.__domParser) {\n          Icon.__domParser = new DOMParser();\n        }\n        const parsedResponse = Icon.__domParser.parseFromString(svgData, 'text/html');\n\n        const svgElement = parsedResponse.querySelector('svg');\n        if (!svgElement) {\n          throw new Error(`SVG element not found on path: ${src}`);\n        }\n\n        this.svg = unsafeSvgLiteral(svgElement.innerHTML);\n\n        if (symbol) {\n          this.__useRef = `#${symbol}`;\n        }\n\n        this.__viewBox = svgElement.getAttribute('viewBox');\n        this.__fill = svgElement.getAttribute('fill');\n        this.__stroke = svgElement.getAttribute('stroke');\n        this.__strokeWidth = svgElement.getAttribute('stroke-width');\n        this.__strokeLinecap = svgElement.getAttribute('stroke-linecap');\n        this.__strokeLinejoin = svgElement.getAttribute('stroke-linejoin');\n      } catch (e) {\n        console.error(e);\n        this.svg = null;\n      }\n    }\n  }\n\n  /** @private */\n  __svgChanged(svg, svgElement) {\n    if (!svgElement) {\n      return;\n    }\n\n    renderSvg(svg, svgElement);\n  }\n\n  /** @private */\n  __computePAR(defaultPAR, preserveAspectRatio) {\n    return preserveAspectRatio || defaultPAR;\n  }\n\n  /** @private */\n  __computeVisibility(__useRef) {\n    return __useRef ? 'visible' : 'hidden';\n  }\n\n  /** @private */\n  __computeViewBox(size, viewBox) {\n    return viewBox || `0 0 ${size} ${size}`;\n  }\n\n  /** @private */\n  __fontChanged(iconClass, char, ligature) {\n    this.classList.remove(...(this.__addedIconClasses || []));\n    if (iconClass) {\n      this.__addedIconClasses = [...this.__iconClasses];\n      this.classList.add(...this.__addedIconClasses);\n    }\n\n    if (char) {\n      this.setAttribute('font-icon-content', char.length > 1 ? String.fromCodePoint(parseInt(char, 16)) : char);\n    } else if (ligature) {\n      this.setAttribute('font-icon-content', ligature);\n    } else {\n      this.removeAttribute('font-icon-content');\n    }\n\n    if ((iconClass || char || ligature) && !this.icon) {\n      // The \"icon\" attribute needs to be set on the host also when using font icons\n      // to avoid issues such as https://github.com/vaadin/web-components/issues/6301\n      this.icon = '';\n    }\n  }\n\n  /** @protected */\n  attributeChangedCallback(name, oldValue, newValue) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n\n    // Make sure class list always contains all the font class names\n    if (name === 'class' && this.__iconClasses.some((className) => !this.classList.contains(className))) {\n      this.classList.add(...this.__iconClasses);\n    }\n  }\n\n  /** @private */\n  __fontFamilyChanged(fontFamily) {\n    this.style.fontFamily = `'${fontFamily}'`;\n  }\n}\n\ndefineCustomElement(Icon);\n\nexport { Icon };\n"],
  "mappings": "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",
  "names": []
}
