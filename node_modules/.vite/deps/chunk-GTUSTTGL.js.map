{
  "version": 3,
  "sources": ["../../@polymer/polymer/lib/utils/array-splice.js"],
  "sourcesContent": ["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n"],
  "mappings": "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",
  "names": []
}
