{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-helpers.js", "../../@vaadin/grid/src/vaadin-grid-column-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { microTask } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\n\n/**\n * Returns the cells of the given row, excluding the details cell.\n *\n * @param {HTMLTableRowElement} row the table row\n * @return {HTMLTableCellElement[]} array of cells\n */\nexport function getBodyRowCells(row) {\n  // If available, return the cached cells. Otherwise, query the cells directly from the row.\n  return row.__cells || Array.from(row.querySelectorAll('[part~=\"cell\"]:not([part~=\"details-cell\"])'));\n}\n\n/**\n * @param {HTMLElement} container the DOM element with children\n * @param {Function} callback function to call on each child\n */\nexport function iterateChildren(container, callback) {\n  [...container.children].forEach(callback);\n}\n\n/**\n * Iterates over the cells of a row. This includes the details cell if\n * present and any other cell that may be physically detached from the row\n * due to lazy column reordering.\n *\n * @param {HTMLTableRowElement} row the table row\n * @param {Function} callback function to call on each cell\n */\nexport function iterateRowCells(row, callback) {\n  getBodyRowCells(row).forEach(callback);\n  if (row.__detailsCell) {\n    callback(row.__detailsCell);\n  }\n}\n\n/**\n * @param {Array<Object>} columns array of columns to be modified\n * @param {number} scope multiplier added to base order for each column\n * @param {number} baseOrder base number used for order\n */\nexport function updateColumnOrders(columns, scope, baseOrder) {\n  let c = 1;\n  columns.forEach((column) => {\n    // Avoid multiples of 10 because they introduce and extra zero and\n    // causes the underlying calculations for child order goes wrong\n    if (c % 10 === 0) {\n      c += 1;\n    }\n    column._order = baseOrder + c * scope;\n    c += 1;\n  });\n}\n\n/**\n * @param {!HTMLElement} element\n * @param {string} attribute\n * @param {boolean | string | null | undefined} value\n */\nexport function updateState(element, attribute, value) {\n  switch (typeof value) {\n    case 'boolean':\n      element.toggleAttribute(attribute, value);\n      break;\n    case 'string':\n      element.setAttribute(attribute, value);\n      break;\n    default:\n      // Value set to null / undefined\n      element.removeAttribute(attribute);\n      break;\n  }\n}\n\n/**\n * @param {!HTMLElement} element\n * @param {boolean | string | null | undefined} value\n * @param {string} part\n */\nexport function updatePart(element, value, part) {\n  if (value || value === '') {\n    addValueToAttribute(element, 'part', part);\n  } else {\n    removeValueFromAttribute(element, 'part', part);\n  }\n}\n\n/**\n * @param {HTMLTableCellElement[]} cells\n * @param {string} part\n * @param {boolean | string | null | undefined} value\n */\nexport function updateCellsPart(cells, part, value) {\n  cells.forEach((cell) => {\n    updatePart(cell, value, part);\n  });\n}\n\n/**\n * @param {!HTMLElement} row\n * @param {Object} states\n */\nexport function updateBooleanRowStates(row, states) {\n  const cells = getBodyRowCells(row);\n\n  Object.entries(states).forEach(([state, value]) => {\n    // Row state attribute\n    updateState(row, state, value);\n\n    const rowPart = `${state}-row`;\n\n    // Row part attribute\n    updatePart(row, value, rowPart);\n\n    // Cells part attribute\n    updateCellsPart(cells, `${rowPart}-cell`, value);\n  });\n}\n\n/**\n * @param {!HTMLElement} row\n * @param {Object} states\n */\nexport function updateStringRowStates(row, states) {\n  const cells = getBodyRowCells(row);\n\n  Object.entries(states).forEach(([state, value]) => {\n    const prevValue = row.getAttribute(state);\n\n    // Row state attribute\n    updateState(row, state, value);\n\n    // remove previous part from row and cells if there was any\n    if (prevValue) {\n      const prevRowPart = `${state}-${prevValue}-row`;\n      updatePart(row, false, prevRowPart);\n      updateCellsPart(cells, `${prevRowPart}-cell`, false);\n    }\n\n    // set new part to rows and cells if there is a value\n    if (value) {\n      const rowPart = `${state}-${value}-row`;\n      updatePart(row, value, rowPart);\n      updateCellsPart(cells, `${rowPart}-cell`, value);\n    }\n  });\n}\n\n/**\n * @param {!HTMLElement} cell\n * @param {string} attribute\n * @param {boolean | string | null | undefined} value\n * @param {string} part\n * @param {?string} oldPart\n */\nexport function updateCellState(cell, attribute, value, part, oldPart) {\n  // Toggle state attribute on the cell\n  updateState(cell, attribute, value);\n\n  // Remove old part from the attribute\n  if (oldPart) {\n    updatePart(cell, false, oldPart);\n  }\n\n  // Add new part to the cell attribute\n  updatePart(cell, value, part || `${attribute}-cell`);\n}\n\n/**\n * A helper for observing flattened child column list of an element.\n */\nexport class ColumnObserver {\n  constructor(host, callback) {\n    this.__host = host;\n    this.__callback = callback;\n    this.__currentSlots = [];\n\n    this.__onMutation = this.__onMutation.bind(this);\n    this.__observer = new MutationObserver(this.__onMutation);\n    this.__observer.observe(host, {\n      childList: true,\n    });\n\n    // The observer callback is invoked once initially.\n    this.__initialCallDebouncer = Debouncer.debounce(this.__initialCallDebouncer, microTask, () => this.__onMutation());\n  }\n\n  disconnect() {\n    this.__observer.disconnect();\n    this.__initialCallDebouncer.cancel();\n    this.__toggleSlotChangeListeners(false);\n  }\n\n  flush() {\n    this.__onMutation();\n  }\n\n  __toggleSlotChangeListeners(add) {\n    this.__currentSlots.forEach((slot) => {\n      if (add) {\n        slot.addEventListener('slotchange', this.__onMutation);\n      } else {\n        slot.removeEventListener('slotchange', this.__onMutation);\n      }\n    });\n  }\n\n  __onMutation() {\n    // Detect if this is the initial call\n    const initialCall = !this.__currentColumns;\n    this.__currentColumns ||= [];\n\n    // Detect added and removed columns or if the columns order has changed\n    const columns = ColumnObserver.getColumns(this.__host);\n    const addedColumns = columns.filter((column) => !this.__currentColumns.includes(column));\n    const removedColumns = this.__currentColumns.filter((column) => !columns.includes(column));\n    const orderChanged = this.__currentColumns.some((column, index) => column !== columns[index]);\n    this.__currentColumns = columns;\n\n    // Update the list of child slots and toggle their slotchange listeners\n    this.__toggleSlotChangeListeners(false);\n    this.__currentSlots = [...this.__host.children].filter((child) => child instanceof HTMLSlotElement);\n    this.__toggleSlotChangeListeners(true);\n\n    // Invoke the callback if there are changes in the child columns or if this is the initial call\n    const invokeCallback = initialCall || addedColumns.length || removedColumns.length || orderChanged;\n    if (invokeCallback) {\n      this.__callback(addedColumns, removedColumns);\n    }\n  }\n\n  /**\n   * Default filter for column elements.\n   */\n  static __isColumnElement(node) {\n    return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/u.test(node.localName);\n  }\n\n  static getColumns(host) {\n    const columns = [];\n\n    // A temporary workaround for backwards compatibility\n    const isColumnElement = host._isColumnElement || ColumnObserver.__isColumnElement;\n\n    [...host.children].forEach((child) => {\n      if (isColumnElement(child)) {\n        // The child is a column element, add it to the list\n        columns.push(child);\n      } else if (child instanceof HTMLSlotElement) {\n        // The child is a slot, add all assigned column elements to the list\n        [...child.assignedElements({ flatten: true })]\n          .filter((assignedElement) => isColumnElement(assignedElement))\n          .forEach((assignedElement) => columns.push(assignedElement));\n      }\n    });\n\n    return columns;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { animationFrame } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { updateCellState } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnBaseMixin = (superClass) =>\n  class ColumnBaseMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When set to true, the column is user-resizable.\n         * @default false\n         */\n        resizable: {\n          type: Boolean,\n          sync: true,\n          value() {\n            if (this.localName === 'vaadin-grid-column-group') {\n              return;\n            }\n\n            const parent = this.parentNode;\n            if (parent && parent.localName === 'vaadin-grid-column-group') {\n              return parent.resizable || false;\n            }\n            return false;\n          },\n        },\n\n        /**\n         * When true, the column is frozen. When a column inside of a column group is frozen,\n         * all of the sibling columns inside the group will get frozen also.\n         * @type {boolean}\n         */\n        frozen: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * When true, the column is frozen to end of grid.\n         *\n         * When a column inside of a column group is frozen to end, all of the sibling columns\n         * inside the group will get frozen to end also.\n         *\n         * Column can not be set as `frozen` and `frozenToEnd` at the same time.\n         * @attr {boolean} frozen-to-end\n         * @type {boolean}\n         */\n        frozenToEnd: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * When true, the cells for this column will be rendered with the `role` attribute\n         * set as `rowheader`, instead of the `gridcell` role value used by default.\n         *\n         * When a column is set as row header, its cells will be announced by screen readers\n         * while navigating to help user identify the current row as uniquely as possible.\n         *\n         * @attr {boolean} row-header\n         * @type {boolean}\n         */\n        rowHeader: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * When set to true, the cells for this column are hidden.\n         */\n        hidden: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * Text content to display in the header cell of the column.\n         */\n        header: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * Aligns the columns cell content horizontally.\n         * Supported values: \"start\", \"center\" and \"end\".\n         * @attr {start|center|end} text-align\n         * @type {GridColumnTextAlign | null | undefined}\n         */\n        textAlign: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * Custom part name for the header cell.\n         *\n         * @attr {string} header-part-name\n         */\n        headerPartName: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * Custom part name for the footer cell.\n         *\n         * @attr {string} footer-part-name\n         */\n        footerPartName: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _lastFrozen: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _bodyContentHidden: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * @type {boolean}\n         * @protected\n         */\n        _firstFrozenToEnd: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /** @protected */\n        _order: {\n          type: Number,\n          sync: true,\n        },\n\n        /** @private */\n        _reorderStatus: {\n          type: Boolean,\n          sync: true,\n        },\n\n        /**\n         * @type {Array<!HTMLElement>}\n         * @protected\n         */\n        _emptyCells: Array,\n\n        /** @private */\n        _headerCell: Object,\n\n        /** @private */\n        _footerCell: Object,\n\n        /** @protected */\n        _grid: Object,\n\n        /**\n         * By default, the Polymer doesn't invoke the observer\n         * during initialization if all of its dependencies are `undefined`.\n         * This internal property can be used to force initial invocation of an observer\n         * even the other dependencies of the observer are `undefined`.\n         *\n         * @private\n         */\n        __initialized: {\n          type: Boolean,\n          value: true,\n        },\n\n        /**\n         * Custom function for rendering the header content.\n         * Receives two arguments:\n         *\n         * - `root` The header cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        headerRenderer: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * Represents the final header renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the header cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _headerRenderer: {\n          type: Function,\n          computed: '_computeHeaderRenderer(headerRenderer, header, __initialized)',\n          sync: true,\n        },\n\n        /**\n         * Custom function for rendering the footer content.\n         * Receives two arguments:\n         *\n         * - `root` The footer cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         *\n         * @type {GridHeaderFooterRenderer | null | undefined}\n         */\n        footerRenderer: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * Represents the final footer renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the footer cell content.\n         *\n         * @protected\n         * @type {GridHeaderFooterRenderer | undefined}\n         */\n        _footerRenderer: {\n          type: Function,\n          computed: '_computeFooterRenderer(footerRenderer, __initialized)',\n          sync: true,\n        },\n\n        /**\n         * An internal property that is mainly used by `vaadin-template-renderer`\n         * to identify grid column elements.\n         *\n         * @private\n         */\n        __gridColumnElement: {\n          type: Boolean,\n          value: true,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_widthChanged(width, _headerCell, _footerCell, _cells)',\n        '_frozenChanged(frozen, _headerCell, _footerCell, _cells)',\n        '_frozenToEndChanged(frozenToEnd, _headerCell, _footerCell, _cells)',\n        '_flexGrowChanged(flexGrow, _headerCell, _footerCell, _cells)',\n        '_textAlignChanged(textAlign, _cells, _headerCell, _footerCell)',\n        '_orderChanged(_order, _headerCell, _footerCell, _cells)',\n        '_lastFrozenChanged(_lastFrozen)',\n        '_firstFrozenToEndChanged(_firstFrozenToEnd)',\n        '_onRendererOrBindingChanged(_renderer, _cells, _bodyContentHidden, path)',\n        '_onHeaderRendererOrBindingChanged(_headerRenderer, _headerCell, path, header)',\n        '_onFooterRendererOrBindingChanged(_footerRenderer, _footerCell)',\n        '_resizableChanged(resizable, _headerCell)',\n        '_reorderStatusChanged(_reorderStatus, _headerCell, _footerCell, _cells)',\n        '_hiddenChanged(hidden, _headerCell, _footerCell, _cells)',\n        '_rowHeaderChanged(rowHeader, _cells)',\n        '__headerFooterPartNameChanged(_headerCell, _footerCell, headerPartName, footerPartName)',\n      ];\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    get _grid() {\n      if (!this._gridValue) {\n        this._gridValue = this._findHostGrid();\n      }\n      return this._gridValue;\n    }\n\n    /**\n     * @return {!Array<!HTMLElement>}\n     * @protected\n     */\n    get _allCells() {\n      return []\n        .concat(this._cells || [])\n        .concat(this._emptyCells || [])\n        .concat(this._headerCell)\n        .concat(this._footerCell)\n        .filter((cell) => cell);\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      // Adds the column cells to the grid after the column is attached\n      requestAnimationFrame(() => {\n        // Skip if the column has been detached\n        if (!this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (!cell._content.parentNode) {\n            this._grid.appendChild(cell._content);\n          }\n        });\n      });\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // Removes the column cells from the grid after the column is detached\n      requestAnimationFrame(() => {\n        // Skip if the column has been attached again\n        if (this._grid) {\n          return;\n        }\n\n        this._allCells.forEach((cell) => {\n          if (cell._content.parentNode) {\n            cell._content.parentNode.removeChild(cell._content);\n          }\n        });\n      });\n\n      this._gridValue = undefined;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      processTemplates(this);\n    }\n\n    /**\n     * @return {!Grid | undefined}\n     * @protected\n     */\n    _findHostGrid() {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias, consistent-this\n      let el = this;\n      // Custom elements extending grid must have a specific localName\n      while (el && !/^vaadin.*grid(-pro)?$/u.test(el.localName)) {\n        el = el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode;\n      }\n      return el || undefined;\n    }\n\n    /** @protected */\n    _renderHeaderAndFooter() {\n      this._renderHeaderCellContent(this._headerRenderer, this._headerCell);\n      this._renderFooterCellContent(this._footerRenderer, this._footerCell);\n    }\n\n    /** @private */\n    _flexGrowChanged(flexGrow) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('flexGrow');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.flexGrow = flexGrow;\n      });\n    }\n\n    /** @private */\n    _orderChanged(order) {\n      this._allCells.forEach((cell) => {\n        cell.style.order = order;\n      });\n    }\n\n    /** @private */\n    _widthChanged(width) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('width');\n      }\n\n      this._allCells.forEach((cell) => {\n        cell.style.width = width;\n      });\n    }\n\n    /** @private */\n    _frozenChanged(frozen) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozen', frozen);\n      }\n\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'frozen', frozen);\n      });\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _frozenToEndChanged(frozenToEnd) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('frozenToEnd', frozenToEnd);\n      }\n\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n\n        updateCellState(cell, 'frozen-to-end', frozenToEnd);\n      });\n\n      if (this._grid && this._grid._frozenCellsChanged) {\n        this._grid._frozenCellsChanged();\n      }\n    }\n\n    /** @private */\n    _lastFrozenChanged(lastFrozen) {\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'last-frozen', lastFrozen);\n      });\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._lastFrozen = lastFrozen;\n      }\n    }\n\n    /** @private */\n    _firstFrozenToEndChanged(firstFrozenToEnd) {\n      this._allCells.forEach((cell) => {\n        // Skip sizer cells to keep correct scrollWidth.\n        if (this._grid && cell.parentElement === this._grid.$.sizer) {\n          return;\n        }\n\n        updateCellState(cell, 'first-frozen-to-end', firstFrozenToEnd);\n      });\n\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._firstFrozenToEnd = firstFrozenToEnd;\n      }\n    }\n\n    /** @private */\n    _rowHeaderChanged(rowHeader, cells) {\n      if (!cells) {\n        return;\n      }\n\n      cells.forEach((cell) => {\n        cell.setAttribute('role', rowHeader ? 'rowheader' : 'gridcell');\n      });\n    }\n\n    /**\n     * @param {string} path\n     * @return {string}\n     * @protected\n     */\n    _generateHeader(path) {\n      return path\n        .substr(path.lastIndexOf('.') + 1)\n        .replace(/([A-Z])/gu, '-$1')\n        .toLowerCase()\n        .replace(/-/gu, ' ')\n        .replace(/^./u, (match) => match.toUpperCase());\n    }\n\n    /** @private */\n    _reorderStatusChanged(reorderStatus) {\n      const prevStatus = this.__previousReorderStatus;\n      const oldPart = prevStatus ? `reorder-${prevStatus}-cell` : '';\n      const newPart = `reorder-${reorderStatus}-cell`;\n\n      this._allCells.forEach((cell) => {\n        updateCellState(cell, 'reorder-status', reorderStatus, newPart, oldPart);\n      });\n\n      this.__previousReorderStatus = reorderStatus;\n    }\n\n    /** @private */\n    _resizableChanged(resizable, headerCell) {\n      if (resizable === undefined || headerCell === undefined) {\n        return;\n      }\n\n      if (headerCell) {\n        [headerCell].concat(this._emptyCells).forEach((cell) => {\n          if (cell) {\n            const existingHandle = cell.querySelector('[part~=\"resize-handle\"]');\n            if (existingHandle) {\n              cell.removeChild(existingHandle);\n            }\n\n            if (resizable) {\n              const handle = document.createElement('div');\n              handle.setAttribute('part', 'resize-handle');\n              cell.appendChild(handle);\n            }\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _textAlignChanged(textAlign) {\n      if (textAlign === undefined || this._grid === undefined) {\n        return;\n      }\n      if (['start', 'end', 'center'].indexOf(textAlign) === -1) {\n        console.warn('textAlign can only be set as \"start\", \"end\" or \"center\"');\n        return;\n      }\n\n      let textAlignFallback;\n      if (getComputedStyle(this._grid).direction === 'ltr') {\n        if (textAlign === 'start') {\n          textAlignFallback = 'left';\n        } else if (textAlign === 'end') {\n          textAlignFallback = 'right';\n        }\n      } else if (textAlign === 'start') {\n        textAlignFallback = 'right';\n      } else if (textAlign === 'end') {\n        textAlignFallback = 'left';\n      }\n\n      this._allCells.forEach((cell) => {\n        cell._content.style.textAlign = textAlign;\n        if (getComputedStyle(cell._content).textAlign !== textAlign) {\n          cell._content.style.textAlign = textAlignFallback;\n        }\n      });\n    }\n\n    /** @private */\n    _hiddenChanged(hidden) {\n      if (this.parentElement && this.parentElement._columnPropChanged) {\n        this.parentElement._columnPropChanged('hidden', hidden);\n      }\n\n      if (!!hidden !== !!this._previousHidden && this._grid) {\n        if (hidden === true) {\n          this._allCells.forEach((cell) => {\n            if (cell._content.parentNode) {\n              cell._content.parentNode.removeChild(cell._content);\n            }\n          });\n        }\n        this._grid._debouncerHiddenChanged = Debouncer.debounce(\n          this._grid._debouncerHiddenChanged,\n          animationFrame,\n          () => {\n            if (this._grid && this._grid._renderColumnTree) {\n              this._grid._renderColumnTree(this._grid._columnTree);\n            }\n          },\n        );\n\n        if (this._grid._debounceUpdateFrozenColumn) {\n          this._grid._debounceUpdateFrozenColumn();\n        }\n\n        if (this._grid._resetKeyboardNavigation) {\n          this._grid._resetKeyboardNavigation();\n        }\n      }\n      this._previousHidden = hidden;\n    }\n\n    /** @protected */\n    _runRenderer(renderer, cell, model) {\n      const isVisibleBodyCell = model && model.item && !cell.parentElement.hidden;\n      const shouldRender = isVisibleBodyCell || renderer === this._headerRenderer || renderer === this._footerRenderer;\n      if (!shouldRender) {\n        return;\n      }\n\n      const args = [cell._content, this];\n      if (isVisibleBodyCell) {\n        args.push(model);\n      }\n\n      renderer.apply(this, args);\n    }\n\n    /**\n     * Renders the content to the given cells using a renderer.\n     *\n     * @private\n     */\n    __renderCellsContent(renderer, cells) {\n      // Skip if the column is hidden or not attached to a grid.\n      if (this.hidden || !this._grid) {\n        return;\n      }\n\n      cells.forEach((cell) => {\n        if (!cell.parentElement) {\n          return;\n        }\n\n        const model = this._grid.__getRowModel(cell.parentElement);\n\n        if (!renderer) {\n          return;\n        }\n\n        if (cell._renderer !== renderer) {\n          this._clearCellContent(cell);\n        }\n\n        cell._renderer = renderer;\n\n        this._runRenderer(renderer, cell, model);\n      });\n    }\n\n    /**\n     * Clears the content of a cell.\n     *\n     * @protected\n     */\n    _clearCellContent(cell) {\n      cell._content.innerHTML = '';\n      // Whenever a Lit-based renderer is used, it assigns a Lit part to the node it was rendered into.\n      // When clearing the rendered content, this part needs to be manually disposed of.\n      // Otherwise, using a Lit-based renderer on the same node will throw an exception or render nothing afterward.\n      delete cell._content._$litPart$;\n    }\n\n    /**\n     * Renders the header cell content using a renderer,\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderHeaderCellContent(headerRenderer, headerCell) {\n      if (!headerCell || !headerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(headerRenderer, [headerCell]);\n      if (this._grid && headerCell.parentElement) {\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(headerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onHeaderRendererOrBindingChanged(headerRenderer, headerCell, ..._bindings) {\n      this._renderHeaderCellContent(headerRenderer, headerCell);\n    }\n\n    /** @private */\n    __headerFooterPartNameChanged(headerCell, footerCell, headerPartName, footerPartName) {\n      [\n        { cell: headerCell, partName: headerPartName },\n        { cell: footerCell, partName: footerPartName },\n      ].forEach(({ cell, partName }) => {\n        if (cell) {\n          const customParts = cell.__customParts || [];\n          cell.part.remove(...customParts);\n\n          cell.__customParts = partName ? partName.trim().split(' ') : [];\n          cell.part.add(...cell.__customParts);\n        }\n      });\n    }\n\n    /**\n     * Renders the content of body cells using a renderer.\n     *\n     * @protected\n     */\n    _renderBodyCellsContent(renderer, cells) {\n      if (!cells || !renderer) {\n        return;\n      }\n\n      this.__renderCellsContent(renderer, cells);\n    }\n\n    /** @protected */\n    _onRendererOrBindingChanged(renderer, cells, ..._bindings) {\n      this._renderBodyCellsContent(renderer, cells);\n    }\n\n    /**\n     * Renders the footer cell content using a renderer\n     * and then updates the visibility of the parent row depending on\n     * whether all its children cells are empty or not.\n     *\n     * @protected\n     */\n    _renderFooterCellContent(footerRenderer, footerCell) {\n      if (!footerCell || !footerRenderer) {\n        return;\n      }\n\n      this.__renderCellsContent(footerRenderer, [footerCell]);\n      if (this._grid && footerCell.parentElement) {\n        this._grid.__debounceUpdateHeaderFooterRowVisibility(footerCell.parentElement);\n      }\n    }\n\n    /** @protected */\n    _onFooterRendererOrBindingChanged(footerRenderer, footerCell) {\n      this._renderFooterCellContent(footerRenderer, footerCell);\n    }\n\n    /** @private */\n    __setTextContent(node, textContent) {\n      if (node.textContent !== textContent) {\n        node.textContent = textContent;\n      }\n    }\n\n    /**\n     * Renders the text header to the header cell.\n     *\n     * @private\n     */\n    __textHeaderRenderer() {\n      this.__setTextContent(this._headerCell._content, this.header);\n    }\n\n    /**\n     * Computes the property name based on the path and renders it to the header cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultHeaderRenderer() {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(this._headerCell._content, this._generateHeader(this.path));\n    }\n\n    /**\n     * Computes the item property value based on the path and renders it to the body cell.\n     * If the path is not defined, then nothing is rendered.\n     *\n     * @protected\n     */\n    _defaultRenderer(root, _owner, { item }) {\n      if (!this.path) {\n        return;\n      }\n\n      this.__setTextContent(root, get(this.path, item));\n    }\n\n    /**\n     * By default, nothing is rendered to the footer cell.\n     *\n     * @protected\n     */\n    _defaultFooterRenderer() {}\n\n    /**\n     * Computes the final header renderer for the `_headerRenderer` computed property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeHeaderRenderer(headerRenderer, header) {\n      if (headerRenderer) {\n        return headerRenderer;\n      }\n\n      if (header !== undefined && header !== null) {\n        return this.__textHeaderRenderer;\n      }\n\n      return this._defaultHeaderRenderer;\n    }\n\n    /**\n     * Computes the final renderer for the `_renderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridBodyRenderer | undefined}\n     */\n    _computeRenderer(renderer) {\n      if (renderer) {\n        return renderer;\n      }\n\n      return this._defaultRenderer;\n    }\n\n    /**\n     * Computes the final footer renderer for the `_footerRenderer` property.\n     * All the arguments are observable by the Polymer, it re-calls the method\n     * once an argument is changed to update the property value.\n     *\n     * @protected\n     * @return {GridHeaderFooterRenderer | undefined}\n     */\n    _computeFooterRenderer(footerRenderer) {\n      if (footerRenderer) {\n        return footerRenderer;\n      }\n\n      return this._defaultFooterRenderer;\n    }\n  };\n\n/**\n * @polymerMixin\n * @mixes ColumnBaseMixin\n * @mixes DirMixin\n */\nexport const GridColumnMixin = (superClass) =>\n  class extends ColumnBaseMixin(DirMixin(superClass)) {\n    static get properties() {\n      return {\n        /**\n         * Width of the cells for this column.\n         */\n        width: {\n          type: String,\n          value: '100px',\n          sync: true,\n        },\n\n        /**\n         * Flex grow ratio for the cell widths. When set to 0, cell width is fixed.\n         * @attr {number} flex-grow\n         * @type {number}\n         */\n        flexGrow: {\n          type: Number,\n          value: 1,\n          sync: true,\n        },\n\n        /**\n         * Custom function for rendering the cell content.\n         * Receives three arguments:\n         *\n         * - `root` The cell content DOM element. Append your content to it.\n         * - `column` The `<vaadin-grid-column>` element.\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *   - `model.detailsOpened` Details opened state.\n         *\n         * @type {GridBodyRenderer | null | undefined}\n         */\n        renderer: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * Represents the final renderer computed on the set of observable arguments.\n         * It is supposed to be used internally when rendering the content of a body cell.\n         *\n         * @protected\n         * @type {GridBodyRenderer | undefined}\n         */\n        _renderer: {\n          type: Function,\n          computed: '_computeRenderer(renderer, __initialized)',\n          sync: true,\n        },\n\n        /**\n         * Path to an item sub-property whose value gets displayed in the column body cells.\n         * The property name is also shown in the column header if an explicit header or renderer isn't defined.\n         */\n        path: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * Automatically sets the width of the column based on the column contents when this is set to `true`.\n         *\n         * For performance reasons the column width is calculated automatically only once when the grid items\n         * are rendered for the first time and the calculation only considers the rows which are currently\n         * rendered in DOM (a bit more than what is currently visible). If the grid is scrolled, or the cell\n         * content changes, the column width might not match the contents anymore.\n         *\n         * Hidden columns are ignored in the calculation and their widths are not automatically updated when\n         * you show a column that was initially hidden.\n         *\n         * You can manually trigger the auto sizing behavior again by calling `grid.recalculateColumnWidths()`.\n         *\n         * The column width may still grow larger when `flexGrow` is not 0.\n         * @attr {boolean} auto-width\n         * @type {boolean}\n         */\n        autoWidth: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When true, wraps the cell's slot into an element with role=\"button\", and sets\n         * the tabindex attribute on the button element, instead of the cell itself.\n         * This is needed to keep focus in sync with VoiceOver cursor when navigating\n         * with Control + Option + arrow keys: focusing the `<td>` element does not fire\n         * a focus event, but focusing an element with role=\"button\" inside a cell fires it.\n         * @protected\n         */\n        _focusButtonMode: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {Array<!HTMLElement>}\n         * @protected\n         */\n        _cells: {\n          type: Array,\n          sync: true,\n        },\n      };\n    }\n  };\n"],
  "mappings": "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",
  "names": []
}
