{
  "version": 3,
  "sources": ["../../@vaadin/grid/src/vaadin-grid-a11y-mixin.js", "../../@vaadin/grid/src/array-data-provider.js", "../../@vaadin/grid/src/vaadin-grid-array-data-provider-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-reordering-mixin.js", "../../@vaadin/grid/src/vaadin-grid-column-resizing-mixin.js", "../../@vaadin/component-base/src/data-provider-controller/helpers.js", "../../@vaadin/component-base/src/data-provider-controller/cache.js", "../../@vaadin/component-base/src/data-provider-controller/data-provider-controller.js", "../../@vaadin/grid/src/vaadin-grid-data-provider-mixin.js", "../../@vaadin/grid/src/vaadin-grid-drag-and-drop-mixin.js", "../../@vaadin/grid/src/vaadin-grid-dynamic-columns-mixin.js", "../../@vaadin/grid/src/vaadin-grid-event-context-mixin.js", "../../@vaadin/grid/src/vaadin-grid-filter-mixin.js", "../../@vaadin/grid/src/vaadin-grid-keyboard-navigation-mixin.js", "../../@vaadin/grid/src/vaadin-grid-row-details-mixin.js", "../../@vaadin/grid/src/vaadin-grid-scroll-mixin.js", "../../@vaadin/grid/src/vaadin-grid-selection-mixin.js", "../../@vaadin/grid/src/vaadin-grid-sort-mixin.js", "../../@vaadin/grid/src/vaadin-grid-styling-mixin.js", "../../@vaadin/grid/src/vaadin-grid-mixin.js", "../../@vaadin/grid/src/vaadin-grid-styles.js", "../../@vaadin/grid/src/vaadin-grid.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren, iterateRowCells } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const A11yMixin = (superClass) =>\n  class A11yMixin extends superClass {\n    static get observers() {\n      return ['_a11yUpdateGridSize(size, _columnTree)'];\n    }\n\n    /** @private */\n    _a11yGetHeaderRowCount(_columnTree) {\n      return _columnTree.filter((level) => level.some((col) => col.headerRenderer || col.path || col.header)).length;\n    }\n\n    /** @private */\n    _a11yGetFooterRowCount(_columnTree) {\n      return _columnTree.filter((level) => level.some((col) => col.headerRenderer)).length;\n    }\n\n    /** @private */\n    _a11yUpdateGridSize(size, _columnTree) {\n      if (size === undefined || _columnTree === undefined) {\n        return;\n      }\n\n      const bodyColumns = _columnTree[_columnTree.length - 1];\n      this.$.table.setAttribute(\n        'aria-rowcount',\n        size + this._a11yGetHeaderRowCount(_columnTree) + this._a11yGetFooterRowCount(_columnTree),\n      );\n      this.$.table.setAttribute('aria-colcount', (bodyColumns && bodyColumns.length) || 0);\n\n      this._a11yUpdateHeaderRows();\n      this._a11yUpdateFooterRows();\n    }\n\n    /** @protected */\n    _a11yUpdateHeaderRows() {\n      iterateChildren(this.$.header, (headerRow, index) => {\n        headerRow.setAttribute('aria-rowindex', index + 1);\n      });\n    }\n\n    /** @protected */\n    _a11yUpdateFooterRows() {\n      iterateChildren(this.$.footer, (footerRow, index) => {\n        footerRow.setAttribute('aria-rowindex', this._a11yGetHeaderRowCount(this._columnTree) + this.size + index + 1);\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} index\n     * @protected\n     */\n    _a11yUpdateRowRowindex(row, index) {\n      row.setAttribute('aria-rowindex', index + this._a11yGetHeaderRowCount(this._columnTree) + 1);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {boolean} selected\n     * @protected\n     */\n    _a11yUpdateRowSelected(row, selected) {\n      // Jaws reads selection only for rows, NVDA only for cells\n      row.setAttribute('aria-selected', Boolean(selected));\n      iterateRowCells(row, (cell) => {\n        cell.setAttribute('aria-selected', Boolean(selected));\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @protected\n     */\n    _a11yUpdateRowExpanded(row) {\n      if (this.__isRowExpandable(row)) {\n        row.setAttribute('aria-expanded', 'false');\n      } else if (this.__isRowCollapsible(row)) {\n        row.setAttribute('aria-expanded', 'true');\n      } else {\n        row.removeAttribute('aria-expanded');\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} level\n     * @protected\n     */\n    _a11yUpdateRowLevel(row, level) {\n      // Set level for the expandable rows itself, and all the nested rows.\n      if (level > 0 || this.__isRowCollapsible(row) || this.__isRowExpandable(row)) {\n        row.setAttribute('aria-level', level + 1);\n      } else {\n        row.removeAttribute('aria-level');\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!HTMLElement} detailsCell\n     * @protected\n     */\n    _a11ySetRowDetailsCell(row, detailsCell) {\n      iterateRowCells(row, (cell) => {\n        if (cell !== detailsCell) {\n          cell.setAttribute('aria-controls', detailsCell.id);\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {number} colspan\n     * @protected\n     */\n    _a11yUpdateCellColspan(cell, colspan) {\n      cell.setAttribute('aria-colspan', Number(colspan));\n    }\n\n    /** @protected */\n    _a11yUpdateSorters() {\n      Array.from(this.querySelectorAll('vaadin-grid-sorter')).forEach((sorter) => {\n        let cellContent = sorter.parentNode;\n        while (cellContent && cellContent.localName !== 'vaadin-grid-cell-content') {\n          cellContent = cellContent.parentNode;\n        }\n        if (cellContent && cellContent.assignedSlot) {\n          const cell = cellContent.assignedSlot.parentNode;\n          cell.setAttribute(\n            'aria-sort',\n            {\n              asc: 'ascending',\n              desc: 'descending',\n            }[String(sorter.direction)] || 'none',\n          );\n        }\n      });\n    }\n  };\n", "/**\n * Returns a sub-property of an object\n *\n * @param {string} path dot-separated path to the sub property\n * @param {*} object\n * @returns {*}\n */\nfunction get(path, object) {\n  return path.split('.').reduce((obj, property) => obj[property], object);\n}\n\n/**\n * Check array of filters/sorters for paths validity, console.warn invalid items\n * @param {!Array<!GridFilterDefinition | !GridSorterDefinition>} arrayToCheck The array of filters/sorters to check\n * @param {string} action The name of action to include in warning (filtering, sorting)\n * @param {!Array<!GridItem>} items\n */\nfunction checkPaths(arrayToCheck, action, items) {\n  if (items.length === 0) {\n    return false;\n  }\n\n  let result = true;\n\n  arrayToCheck.forEach(({ path }) => {\n    // Skip simple paths\n    if (!path || path.indexOf('.') === -1) {\n      return;\n    }\n\n    const parentProperty = path.replace(/\\.[^.]*$/u, ''); // A.b.c -> a.b\n    if (get(parentProperty, items[0]) === undefined) {\n      console.warn(`Path \"${path}\" used for ${action} does not exist in all of the items, ${action} is disabled.`);\n      result = false;\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param {unknown} value\n * @return {string}\n */\nfunction normalizeEmptyValue(value) {\n  if ([undefined, null].indexOf(value) >= 0) {\n    return '';\n  } else if (isNaN(value)) {\n    return value.toString();\n  }\n  return value;\n}\n\n/**\n * @param {unknown} a\n * @param {unknown} b\n * @return {number}\n */\nfunction compare(a, b) {\n  a = normalizeEmptyValue(a);\n  b = normalizeEmptyValue(b);\n\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\n/**\n * Sorts the given array of items based on the sorting rules and returns the result.\n *\n * @param {Array<any>} items\n * @param {Array<GridSorterDefinition>} items\n * @return {Array<any>}\n */\nfunction multiSort(items, sortOrders) {\n  return items.sort((a, b) => {\n    return sortOrders\n      .map((sortOrder) => {\n        if (sortOrder.direction === 'asc') {\n          return compare(get(sortOrder.path, a), get(sortOrder.path, b));\n        } else if (sortOrder.direction === 'desc') {\n          return compare(get(sortOrder.path, b), get(sortOrder.path, a));\n        }\n        return 0;\n      })\n      .reduce((p, n) => {\n        return p !== 0 ? p : n;\n      }, 0);\n  });\n}\n\n/**\n * @param {!Array<!GridItem>} items\n * @return {!Array<!GridItem>}\n */\nfunction filter(items, filters) {\n  return items.filter((item) => {\n    return filters.every((filter) => {\n      const value = normalizeEmptyValue(get(filter.path, item));\n      const filterValueLowercase = normalizeEmptyValue(filter.value).toString().toLowerCase();\n      return value.toString().toLowerCase().includes(filterValueLowercase);\n    });\n  });\n}\n\n/**\n * WARNING: This API is still intended for internal purposes only and\n * may change any time.\n *\n * Creates a new grid compatible data provider that serves the items\n * from the given array as data when requested by the grid.\n *\n * @param {Array<any>} items\n * @return {GridDataProvider<any>}\n */\nexport const createArrayDataProvider = (allItems) => {\n  return (params, callback) => {\n    let items = allItems ? [...allItems] : [];\n\n    if (params.filters && checkPaths(params.filters, 'filtering', items)) {\n      items = filter(items, params.filters);\n    }\n\n    if (\n      Array.isArray(params.sortOrders) &&\n      params.sortOrders.length &&\n      checkPaths(params.sortOrders, 'sorting', items)\n    ) {\n      items = multiSort(items, params.sortOrders);\n    }\n\n    const count = Math.min(items.length, params.pageSize);\n    const start = params.page * count;\n    const end = start + count;\n    const slice = items.slice(start, end);\n    callback(slice, items.length);\n  };\n};\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { createArrayDataProvider } from './array-data-provider.js';\n\n/**\n * @polymerMixin\n */\nexport const ArrayDataProviderMixin = (superClass) =>\n  class ArrayDataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array containing the items which will be passed to renderer functions.\n         *\n         * @type {Array<!GridItem> | undefined}\n         */\n        items: {\n          type: Array,\n          sync: true,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['__dataProviderOrItemsChanged(dataProvider, items, isAttached, _filters, _sorters, items.*)'];\n    }\n\n    /** @private */\n    __setArrayDataProvider(items) {\n      const arrayDataProvider = createArrayDataProvider(this.items, {});\n      arrayDataProvider.__items = items;\n      this._arrayDataProvider = arrayDataProvider;\n      this.size = items.length;\n      this.dataProvider = arrayDataProvider;\n    }\n\n    /** @private */\n    __dataProviderOrItemsChanged(dataProvider, items, isAttached) {\n      if (!isAttached) {\n        return;\n      }\n\n      if (this._arrayDataProvider) {\n        // Has an items array data provider beforehand\n\n        if (dataProvider !== this._arrayDataProvider) {\n          // A custom data provider was set externally\n          this._arrayDataProvider = undefined;\n          this.items = undefined;\n        } else if (!items) {\n          // The items array was unset\n          this._arrayDataProvider = undefined;\n          this.dataProvider = undefined;\n          this.size = 0;\n          this.clearCache();\n        } else if (this._arrayDataProvider.__items === items) {\n          // The items array was modified\n          this.clearCache();\n          this.size = this._flatSize;\n        } else {\n          // The items array was replaced\n          this.__setArrayDataProvider(items);\n        }\n      } else if (items) {\n        // There was no array data provider before items was set\n        this.__setArrayDataProvider(items);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\nimport { iterateChildren, updateColumnOrders } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnReorderingMixin = (superClass) =>\n  class ColumnReorderingMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Set to true to allow column reordering.\n         * @attr {boolean} column-reordering-allowed\n         * @type {boolean}\n         */\n        columnReorderingAllowed: {\n          type: Boolean,\n          value: false,\n        },\n\n        /** @private */\n        _orderBaseScope: {\n          type: Number,\n          value: 10000000,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_updateOrders(_columnTree)'];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      addListener(this, 'track', this._onTrackEvent);\n      this._reorderGhost = this.shadowRoot.querySelector('[part=\"reorder-ghost\"]');\n\n      this.addEventListener('touchstart', this._onTouchStart.bind(this));\n      this.addEventListener('touchmove', this._onTouchMove.bind(this));\n      this.addEventListener('touchend', this._onTouchEnd.bind(this));\n      this.addEventListener('contextmenu', this._onContextMenu.bind(this));\n    }\n\n    /** @private */\n    _onContextMenu(e) {\n      if (this.hasAttribute('reordering')) {\n        e.preventDefault();\n\n        // A contextmenu event is fired on mobile Chrome on long-press\n        // (which should start reordering). Don't end the reorder on touch devices.\n        if (!isTouch) {\n          // Context menu cancels the track gesture on desktop without firing an end event.\n          // End the reorder manually.\n          this._onTrackEnd();\n        }\n      }\n    }\n\n    /** @private */\n    _onTouchStart(e) {\n      // Touch event, delay activation by 100ms\n      this._startTouchReorderTimeout = setTimeout(() => {\n        this._onTrackStart({\n          detail: {\n            x: e.touches[0].clientX,\n            y: e.touches[0].clientY,\n          },\n        });\n      }, 100);\n    }\n\n    /** @private */\n    _onTouchMove(e) {\n      if (this._draggedColumn) {\n        e.preventDefault();\n      }\n      clearTimeout(this._startTouchReorderTimeout);\n    }\n\n    /** @private */\n    _onTouchEnd() {\n      clearTimeout(this._startTouchReorderTimeout);\n      this._onTrackEnd();\n    }\n\n    /** @private */\n    _onTrackEvent(e) {\n      if (e.detail.state === 'start') {\n        const path = e.composedPath();\n        const headerCell = path[path.indexOf(this.$.header) - 2];\n        if (!headerCell || !headerCell._content) {\n          // Not a header column\n          return;\n        }\n\n        if (headerCell._content.contains(this.getRootNode().activeElement)) {\n          // Something was focused inside the cell\n          return;\n        }\n\n        if (this.$.scroller.hasAttribute('column-resizing')) {\n          // Resizing is in progress\n          return;\n        }\n\n        if (!this._touchDevice) {\n          // Not a touch device\n          this._onTrackStart(e);\n        }\n      } else if (e.detail.state === 'track') {\n        this._onTrack(e);\n      } else if (e.detail.state === 'end') {\n        this._onTrackEnd(e);\n      }\n    }\n\n    /** @private */\n    _onTrackStart(e) {\n      if (!this.columnReorderingAllowed) {\n        return;\n      }\n\n      // Cancel reordering if there are draggable nodes on the event path\n      const path = e.composedPath && e.composedPath();\n      if (path && path.some((node) => node.hasAttribute && node.hasAttribute('draggable'))) {\n        return;\n      }\n\n      const headerCell = this._cellFromPoint(e.detail.x, e.detail.y);\n      if (!headerCell || !headerCell.getAttribute('part').includes('header-cell')) {\n        return;\n      }\n\n      this.toggleAttribute('reordering', true);\n      this._draggedColumn = headerCell._column;\n      while (this._draggedColumn.parentElement.childElementCount === 1) {\n        // This is the only column in the group, drag the whole group instead\n        this._draggedColumn = this._draggedColumn.parentElement;\n      }\n      this._setSiblingsReorderStatus(this._draggedColumn, 'allowed');\n      this._draggedColumn._reorderStatus = 'dragging';\n\n      this._updateGhost(headerCell);\n      this._reorderGhost.style.visibility = 'visible';\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\n      this._autoScroller();\n    }\n\n    /** @private */\n    _onTrack(e) {\n      if (!this._draggedColumn) {\n        // Reordering didn't start. Skip this event.\n        return;\n      }\n\n      const targetCell = this._cellFromPoint(e.detail.x, e.detail.y);\n      if (!targetCell) {\n        return;\n      }\n\n      const targetColumn = this._getTargetColumn(targetCell, this._draggedColumn);\n      if (\n        this._isSwapAllowed(this._draggedColumn, targetColumn) &&\n        this._isSwappableByPosition(targetColumn, e.detail.x)\n      ) {\n        // Get the header level of the target column (and the dragged column)\n        const columnTreeLevel = this._columnTree.findIndex((level) => level.includes(targetColumn));\n        // Get the columns on that level in visual order\n        const levelColumnsInOrder = this._getColumnsInOrder(columnTreeLevel);\n\n        // Index of the column being dragged\n        const startIndex = levelColumnsInOrder.indexOf(this._draggedColumn);\n        // Index of the column being dragged over\n        const endIndex = levelColumnsInOrder.indexOf(targetColumn);\n\n        // Direction of iteration\n        const direction = startIndex < endIndex ? 1 : -1;\n\n        // Iteratively swap all the columns from the dragged column to the target column\n        for (let i = startIndex; i !== endIndex; i += direction) {\n          this._swapColumnOrders(this._draggedColumn, levelColumnsInOrder[i + direction]);\n        }\n      }\n\n      this._updateGhostPosition(e.detail.x, this._touchDevice ? e.detail.y - 50 : e.detail.y);\n      this._lastDragClientX = e.detail.x;\n    }\n\n    /** @private */\n    _onTrackEnd() {\n      if (!this._draggedColumn) {\n        // Reordering didn't start. Skip this event.\n        return;\n      }\n\n      this.toggleAttribute('reordering', false);\n      this._draggedColumn._reorderStatus = '';\n      this._setSiblingsReorderStatus(this._draggedColumn, '');\n      this._draggedColumn = null;\n      this._lastDragClientX = null;\n      this._reorderGhost.style.visibility = 'hidden';\n\n      this.dispatchEvent(\n        new CustomEvent('column-reorder', {\n          detail: {\n            columns: this._getColumnsInOrder(),\n          },\n        }),\n      );\n    }\n\n    /**\n     * Returns the columns (or column groups) on the specified header level in visual order.\n     * By default, the bottom level is used.\n     *\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getColumnsInOrder(headerLevel = this._columnTree.length - 1) {\n      return this._columnTree[headerLevel].filter((c) => !c.hidden).sort((b, a) => b._order - a._order);\n    }\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @return {HTMLElement | undefined}\n     * @protected\n     */\n    _cellFromPoint(x = 0, y = 0) {\n      if (!this._draggedColumn) {\n        this.$.scroller.toggleAttribute('no-content-pointer-events', true);\n      }\n      const cell = this.shadowRoot.elementFromPoint(x, y);\n      this.$.scroller.toggleAttribute('no-content-pointer-events', false);\n\n      // Make sure the element is actually a cell\n      if (cell && cell._column) {\n        return cell;\n      }\n    }\n\n    /**\n     * @param {number} eventClientX\n     * @param {number} eventClientY\n     * @protected\n     */\n    _updateGhostPosition(eventClientX, eventClientY) {\n      const ghostRect = this._reorderGhost.getBoundingClientRect();\n      // // This is where we want to position the ghost\n      const targetLeft = eventClientX - ghostRect.width / 2;\n      const targetTop = eventClientY - ghostRect.height / 2;\n      // Current position\n      const _left = parseInt(this._reorderGhost._left || 0);\n      const _top = parseInt(this._reorderGhost._top || 0);\n      // Reposition the ghost\n      this._reorderGhost._left = _left - (ghostRect.left - targetLeft);\n      this._reorderGhost._top = _top - (ghostRect.top - targetTop);\n      this._reorderGhost.style.transform = `translate(${this._reorderGhost._left}px, ${this._reorderGhost._top}px)`;\n    }\n\n    /**\n     * @param {!HTMLElement} cell\n     * @return {!HTMLElement}\n     * @protected\n     */\n    _updateGhost(cell) {\n      const ghost = this._reorderGhost;\n      ghost.textContent = cell._content.innerText;\n      const style = window.getComputedStyle(cell);\n      [\n        'boxSizing',\n        'display',\n        'width',\n        'height',\n        'background',\n        'alignItems',\n        'padding',\n        'border',\n        'flex-direction',\n        'overflow',\n      ].forEach((propertyName) => {\n        ghost.style[propertyName] = style[propertyName];\n      });\n      return ghost;\n    }\n\n    /** @private */\n    _updateOrders(columnTree) {\n      if (columnTree === undefined) {\n        return;\n      }\n\n      // Reset all column orders\n      columnTree[0].forEach((column) => {\n        column._order = 0;\n      });\n      // Set order numbers to top-level columns\n      updateColumnOrders(columnTree[0], this._orderBaseScope, 0);\n    }\n\n    /**\n     * @param {!GridColumn} column\n     * @param {string} status\n     * @protected\n     */\n    _setSiblingsReorderStatus(column, status) {\n      iterateChildren(column.parentNode, (sibling) => {\n        if (/column/u.test(sibling.localName) && this._isSwapAllowed(sibling, column)) {\n          sibling._reorderStatus = status;\n        }\n      });\n    }\n\n    /** @protected */\n    _autoScroller() {\n      if (this._lastDragClientX) {\n        const rightDiff = this._lastDragClientX - this.getBoundingClientRect().right + 50;\n        const leftDiff = this.getBoundingClientRect().left - this._lastDragClientX + 50;\n\n        if (rightDiff > 0) {\n          this.$.table.scrollLeft += rightDiff / 10;\n        } else if (leftDiff > 0) {\n          this.$.table.scrollLeft -= leftDiff / 10;\n        }\n      }\n\n      if (this._draggedColumn) {\n        setTimeout(() => this._autoScroller(), 10);\n      }\n    }\n\n    /**\n     * @param {GridColumn | undefined} column1\n     * @param {GridColumn | undefined} column2\n     * @return {boolean | undefined}\n     * @protected\n     */\n    _isSwapAllowed(column1, column2) {\n      if (column1 && column2) {\n        const differentColumns = column1 !== column2;\n        const sameParent = column1.parentElement === column2.parentElement;\n        const sameFrozen =\n          (column1.frozen && column2.frozen) || // Both columns are frozen\n          (column1.frozenToEnd && column2.frozenToEnd) || // Both columns are frozen to end\n          (!column1.frozen && !column1.frozenToEnd && !column2.frozen && !column2.frozenToEnd);\n        return differentColumns && sameParent && sameFrozen;\n      }\n    }\n\n    /**\n     * @param {!GridColumn} targetColumn\n     * @param {number} clientX\n     * @return {boolean}\n     * @protected\n     */\n    _isSwappableByPosition(targetColumn, clientX) {\n      const targetCell = Array.from(this.$.header.querySelectorAll('tr:not([hidden]) [part~=\"cell\"]')).find((cell) =>\n        targetColumn.contains(cell._column),\n      );\n      const sourceCellRect = this.$.header\n        .querySelector('tr:not([hidden]) [reorder-status=dragging]')\n        .getBoundingClientRect();\n      const targetRect = targetCell.getBoundingClientRect();\n      if (targetRect.left > sourceCellRect.left) {\n        return clientX > targetRect.right - sourceCellRect.width;\n      }\n      return clientX < targetRect.left + sourceCellRect.width;\n    }\n\n    /**\n     * @param {!GridColumn} column1\n     * @param {!GridColumn} column2\n     * @protected\n     */\n    _swapColumnOrders(column1, column2) {\n      [column1._order, column2._order] = [column2._order, column1._order];\n      this._debounceUpdateFrozenColumn();\n      this._updateFirstAndLastColumn();\n    }\n\n    /**\n     * @param {HTMLElement | undefined} targetCell\n     * @param {GridColumn} draggedColumn\n     * @return {GridColumn | undefined}\n     * @protected\n     */\n    _getTargetColumn(targetCell, draggedColumn) {\n      if (targetCell && draggedColumn) {\n        let candidate = targetCell._column;\n        while (candidate.parentElement !== draggedColumn.parentElement && candidate !== this) {\n          candidate = candidate.parentElement;\n        }\n        if (candidate.parentElement === draggedColumn.parentElement) {\n          return candidate;\n        }\n        return targetCell._column;\n      }\n    }\n\n    /**\n     * Fired when the columns in the grid are reordered.\n     *\n     * @event column-reorder\n     * @param {Object} detail\n     * @param {Object} detail.columns the columns in the new order\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { addListener } from '@vaadin/component-base/src/gestures.js';\n\n/**\n * @polymerMixin\n */\nexport const ColumnResizingMixin = (superClass) =>\n  class ColumnResizingMixin extends superClass {\n    /** @protected */\n    ready() {\n      super.ready();\n      const scroller = this.$.scroller;\n      addListener(scroller, 'track', this._onHeaderTrack.bind(this));\n\n      // Disallow scrolling while resizing\n      scroller.addEventListener('touchmove', (e) => scroller.hasAttribute('column-resizing') && e.preventDefault());\n\n      // Disable contextmenu on any resize separator.\n      scroller.addEventListener(\n        'contextmenu',\n        (e) => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault(),\n      );\n\n      // Disable native cell focus when resizing\n      scroller.addEventListener(\n        'mousedown',\n        (e) => e.target.getAttribute('part') === 'resize-handle' && e.preventDefault(),\n      );\n    }\n\n    /** @private */\n    _onHeaderTrack(e) {\n      const handle = e.target;\n      if (handle.getAttribute('part') === 'resize-handle') {\n        const cell = handle.parentElement;\n        let column = cell._column;\n\n        this.$.scroller.toggleAttribute('column-resizing', true);\n\n        // Get the target column to resize\n        while (column.localName === 'vaadin-grid-column-group') {\n          column = column._childColumns\n            .slice(0)\n            .sort((a, b) => a._order - b._order)\n            .filter((column) => !column.hidden)\n            .pop();\n        }\n\n        const isRTL = this.__isRTL;\n        const eventX = e.detail.x;\n        const columnRowCells = Array.from(this.$.header.querySelectorAll('[part~=\"row\"]:last-child [part~=\"cell\"]'));\n        const targetCell = columnRowCells.find((cell) => cell._column === column);\n        // Resize the target column\n        if (targetCell.offsetWidth) {\n          const style = getComputedStyle(targetCell._content);\n          const minWidth =\n            10 +\n            parseInt(style.paddingLeft) +\n            parseInt(style.paddingRight) +\n            parseInt(style.borderLeftWidth) +\n            parseInt(style.borderRightWidth) +\n            parseInt(style.marginLeft) +\n            parseInt(style.marginRight);\n\n          let maxWidth;\n\n          const cellWidth = targetCell.offsetWidth;\n          const cellRect = targetCell.getBoundingClientRect();\n\n          // For cells frozen to end, resize handle is flipped horizontally.\n          if (targetCell.hasAttribute('frozen-to-end')) {\n            maxWidth = cellWidth + (isRTL ? eventX - cellRect.right : cellRect.left - eventX);\n          } else {\n            maxWidth = cellWidth + (isRTL ? cellRect.left - eventX : eventX - cellRect.right);\n          }\n\n          column.width = `${Math.max(minWidth, maxWidth)}px`;\n          column.flexGrow = 0;\n        }\n        // Fix width and flex-grow for all preceding columns\n        columnRowCells\n          .sort((a, b) => a._column._order - b._column._order)\n          .forEach((cell, index, array) => {\n            if (index < array.indexOf(targetCell)) {\n              cell._column.width = `${cell.offsetWidth}px`;\n              cell._column.flexGrow = 0;\n            }\n          });\n\n        const cellFrozenToEnd = this._frozenToEndCells[0];\n\n        // When handle moves below the cell frozen to end, scroll into view.\n        if (cellFrozenToEnd && this.$.table.scrollWidth > this.$.table.offsetWidth) {\n          const frozenRect = cellFrozenToEnd.getBoundingClientRect();\n          const offset = eventX - (isRTL ? frozenRect.right : frozenRect.left);\n\n          if ((isRTL && offset <= 0) || (!isRTL && offset >= 0)) {\n            this.$.table.scrollLeft += offset;\n          }\n        }\n\n        if (e.detail.state === 'end') {\n          this.$.scroller.toggleAttribute('column-resizing', false);\n          this.dispatchEvent(\n            new CustomEvent('column-resize', {\n              detail: { resizedColumn: column },\n            }),\n          );\n        }\n\n        // Notify resize\n        this._resizeHandler();\n      }\n    }\n\n    /**\n     * Fired when a column in the grid is resized by the user.\n     *\n     * @event column-resize\n     * @param {Object} detail\n     * @param {Object} detail.resizedColumn the column that was resized\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2021 - 2024 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @typedef {import('./cache.js').Cache} Cache\n */\n\n/**\n * Returns context for the given flattened index, including:\n * - the corresponding cache\n * - the cache level\n * - the corresponding item (if loaded)\n * - the item's index in the cache's items array\n * - the page containing the item\n *\n * @param {Cache} cache\n * @param {number} flatIndex\n */\nexport function getFlatIndexContext(cache, flatIndex, level = 0) {\n  let levelIndex = flatIndex;\n\n  for (const subCache of cache.subCaches) {\n    const index = subCache.parentCacheIndex;\n    if (levelIndex <= index) {\n      break;\n    } else if (levelIndex <= index + subCache.flatSize) {\n      return getFlatIndexContext(subCache, levelIndex - index - 1, level + 1);\n    }\n    levelIndex -= subCache.flatSize;\n  }\n\n  return {\n    cache,\n    item: cache.items[levelIndex],\n    index: levelIndex,\n    page: Math.floor(levelIndex / cache.pageSize),\n    level,\n  };\n}\n\n/**\n * Returns context for the given item, including:\n * - the cache containing the item\n * - the cache level\n * - the item\n * - the item's index in the cache's items array\n * - the item's flattened index\n * - the item's sub-cache (if exists)\n * - the page containing the item\n *\n * If the item isn't found, the method returns undefined.\n *\n * @param {Cache} cache\n * @param {{ getItemId: (item: unknown) => unknown}} context\n * @param {Cache} cache\n * @param {unknown} targetItem\n * @param {number} level\n * @param {number} levelFlatIndex\n */\nexport function getItemContext({ getItemId }, cache, targetItem, level = 0, levelFlatIndex = 0) {\n  // Start looking in this cache\n  for (let index = 0; index < cache.items.length; index++) {\n    const item = cache.items[index];\n    if (!!item && getItemId(item) === getItemId(targetItem)) {\n      return {\n        cache,\n        level,\n        item,\n        index,\n        page: Math.floor(index / cache.pageSize),\n        subCache: cache.getSubCache(index),\n        flatIndex: levelFlatIndex + cache.getFlatIndex(index),\n      };\n    }\n  }\n\n  // Look through sub-caches\n  for (const subCache of cache.subCaches) {\n    const parentItemFlatIndex = levelFlatIndex + cache.getFlatIndex(subCache.parentCacheIndex);\n    const result = getItemContext({ getItemId }, subCache, targetItem, level + 1, parentItemFlatIndex + 1);\n    if (result) {\n      return result;\n    }\n  }\n}\n\n/**\n * Recursively returns the globally flat index of the item the given indexes point to.\n * Each index in the array points to a sub-item of the previous index.\n * Using `Infinity` as an index will point to the last item on the level.\n *\n * @param {Cache} cache\n * @param {number[]} path\n * @param {number} flatIndex\n * @return {number}\n */\nexport function getFlatIndexByPath(cache, [levelIndex, ...subIndexes], flatIndex = 0) {\n  if (levelIndex === Infinity) {\n    // Treat Infinity as the last index on the level\n    levelIndex = cache.size - 1;\n  }\n\n  const flatIndexOnLevel = cache.getFlatIndex(levelIndex);\n  const subCache = cache.getSubCache(levelIndex);\n  if (subCache && subCache.flatSize > 0 && subIndexes.length) {\n    return getFlatIndexByPath(subCache, subIndexes, flatIndex + flatIndexOnLevel + 1);\n  }\n  return flatIndex + flatIndexOnLevel;\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2024 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { getFlatIndexContext } from './helpers.js';\n\n/**\n * A class that stores items with their associated sub-caches.\n */\nexport class Cache {\n  /**\n   * A context object.\n   *\n   * @type {{ isExpanded: (item: unknown) => boolean }}\n   */\n  context;\n\n  /**\n   * The number of items.\n   *\n   * @type {number}\n   */\n  size = 0;\n\n  /**\n   * The number of items to display per page.\n   *\n   * @type {number}\n   */\n  pageSize;\n\n  /**\n   * An array of cached items.\n   *\n   * @type {object[]}\n   */\n  items = [];\n\n  /**\n   * A map where the key is a requested page and the value is a callback\n   * that will be called with data once the request is complete.\n   *\n   * @type {Record<number, Function>}\n   */\n  pendingRequests = {};\n\n  /**\n   * A map where the key is the index of an item in the `items` array\n   * and the value is a sub-cache associated with that item.\n   *\n   * Note, it's intentionally defined as an object instead of a Map\n   * to ensure that Object.entries() returns an array with keys sorted\n   * in alphabetical order, rather than the order they were added.\n   *\n   * @type {Record<number, Cache>}\n   * @private\n   */\n  __subCacheByIndex = {};\n\n  /**\n   * The total number of items, including items from expanded sub-caches.\n   *\n   * @type {number}\n   * @private\n   */\n  __flatSize = 0;\n\n  /**\n   * @param {Cache['context']} context\n   * @param {number} pageSize\n   * @param {number | undefined} size\n   * @param {Cache | undefined} parentCache\n   * @param {number | undefined} parentCacheIndex\n   */\n  constructor(context, pageSize, size, parentCache, parentCacheIndex) {\n    this.context = context;\n    this.pageSize = pageSize;\n    this.size = size || 0;\n    this.parentCache = parentCache;\n    this.parentCacheIndex = parentCacheIndex;\n    this.__flatSize = size || 0;\n  }\n\n  /**\n   * An item in the parent cache that the current cache is associated with.\n   *\n   * @return {object | undefined}\n   */\n  get parentItem() {\n    return this.parentCache && this.parentCache.items[this.parentCacheIndex];\n  }\n\n  /**\n   * An array of sub-caches sorted in the same order as their associated items\n   * appear in the `items` array.\n   *\n   * @return {Cache[]}\n   */\n  get subCaches() {\n    return Object.values(this.__subCacheByIndex);\n  }\n\n  /**\n   * Whether the cache or any of its descendant caches have pending requests.\n   *\n   * @return {boolean}\n   */\n  get isLoading() {\n    if (Object.keys(this.pendingRequests).length > 0) {\n      return true;\n    }\n\n    return this.subCaches.some((subCache) => subCache.isLoading);\n  }\n\n  /**\n   * The total number of items, including items from expanded sub-caches.\n   *\n   * @return {number}\n   */\n  get flatSize() {\n    return this.__flatSize;\n  }\n\n  /**\n   * The total number of items, including items from expanded sub-caches.\n   *\n   * @protected\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  get effectiveSize() {\n    console.warn(\n      '<vaadin-grid> The `effectiveSize` property of ItemCache is deprecated and will be removed in Vaadin 25.',\n    );\n    return this.flatSize;\n  }\n\n  /**\n   * Recalculates the flattened size for the cache and its descendant caches recursively.\n   */\n  recalculateFlatSize() {\n    this.__flatSize =\n      !this.parentItem || this.context.isExpanded(this.parentItem)\n        ? this.size +\n          this.subCaches.reduce((total, subCache) => {\n            subCache.recalculateFlatSize();\n            return total + subCache.flatSize;\n          }, 0)\n        : 0;\n  }\n\n  /**\n   * Adds an array of items corresponding to the given page\n   * to the `items` array.\n   *\n   * @param {number} page\n   * @param {object[]} items\n   */\n  setPage(page, items) {\n    const startIndex = page * this.pageSize;\n    items.forEach((item, i) => {\n      this.items[startIndex + i] = item;\n    });\n  }\n\n  /**\n   * Retrieves the sub-cache associated with the item at the given index\n   * in the `items` array.\n   *\n   * @param {number} index\n   * @return {Cache | undefined}\n   */\n  getSubCache(index) {\n    return this.__subCacheByIndex[index];\n  }\n\n  /**\n   * Removes the sub-cache associated with the item at the given index\n   * in the `items` array.\n   *\n   * @param {number} index\n   */\n  removeSubCache(index) {\n    delete this.__subCacheByIndex[index];\n  }\n\n  /**\n   * Removes all sub-caches.\n   */\n  removeSubCaches() {\n    this.__subCacheByIndex = {};\n  }\n\n  /**\n   * Creates and associates a sub-cache for the item at the given index\n   * in the `items` array.\n   *\n   * @param {number} index\n   * @return {Cache}\n   */\n  createSubCache(index) {\n    const subCache = new Cache(this.context, this.pageSize, 0, this, index);\n    this.__subCacheByIndex[index] = subCache;\n    return subCache;\n  }\n\n  /**\n   * Retrieves the flattened index corresponding to the given index\n   * of an item in the `items` array.\n   *\n   * @param {number} index\n   * @return {number}\n   */\n  getFlatIndex(index) {\n    const clampedIndex = Math.max(0, Math.min(this.size - 1, index));\n\n    return this.subCaches.reduce((prev, subCache) => {\n      const index = subCache.parentCacheIndex;\n      return clampedIndex > index ? prev + subCache.flatSize : prev;\n    }, clampedIndex);\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  getItemForIndex(index) {\n    console.warn(\n      '<vaadin-grid> The `getItemForIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\n    );\n    const { item } = getFlatIndexContext(this, index);\n    return item;\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  getCacheAndIndex(index) {\n    console.warn(\n      '<vaadin-grid> The `getCacheAndIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\n    );\n    const { cache, index: scaledIndex } = getFlatIndexContext(this, index);\n    return { cache, scaledIndex };\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  updateSize() {\n    console.warn('<vaadin-grid> The `updateSize` method of ItemCache is deprecated and will be removed in Vaadin 25.');\n    this.recalculateFlatSize();\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  ensureSubCacheForScaledIndex(scaledIndex) {\n    console.warn(\n      '<vaadin-grid> The `ensureSubCacheForScaledIndex` method of ItemCache is deprecated and will be removed in Vaadin 25.',\n    );\n\n    if (!this.getSubCache(scaledIndex)) {\n      const subCache = this.createSubCache(scaledIndex);\n      this.context.__controller.__loadCachePage(subCache, 0);\n    }\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  get grid() {\n    console.warn('<vaadin-grid> The `grid` property of ItemCache is deprecated and will be removed in Vaadin 25.');\n    return this.context.__controller.host;\n  }\n\n  /**\n   * @deprecated since 24.3 and will be removed in Vaadin 25.\n   */\n  get itemCaches() {\n    console.warn(\n      '<vaadin-grid> The `itemCaches` property of ItemCache is deprecated and will be removed in Vaadin 25.',\n    );\n    return this.__subCacheByIndex;\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2021 - 2024 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { Cache } from './cache.js';\nimport { getFlatIndexByPath, getFlatIndexContext, getItemContext } from './helpers.js';\n\n/**\n * A controller that stores and manages items loaded with a data provider.\n */\nexport class DataProviderController extends EventTarget {\n  /**\n   * The controller host element.\n   *\n   * @param {HTMLElement}\n   */\n  host;\n\n  /**\n   * A callback that returns data based on the passed params such as\n   * `page`, `pageSize`, `parentItem`, etc.\n   */\n  dataProvider;\n\n  /**\n   * A callback that returns additional params that need to be passed\n   * to the data provider callback with every request.\n   */\n  dataProviderParams;\n\n  /**\n   * A number of items in the root cache.\n   *\n   * @type {number}\n   */\n  size;\n\n  /**\n   * A number of items to display per page.\n   *\n   * @type {number}\n   */\n  pageSize;\n\n  /**\n   * A callback that returns whether the given item is expanded.\n   *\n   * @type {(item: unknown) => boolean}\n   */\n  isExpanded;\n\n  /**\n   * A callback that returns the id for the given item and that\n   * is used when checking object items for equality.\n   *\n   * @type { (item: unknown) => unknown}\n   */\n  getItemId;\n\n  /**\n   * A reference to the root cache instance.\n   *\n   * @param {Cache}\n   */\n  rootCache;\n\n  constructor(host, { size, pageSize, isExpanded, getItemId, dataProvider, dataProviderParams }) {\n    super();\n    this.host = host;\n    this.pageSize = pageSize;\n    this.getItemId = getItemId;\n    this.isExpanded = isExpanded;\n    this.dataProvider = dataProvider;\n    this.dataProviderParams = dataProviderParams;\n    this.rootCache = this.__createRootCache(size);\n  }\n\n  /**\n   * The total number of items, including items from expanded sub-caches.\n   */\n  get flatSize() {\n    return this.rootCache.flatSize;\n  }\n\n  /** @private */\n  get __cacheContext() {\n    return {\n      isExpanded: this.isExpanded,\n      // The controller instance is needed to ensure deprecated cache methods work.\n      __controller: this,\n    };\n  }\n\n  /**\n   * Whether the root cache or any of its decendant caches have pending requests.\n   *\n   * @return {boolean}\n   */\n  isLoading() {\n    return this.rootCache.isLoading;\n  }\n\n  /**\n   * Sets the page size and clears the cache.\n   *\n   * @param {number} pageSize\n   */\n  setPageSize(pageSize) {\n    this.pageSize = pageSize;\n    this.clearCache();\n  }\n\n  /**\n   * Sets the data provider callback and clears the cache.\n   *\n   * @type {Function}\n   */\n  setDataProvider(dataProvider) {\n    this.dataProvider = dataProvider;\n    this.clearCache();\n  }\n\n  /**\n   * Recalculates the flattened size.\n   */\n  recalculateFlatSize() {\n    this.rootCache.recalculateFlatSize();\n  }\n\n  /**\n   * Clears the cache.\n   */\n  clearCache() {\n    this.rootCache = this.__createRootCache(this.rootCache.size);\n  }\n\n  /**\n   * Returns context for the given flattened index, including:\n   * - the corresponding cache\n   * - the cache level\n   * - the corresponding item (if loaded)\n   * - the item's index in the cache's items array\n   * - the page containing the item\n   *\n   * @param {number} flatIndex\n   */\n  getFlatIndexContext(flatIndex) {\n    return getFlatIndexContext(this.rootCache, flatIndex);\n  }\n\n  /**\n   * Returns context for the given item, including:\n   * - the cache containing the item\n   * - the cache level\n   * - the item\n   * - the item's index in the cache's items array\n   * - the item's flattened index\n   * - the item's sub-cache (if exists)\n   * - the page containing the item\n   *\n   * If the item isn't found, the method returns undefined.\n   */\n  getItemContext(item) {\n    return getItemContext({ getItemId: this.getItemId }, this.rootCache, item);\n  }\n\n  /**\n   * Returns the flattened index for the item that the given indexes point to.\n   * Each index in the path array points to a sub-item of the previous index.\n   * Using `Infinity` as an index will point to the last item on the level.\n   *\n   * @param {number[]} path\n   * @return {number}\n   */\n  getFlatIndexByPath(path) {\n    return getFlatIndexByPath(this.rootCache, path);\n  }\n\n  /**\n   * Requests the data provider to load the page with the item corresponding\n   * to the given flattened index. If the item is already loaded, the method\n   * returns immediatelly.\n   *\n   * @param {number} flatIndex\n   */\n  ensureFlatIndexLoaded(flatIndex) {\n    const { cache, page, item } = this.getFlatIndexContext(flatIndex);\n\n    if (!item) {\n      this.__loadCachePage(cache, page);\n    }\n  }\n\n  /**\n   * Creates a sub-cache for the item corresponding to the given flattened index and\n   * requests the data provider to load the first page into the created sub-cache.\n   * If the sub-cache already exists, the method returns immediatelly.\n   *\n   * @param {number} flatIndex\n   */\n  ensureFlatIndexHierarchy(flatIndex) {\n    const { cache, item, index } = this.getFlatIndexContext(flatIndex);\n\n    if (item && this.isExpanded(item) && !cache.getSubCache(index)) {\n      const subCache = cache.createSubCache(index);\n      this.__loadCachePage(subCache, 0);\n    }\n  }\n\n  /**\n   * Loads the first page into the root cache.\n   */\n  loadFirstPage() {\n    this.__loadCachePage(this.rootCache, 0);\n  }\n\n  /** @private */\n  __createRootCache(size) {\n    return new Cache(this.__cacheContext, this.pageSize, size);\n  }\n\n  /** @private */\n  __loadCachePage(cache, page) {\n    if (!this.dataProvider || cache.pendingRequests[page]) {\n      return;\n    }\n\n    let params = {\n      page,\n      pageSize: this.pageSize,\n      parentItem: cache.parentItem,\n    };\n\n    if (this.dataProviderParams) {\n      params = { ...params, ...this.dataProviderParams() };\n    }\n\n    const callback = (items, size) => {\n      if (cache.pendingRequests[page] !== callback) {\n        return;\n      }\n\n      if (size !== undefined) {\n        cache.size = size;\n      } else if (params.parentItem) {\n        cache.size = items.length;\n      }\n\n      cache.setPage(page, items);\n\n      this.recalculateFlatSize();\n\n      this.dispatchEvent(new CustomEvent('page-received'));\n\n      delete cache.pendingRequests[page];\n\n      this.dispatchEvent(new CustomEvent('page-loaded'));\n    };\n\n    cache.pendingRequests[page] = callback;\n\n    this.dispatchEvent(new CustomEvent('page-requested'));\n\n    this.dataProvider(params, callback);\n  }\n}\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { microTask, timeOut } from '@vaadin/component-base/src/async.js';\nimport { DataProviderController } from '@vaadin/component-base/src/data-provider-controller/data-provider-controller.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { getBodyRowCells, updateCellsPart, updateState } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const DataProviderMixin = (superClass) =>\n  class DataProviderMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * The number of root-level items in the grid.\n         * @attr {number} size\n         * @type {number}\n         */\n        size: {\n          type: Number,\n          notify: true,\n          sync: true,\n        },\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _flatSize: {\n          type: Number,\n          sync: true,\n        },\n\n        /**\n         * Number of items fetched at a time from the dataprovider.\n         * @attr {number} page-size\n         * @type {number}\n         */\n        pageSize: {\n          type: Number,\n          value: 50,\n          observer: '_pageSizeChanged',\n          sync: true,\n        },\n\n        /**\n         * Function that provides items lazily. Receives arguments `params`, `callback`\n         *\n         * `params.page` Requested page index\n         *\n         * `params.pageSize` Current page size\n         *\n         * `params.filters` Currently applied filters\n         *\n         * `params.sortOrders` Currently applied sorting orders\n         *\n         * `params.parentItem` When tree is used, and sublevel items\n         * are requested, reference to parent item of the requested sublevel.\n         * Otherwise `undefined`.\n         *\n         * `callback(items, size)` Callback function with arguments:\n         *   - `items` Current page of items\n         *   - `size` Total number of items. When tree sublevel items\n         *     are requested, total number of items in the requested sublevel.\n         *     Optional when tree is not used, required for tree.\n         *\n         * @type {GridDataProvider | null | undefined}\n         */\n        dataProvider: {\n          type: Object,\n          notify: true,\n          observer: '_dataProviderChanged',\n          sync: true,\n        },\n\n        /**\n         * `true` while data is being requested from the data provider.\n         */\n        loading: {\n          type: Boolean,\n          notify: true,\n          readOnly: true,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * @protected\n         */\n        _hasData: {\n          type: Boolean,\n          value: false,\n          sync: true,\n        },\n\n        /**\n         * Path to an item sub-property that indicates whether the item has child items.\n         * @attr {string} item-has-children-path\n         */\n        itemHasChildrenPath: {\n          type: String,\n          value: 'children',\n          observer: '__itemHasChildrenPathChanged',\n          sync: true,\n        },\n\n        /**\n         * Path to an item sub-property that identifies the item.\n         * @attr {string} item-id-path\n         */\n        itemIdPath: {\n          type: String,\n          value: null,\n          sync: true,\n        },\n\n        /**\n         * An array that contains the expanded items.\n         * @type {!Array<!GridItem>}\n         */\n        expandedItems: {\n          type: Object,\n          notify: true,\n          value: () => [],\n          sync: true,\n        },\n\n        /**\n         * @private\n         */\n        __expandedKeys: {\n          type: Object,\n          computed: '__computeExpandedKeys(itemIdPath, expandedItems)',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_sizeChanged(size)', '_expandedItemsChanged(expandedItems)'];\n    }\n\n    constructor() {\n      super();\n\n      /** @type {DataProviderController} */\n      this._dataProviderController = new DataProviderController(this, {\n        size: this.size,\n        pageSize: this.pageSize,\n        getItemId: this.getItemId.bind(this),\n        isExpanded: this._isExpanded.bind(this),\n        dataProvider: this.dataProvider ? this.dataProvider.bind(this) : null,\n        dataProviderParams: () => {\n          return {\n            sortOrders: this._mapSorters(),\n            filters: this._mapFilters(),\n          };\n        },\n      });\n\n      this._dataProviderController.addEventListener('page-requested', this._onDataProviderPageRequested.bind(this));\n      this._dataProviderController.addEventListener('page-received', this._onDataProviderPageReceived.bind(this));\n      this._dataProviderController.addEventListener('page-loaded', this._onDataProviderPageLoaded.bind(this));\n    }\n\n    /**\n     * @protected\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\n     */\n    get _cache() {\n      console.warn('<vaadin-grid> The `_cache` property is deprecated and will be removed in Vaadin 25.');\n      return this._dataProviderController.rootCache;\n    }\n\n    /**\n     * @protected\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\n     */\n    get _effectiveSize() {\n      console.warn('<vaadin-grid> The `_effectiveSize` property is deprecated and will be removed in Vaadin 25.');\n      return this._flatSize;\n    }\n\n    /** @private */\n    _sizeChanged(size) {\n      this._dataProviderController.rootCache.size = size;\n      this._dataProviderController.recalculateFlatSize();\n      this._flatSize = this._dataProviderController.flatSize;\n    }\n\n    /** @private */\n    __itemHasChildrenPathChanged(value, oldValue) {\n      if (!oldValue && value === 'children') {\n        // Avoid an unnecessary content update on init.\n        return;\n      }\n      this.requestContentUpdate();\n    }\n\n    /**\n     * @param {number} index\n     * @param {HTMLElement} el\n     * @protected\n     */\n    _getItem(index, el) {\n      if (index >= this._flatSize) {\n        return;\n      }\n\n      el.index = index;\n\n      const { item } = this._dataProviderController.getFlatIndexContext(index);\n      if (item) {\n        this.__updateLoading(el, false);\n        this._updateItem(el, item);\n        if (this._isExpanded(item)) {\n          this._dataProviderController.ensureFlatIndexHierarchy(index);\n        }\n      } else {\n        this.__updateLoading(el, true);\n        this._dataProviderController.ensureFlatIndexLoaded(index);\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {boolean} loading\n     * @private\n     */\n    __updateLoading(row, loading) {\n      const cells = getBodyRowCells(row);\n\n      // Row state attribute\n      updateState(row, 'loading', loading);\n\n      // Cells part attribute\n      updateCellsPart(cells, 'loading-row-cell', loading);\n    }\n\n    /**\n     * Returns a value that identifies the item. Uses `itemIdPath` if available.\n     * Can be customized by overriding.\n     * @param {!GridItem} item\n     * @return {!GridItem | !unknown}\n     */\n    getItemId(item) {\n      return this.itemIdPath ? get(this.itemIdPath, item) : item;\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isExpanded(item) {\n      return this.__expandedKeys && this.__expandedKeys.has(this.getItemId(item));\n    }\n\n    /** @private */\n    _expandedItemsChanged() {\n      this._dataProviderController.recalculateFlatSize();\n      this._flatSize = this._dataProviderController.flatSize;\n      this.__updateVisibleRows();\n    }\n\n    /** @private */\n    __computeExpandedKeys(itemIdPath, expandedItems) {\n      const expanded = expandedItems || [];\n      const expandedKeys = new Set();\n      expanded.forEach((item) => {\n        expandedKeys.add(this.getItemId(item));\n      });\n\n      return expandedKeys;\n    }\n\n    /**\n     * Expands the given item tree.\n     * @param {!GridItem} item\n     */\n    expandItem(item) {\n      if (!this._isExpanded(item)) {\n        this.expandedItems = [...this.expandedItems, item];\n      }\n    }\n\n    /**\n     * Collapses the given item tree.\n     * @param {!GridItem} item\n     */\n    collapseItem(item) {\n      if (this._isExpanded(item)) {\n        this.expandedItems = this.expandedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n\n    /**\n     * @param {number} index\n     * @return {number}\n     * @protected\n     */\n    _getIndexLevel(index = 0) {\n      const { level } = this._dataProviderController.getFlatIndexContext(index);\n      return level;\n    }\n\n    /**\n     * @param {number} page\n     * @param {ItemCache} cache\n     * @protected\n     * @deprecated since 24.3 and will be removed in Vaadin 25.\n     */\n    _loadPage(page, cache) {\n      console.warn('<vaadin-grid> The `_loadPage` method is deprecated and will be removed in Vaadin 25.');\n      this._dataProviderController.__loadCachePage(cache, page);\n    }\n\n    /** @protected */\n    _onDataProviderPageRequested() {\n      this._setLoading(true);\n    }\n\n    /** @protected */\n    _onDataProviderPageReceived() {\n      // With the new items added, update the cache size and the grid's effective size\n      this._flatSize = this._dataProviderController.flatSize;\n\n      // After updating the cache, check if some of the expanded items should have sub-caches loaded\n      this._getRenderedRows().forEach((row) => {\n        this._dataProviderController.ensureFlatIndexHierarchy(row.index);\n      });\n\n      this._hasData = true;\n    }\n\n    /** @protected */\n    _onDataProviderPageLoaded() {\n      // Schedule a debouncer to update the visible rows\n      this._debouncerApplyCachedData = Debouncer.debounce(this._debouncerApplyCachedData, timeOut.after(0), () => {\n        this._setLoading(false);\n\n        this._getRenderedRows().forEach((row) => {\n          const { item } = this._dataProviderController.getFlatIndexContext(row.index);\n          if (item) {\n            this._getItem(row.index, row);\n          }\n        });\n\n        this.__scrollToPendingIndexes();\n        this.__dispatchPendingBodyCellFocus();\n      });\n\n      // If the grid is not loading anything, flush the debouncer immediately\n      if (!this._dataProviderController.isLoading()) {\n        this._debouncerApplyCachedData.flush();\n      }\n    }\n\n    /** @private */\n    __debounceClearCache() {\n      this.__clearCacheDebouncer = Debouncer.debounce(this.__clearCacheDebouncer, microTask, () => this.clearCache());\n    }\n\n    /**\n     * Clears the cached pages and reloads data from dataprovider when needed.\n     */\n    clearCache() {\n      this._dataProviderController.clearCache();\n      this._dataProviderController.rootCache.size = this.size;\n      this._dataProviderController.recalculateFlatSize();\n      this._hasData = false;\n      this.__updateVisibleRows();\n\n      if (!this.__virtualizer || !this.__virtualizer.size) {\n        this._dataProviderController.loadFirstPage();\n      }\n    }\n\n    /** @private */\n    _pageSizeChanged(pageSize, oldPageSize) {\n      this._dataProviderController.setPageSize(pageSize);\n\n      if (oldPageSize !== undefined && pageSize !== oldPageSize) {\n        this.clearCache();\n      }\n    }\n\n    /** @protected */\n    _checkSize() {\n      if (this.size === undefined && this._flatSize === 0) {\n        console.warn(\n          'The <vaadin-grid> needs the total number of items in' +\n            ' order to display rows, which you can specify either by setting' +\n            ' the `size` property, or by providing it to the second argument' +\n            ' of the `dataProvider` function `callback` call.',\n        );\n      }\n    }\n\n    /** @private */\n    _dataProviderChanged(dataProvider, oldDataProvider) {\n      this._dataProviderController.setDataProvider(dataProvider ? dataProvider.bind(this) : null);\n\n      if (oldDataProvider !== undefined) {\n        this.clearCache();\n      }\n\n      this._ensureFirstPageLoaded();\n\n      this._debouncerCheckSize = Debouncer.debounce(\n        this._debouncerCheckSize,\n        timeOut.after(2000),\n        this._checkSize.bind(this),\n      );\n    }\n\n    /** @protected */\n    _ensureFirstPageLoaded() {\n      if (!this._hasData) {\n        // Load data before adding rows to make sure they have content when\n        // rendered for the first time.\n        this._dataProviderController.loadFirstPage();\n      }\n    }\n\n    /**\n     * @param {!GridItem} item1\n     * @param {!GridItem} item2\n     * @return {boolean}\n     * @protected\n     */\n    _itemsEqual(item1, item2) {\n      return this.getItemId(item1) === this.getItemId(item2);\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @param {!Array<!GridItem>} array\n     * @return {number}\n     * @protected\n     */\n    _getItemIndexInArray(item, array) {\n      let result = -1;\n      array.forEach((i, idx) => {\n        if (this._itemsEqual(i, item)) {\n          result = idx;\n        }\n      });\n      return result;\n    }\n\n    /**\n     * Scroll to a specific row index in the virtual list. Note that the row index is\n     * not always the same for any particular item. For example, sorting or filtering\n     * items can affect the row index related to an item.\n     *\n     * The `indexes` parameter can be either a single number or multiple numbers.\n     * The grid will first try to scroll to the item at the first index on the top level.\n     * In case the item at the first index is expanded, the grid will then try scroll to the\n     * item at the second index within the children of the expanded first item, and so on.\n     * Each given index points to a child of the item at the previous index.\n     *\n     * Using `Infinity` as an index will point to the last item on the level.\n     *\n     * @param indexes {...number} Row indexes to scroll to\n     */\n    scrollToIndex(...indexes) {\n      // Synchronous data provider may cause changes to the cache on scroll without\n      // ending up in a loading state. Try scrolling to the index until the target\n      // index stabilizes.\n      let targetIndex;\n      while (targetIndex !== (targetIndex = this._dataProviderController.getFlatIndexByPath(indexes))) {\n        this._scrollToFlatIndex(targetIndex);\n      }\n\n      if (this._dataProviderController.isLoading() || !this.clientHeight) {\n        this.__pendingScrollToIndexes = indexes;\n      }\n    }\n\n    /** @private */\n    __scrollToPendingIndexes() {\n      if (this.__pendingScrollToIndexes && this.$.items.children.length) {\n        const indexes = this.__pendingScrollToIndexes;\n        delete this.__pendingScrollToIndexes;\n        this.scrollToIndex(...indexes);\n      }\n    }\n\n    /**\n     * Fired when the `expandedItems` property changes.\n     *\n     * @event expanded-items-changed\n     */\n\n    /**\n     * Fired when the `loading` property changes.\n     *\n     * @event loading-changed\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport {\n  iterateChildren,\n  iterateRowCells,\n  updateBooleanRowStates,\n  updateStringRowStates,\n} from './vaadin-grid-helpers.js';\n\nconst DropMode = {\n  BETWEEN: 'between',\n  ON_TOP: 'on-top',\n  ON_TOP_OR_BETWEEN: 'on-top-or-between',\n  ON_GRID: 'on-grid',\n};\n\nconst DropLocation = {\n  ON_TOP: 'on-top',\n  ABOVE: 'above',\n  BELOW: 'below',\n  EMPTY: 'empty',\n};\n\n// Detects if the browser doesn't support HTML5 Drag & Drop API (and falls back to the @vaadin/vaadin-mobile-drag-drop polyfill)\nconst usesDnDPolyfill = !('draggable' in document.createElement('div'));\n\n/**\n * @polymerMixin\n */\nexport const DragAndDropMixin = (superClass) =>\n  class DragAndDropMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Defines the locations within the Grid row where an element can be dropped.\n         *\n         * Possible values are:\n         * - `between`: The drop event can happen between Grid rows.\n         * - `on-top`: The drop event can happen on top of Grid rows.\n         * - `on-top-or-between`: The drop event can happen either on top of or between Grid rows.\n         * - `on-grid`: The drop event will not happen on any specific row, it will show the drop target outline around the whole grid.\n         * @attr {between|on-top|on-top-or-between|on-grid} drop-mode\n         * @type {GridDropMode | null | undefined}\n         */\n        dropMode: {\n          type: String,\n          sync: true,\n        },\n\n        /**\n         * Marks the grid's rows to be available for dragging.\n         * @attr {boolean} rows-draggable\n         */\n        rowsDraggable: {\n          type: Boolean,\n          sync: true,\n        },\n\n        /**\n         * A function that filters dragging of specific grid rows. The return value should be false\n         * if dragging of the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dragFilter: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * A function that filters dropping on specific grid rows. The return value should be false\n         * if dropping on the row should be disabled.\n         *\n         * Receives one argument:\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridDragAndDropFilter | null | undefined}\n         */\n        dropFilter: {\n          type: Function,\n          sync: true,\n        },\n\n        /** @private */\n        __dndAutoScrollThreshold: {\n          value: 50,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['_dragDropAccessChanged(rowsDraggable, dropMode, dragFilter, dropFilter, loading)'];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.$.table.addEventListener('dragstart', this._onDragStart.bind(this));\n      this.$.table.addEventListener('dragend', this._onDragEnd.bind(this));\n      this.$.table.addEventListener('dragover', this._onDragOver.bind(this));\n      this.$.table.addEventListener('dragleave', this._onDragLeave.bind(this));\n      this.$.table.addEventListener('drop', this._onDrop.bind(this));\n      this.$.table.addEventListener('dragenter', (e) => {\n        if (this.dropMode) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n    }\n\n    /** @private */\n    _onDragStart(e) {\n      if (this.rowsDraggable) {\n        let row = e.target;\n        if (row.localName === 'vaadin-grid-cell-content') {\n          // The draggable node is the cell content element on browsers that support native shadow\n          row = row.assignedSlot.parentNode.parentNode;\n        }\n        if (row.parentNode !== this.$.items) {\n          return;\n        }\n\n        e.stopPropagation();\n        this.toggleAttribute('dragging-rows', true);\n\n        if (this._safari) {\n          // Safari doesn't position drag images from transformed\n          // elements properly so we need to switch to use top temporarily\n          const transform = row.style.transform;\n          row.style.top = /translateY\\((.*)\\)/u.exec(transform)[1];\n          row.style.transform = 'none';\n          requestAnimationFrame(() => {\n            row.style.top = '';\n            row.style.transform = transform;\n          });\n        }\n\n        const rowRect = row.getBoundingClientRect();\n\n        if (usesDnDPolyfill) {\n          // The polyfill drag image is automatically centered so there is no need to adjust the position\n          e.dataTransfer.setDragImage(row);\n        } else {\n          // The native drag image needs to be shifted manually to compensate for the touch position offset\n          e.dataTransfer.setDragImage(row, e.clientX - rowRect.left, e.clientY - rowRect.top);\n        }\n\n        let rows = [row];\n        if (this._isSelected(row._item)) {\n          rows = this.__getViewportRows()\n            .filter((row) => this._isSelected(row._item))\n            .filter((row) => !this.dragFilter || this.dragFilter(this.__getRowModel(row)));\n        }\n\n        // Set the default transfer data\n        e.dataTransfer.setData('text', this.__formatDefaultTransferData(rows));\n\n        updateBooleanRowStates(row, { dragstart: rows.length > 1 ? `${rows.length}` : '' });\n        this.style.setProperty('--_grid-drag-start-x', `${e.clientX - rowRect.left + 20}px`);\n        this.style.setProperty('--_grid-drag-start-y', `${e.clientY - rowRect.top + 10}px`);\n\n        requestAnimationFrame(() => {\n          updateBooleanRowStates(row, { dragstart: false });\n          this.style.setProperty('--_grid-drag-start-x', '');\n          this.style.setProperty('--_grid-drag-start-y', '');\n        });\n\n        const event = new CustomEvent('grid-dragstart', {\n          detail: {\n            draggedItems: rows.map((row) => row._item),\n            setDragData: (type, data) => e.dataTransfer.setData(type, data),\n            setDraggedItemsCount: (count) => row.setAttribute('dragstart', count),\n          },\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    _onDragEnd(e) {\n      this.toggleAttribute('dragging-rows', false);\n      e.stopPropagation();\n      const event = new CustomEvent('grid-dragend');\n      event.originalEvent = e;\n      this.dispatchEvent(event);\n    }\n\n    /** @private */\n    _onDragLeave(e) {\n      e.stopPropagation();\n      this._clearDragStyles();\n    }\n\n    /** @private */\n    _onDragOver(e) {\n      if (this.dropMode) {\n        this._dropLocation = undefined;\n        this._dragOverItem = undefined;\n\n        if (this.__dndAutoScroll(e.clientY)) {\n          this._clearDragStyles();\n          return;\n        }\n\n        let row = e.composedPath().find((node) => node.localName === 'tr');\n\n        if (!this._flatSize || this.dropMode === DropMode.ON_GRID) {\n          // The grid is empty or \"on-grid\" drop mode was used, always default to \"empty\"\n          this._dropLocation = DropLocation.EMPTY;\n        } else if (!row || row.parentNode !== this.$.items) {\n          // The dragover didn't occur on a body row but the grid has items\n          if (row) {\n            // The dragover occurred over a header/footer row\n            return;\n          } else if (this.dropMode === DropMode.BETWEEN || this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            // The drop mode allows setting the last row as the drag over item\n            row = Array.from(this.$.items.children)\n              .filter((row) => !row.hidden)\n              .pop();\n            this._dropLocation = DropLocation.BELOW;\n          } else {\n            // Drop mode on-top used but the dragover didn't occur over one of the existing rows\n            return;\n          }\n        } else {\n          // The dragover occurred on a body row, determine the drop location from coordinates\n          const rowRect = row.getBoundingClientRect();\n\n          this._dropLocation = DropLocation.ON_TOP;\n\n          if (this.dropMode === DropMode.BETWEEN) {\n            const dropAbove = e.clientY - rowRect.top < rowRect.bottom - e.clientY;\n            this._dropLocation = dropAbove ? DropLocation.ABOVE : DropLocation.BELOW;\n          } else if (this.dropMode === DropMode.ON_TOP_OR_BETWEEN) {\n            if (e.clientY - rowRect.top < rowRect.height / 3) {\n              this._dropLocation = DropLocation.ABOVE;\n            } else if (e.clientY - rowRect.top > (rowRect.height / 3) * 2) {\n              this._dropLocation = DropLocation.BELOW;\n            }\n          }\n        }\n\n        if (row && row.hasAttribute('drop-disabled')) {\n          this._dropLocation = undefined;\n          return;\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (this._dropLocation === DropLocation.EMPTY) {\n          this.toggleAttribute('dragover', true);\n        } else if (row) {\n          this._dragOverItem = row._item;\n          if (row.getAttribute('dragover') !== this._dropLocation) {\n            updateStringRowStates(row, { dragover: this._dropLocation });\n          }\n        } else {\n          this._clearDragStyles();\n        }\n      }\n    }\n\n    /** @private */\n    __dndAutoScroll(clientY) {\n      if (this.__dndAutoScrolling) {\n        return true;\n      }\n\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      const topDiff = headerBottom - clientY + this.__dndAutoScrollThreshold;\n      const bottomDiff = clientY - footerTop + this.__dndAutoScrollThreshold;\n      let scrollTopDelta = 0;\n\n      if (bottomDiff > 0) {\n        scrollTopDelta = bottomDiff * 2;\n      } else if (topDiff > 0) {\n        scrollTopDelta = -topDiff * 2;\n      }\n\n      if (scrollTopDelta) {\n        const scrollTop = this.$.table.scrollTop;\n        this.$.table.scrollTop += scrollTopDelta;\n        const scrollTopChanged = scrollTop !== this.$.table.scrollTop;\n        if (scrollTopChanged) {\n          this.__dndAutoScrolling = true;\n          // Disallow more auto-scrolls within 20ms\n          setTimeout(() => {\n            this.__dndAutoScrolling = false;\n          }, 20);\n          return true;\n        }\n      }\n    }\n\n    /** @private */\n    __getViewportRows() {\n      const headerBottom = this.$.header.getBoundingClientRect().bottom;\n      const footerTop = this.$.footer.getBoundingClientRect().top;\n      return Array.from(this.$.items.children).filter((row) => {\n        const rowRect = row.getBoundingClientRect();\n        return rowRect.bottom > headerBottom && rowRect.top < footerTop;\n      });\n    }\n\n    /** @protected */\n    _clearDragStyles() {\n      this.removeAttribute('dragover');\n      iterateChildren(this.$.items, (row) => {\n        updateStringRowStates(row, { dragover: null });\n      });\n    }\n\n    /** @private */\n    _onDrop(e) {\n      if (this.dropMode) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dragData =\n          e.dataTransfer.types &&\n          Array.from(e.dataTransfer.types).map((type) => {\n            return {\n              type,\n              data: e.dataTransfer.getData(type),\n            };\n          });\n\n        this._clearDragStyles();\n\n        const event = new CustomEvent('grid-drop', {\n          bubbles: e.bubbles,\n          cancelable: e.cancelable,\n          detail: {\n            dropTargetItem: this._dragOverItem,\n            dropLocation: this._dropLocation,\n            dragData,\n          },\n        });\n        event.originalEvent = e;\n        this.dispatchEvent(event);\n      }\n    }\n\n    /** @private */\n    __formatDefaultTransferData(rows) {\n      return rows\n        .map((row) => {\n          return Array.from(row.children)\n            .filter((cell) => !cell.hidden && cell.getAttribute('part').indexOf('details-cell') === -1)\n            .sort((a, b) => {\n              return a._column._order > b._column._order ? 1 : -1;\n            })\n            .map((cell) => cell._content.textContent.trim())\n            .filter((content) => content)\n            .join('\\t');\n        })\n        .join('\\n');\n    }\n\n    /** @private */\n    _dragDropAccessChanged() {\n      this.filterDragAndDrop();\n    }\n\n    /**\n     * Runs the `dragFilter` and `dropFilter` hooks for the visible cells.\n     * If the filter depends on varying conditions, you may need to\n     * call this function manually in order to update the draggability when\n     * the conditions change.\n     */\n    filterDragAndDrop() {\n      iterateChildren(this.$.items, (row) => {\n        if (!row.hidden) {\n          this._filterDragAndDrop(row, this.__getRowModel(row));\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItemModel} model\n     * @protected\n     */\n    _filterDragAndDrop(row, model) {\n      const loading = this.loading || row.hasAttribute('loading');\n      const dragDisabled = !this.rowsDraggable || loading || (this.dragFilter && !this.dragFilter(model));\n      const dropDisabled = !this.dropMode || loading || (this.dropFilter && !this.dropFilter(model));\n\n      iterateRowCells(row, (cell) => {\n        if (dragDisabled) {\n          cell._content.removeAttribute('draggable');\n        } else {\n          cell._content.setAttribute('draggable', true);\n        }\n      });\n\n      updateBooleanRowStates(row, {\n        'drag-disabled': !!dragDisabled,\n        'drop-disabled': !!dropDisabled,\n      });\n    }\n\n    /**\n     * Fired when starting to drag grid rows.\n     *\n     * @event grid-dragstart\n     * @param {Object} originalEvent The native dragstart event\n     * @param {Object} detail\n     * @param {Object} detail.draggedItems the items in the visible viewport that are dragged\n     * @param {Function} detail.setDraggedItemsCount Overrides the default number shown in the drag image on multi row drag.\n     * Parameter is of type number.\n     * @param {Function} detail.setDragData Sets dataTransfer data for the drag operation.\n     * Note that \"text\" is the only data type supported by all the browsers the grid currently supports (including IE11).\n     * The function takes two parameters:\n     * - type:string The type of the data\n     * - data:string The data\n     */\n\n    /**\n     * Fired when the dragging of the rows ends.\n     *\n     * @event grid-dragend\n     * @param {Object} originalEvent The native dragend event\n     */\n\n    /**\n     * Fired when a drop occurs on top of the grid.\n     *\n     * @event grid-drop\n     * @param {Object} originalEvent The native drop event\n     * @param {Object} detail\n     * @param {Object} detail.dropTargetItem The item of the grid row on which the drop occurred.\n     * @param {string} detail.dropLocation The position at which the drop event took place relative to a row.\n     * Depending on the dropMode value, the drop location can be one of the following\n     * - `on-top`: when the drop occurred on top of the row\n     * - `above`: when the drop occurred above the row\n     * - `below`: when the drop occurred below the row\n     * - `empty`: when the drop occurred over the grid, not relative to any specific row\n     * @param {string} detail.dragData An array of items with the payload as a string representation as the\n     * `data` property and the type of the data as `type` property.\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { microTask, timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { ColumnObserver, updateCellState } from './vaadin-grid-helpers.js';\n\nfunction arrayEquals(arr1, arr2) {\n  if (!arr1 || !arr2 || arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0, l = arr1.length; i < l; i++) {\n    // Check if we have nested arrays\n    if (arr1[i] instanceof Array && arr2[i] instanceof Array) {\n      // Recurse into the nested arrays\n      if (!arrayEquals(arr1[i], arr2[i])) {\n        return false;\n      }\n    } else if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @polymerMixin\n */\nexport const DynamicColumnsMixin = (superClass) =>\n  class DynamicColumnsMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * @protected\n         */\n        _columnTree: Object,\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this._addNodeObserver();\n    }\n\n    /** @private */\n    _hasColumnGroups(columns) {\n      return columns.some((column) => column.localName === 'vaadin-grid-column-group');\n    }\n\n    /**\n     * @param {!GridColumnGroup} el\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getChildColumns(el) {\n      return ColumnObserver.getColumns(el);\n    }\n\n    /** @private */\n    _flattenColumnGroups(columns) {\n      return columns\n        .map((col) => {\n          if (col.localName === 'vaadin-grid-column-group') {\n            return this._getChildColumns(col);\n          }\n          return [col];\n        })\n        .reduce((prev, curr) => {\n          return prev.concat(curr);\n        }, []);\n    }\n\n    /** @private */\n    _getColumnTree() {\n      const rootColumns = ColumnObserver.getColumns(this);\n      const columnTree = [rootColumns];\n\n      let c = rootColumns;\n      while (this._hasColumnGroups(c)) {\n        c = this._flattenColumnGroups(c);\n        columnTree.push(c);\n      }\n\n      return columnTree;\n    }\n\n    /** @protected */\n    _debounceUpdateColumnTree() {\n      this.__updateColumnTreeDebouncer = Debouncer.debounce(this.__updateColumnTreeDebouncer, microTask, () =>\n        this._updateColumnTree(),\n      );\n    }\n\n    /** @protected */\n    _updateColumnTree() {\n      const columnTree = this._getColumnTree();\n\n      if (!arrayEquals(columnTree, this._columnTree)) {\n        // Request a synchronoys update for each column\n        columnTree.forEach((columnArray) => {\n          columnArray.forEach((column) => {\n            if (column.performUpdate) {\n              column.performUpdate();\n            }\n          });\n        });\n\n        this._columnTree = columnTree;\n      }\n    }\n\n    /** @private */\n    _addNodeObserver() {\n      this._observer = new ColumnObserver(this, (_addedColumns, removedColumns) => {\n        const allRemovedCells = removedColumns.flatMap((c) => c._allCells);\n        const filterNotConnected = (element) =>\n          allRemovedCells.filter((cell) => cell && cell._content.contains(element)).length;\n\n        this.__removeSorters(this._sorters.filter(filterNotConnected));\n        this.__removeFilters(this._filters.filter(filterNotConnected));\n        this._debounceUpdateColumnTree();\n\n        this._debouncerCheckImports = Debouncer.debounce(\n          this._debouncerCheckImports,\n          timeOut.after(2000),\n          this._checkImports.bind(this),\n        );\n\n        this._ensureFirstPageLoaded();\n      });\n    }\n\n    /** @protected */\n    _checkImports() {\n      [\n        'vaadin-grid-column-group',\n        'vaadin-grid-filter',\n        'vaadin-grid-filter-column',\n        'vaadin-grid-tree-toggle',\n        'vaadin-grid-selection-column',\n        'vaadin-grid-sort-column',\n        'vaadin-grid-sorter',\n      ].forEach((elementName) => {\n        const element = this.querySelector(elementName);\n        if (element && !customElements.get(elementName)) {\n          console.warn(`Make sure you have imported the required module for <${elementName}> element.`);\n        }\n      });\n    }\n\n    /** @protected */\n    _updateFirstAndLastColumn() {\n      Array.from(this.shadowRoot.querySelectorAll('tr')).forEach((row) => this._updateFirstAndLastColumnForRow(row));\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @protected\n     */\n    _updateFirstAndLastColumnForRow(row) {\n      Array.from(row.querySelectorAll('[part~=\"cell\"]:not([part~=\"details-cell\"])'))\n        .sort((a, b) => {\n          return a._column._order - b._column._order;\n        })\n        .forEach((cell, cellIndex, children) => {\n          updateCellState(cell, 'first-column', cellIndex === 0);\n          updateCellState(cell, 'last-column', cellIndex === children.length - 1);\n        });\n    }\n\n    /**\n     * @param {!Node} node\n     * @return {boolean}\n     * @protected\n     */\n    _isColumnElement(node) {\n      return node.nodeType === Node.ELEMENT_NODE && /\\bcolumn\\b/u.test(node.localName);\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const EventContextMixin = (superClass) =>\n  class EventContextMixin extends superClass {\n    /**\n     * Returns an object with context information about the event target:\n     * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)\n     * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)\n     * - `section`: whether the event targeted the body, header, footer or details of the grid\n     *\n     * These additional properties are included when `item` is specified:\n     * - `index`: the index of the item\n     * - `selected`: the selected state of the item\n     * - `detailsOpened`: whether the row details are open for the item\n     * - `expanded`: the expanded state of the tree toggle\n     * - `level`: the tree hierarchy level\n     *\n     * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.\n     * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.\n     * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if\n     * the event targets the empty part of the grid body.\n     *\n     * @param {!Event} event\n     * @return {GridEventContext}\n     */\n    getEventContext(event) {\n      const context = {};\n\n      // Use `composedPath()` stored by vaadin-context-menu gesture\n      // to avoid problem when accessing it after a timeout on iOS\n      const path = event.__composedPath || event.composedPath();\n      const cell = path[path.indexOf(this.$.table) - 3];\n\n      if (!cell) {\n        return context;\n      }\n\n      context.section = ['body', 'header', 'footer', 'details'].find(\n        (section) => cell.getAttribute('part').indexOf(section) > -1,\n      );\n\n      if (cell._column) {\n        context.column = cell._column;\n      }\n\n      if (context.section === 'body' || context.section === 'details') {\n        Object.assign(context, this.__getRowModel(cell.parentElement));\n      }\n\n      return context;\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const FilterMixin = (superClass) =>\n  class FilterMixin extends superClass {\n    static get properties() {\n      return {\n        /** @private */\n        _filters: {\n          type: Array,\n          value: () => [],\n        },\n      };\n    }\n\n    constructor() {\n      super();\n      this._filterChanged = this._filterChanged.bind(this);\n      this.addEventListener('filter-changed', this._filterChanged);\n    }\n\n    /** @private */\n    _filterChanged(e) {\n      e.stopPropagation();\n\n      this.__addFilter(e.target);\n      this.__applyFilters();\n    }\n\n    /** @private */\n    __removeFilters(filtersToRemove) {\n      if (filtersToRemove.length === 0) {\n        return;\n      }\n\n      this._filters = this._filters.filter((filter) => filtersToRemove.indexOf(filter) < 0);\n      this.__applyFilters();\n    }\n\n    /** @private */\n    __addFilter(filter) {\n      const filterIndex = this._filters.indexOf(filter);\n\n      if (filterIndex === -1) {\n        this._filters.push(filter);\n      }\n    }\n\n    /** @private */\n    __applyFilters() {\n      if (this.dataProvider && this.isAttached) {\n        this.clearCache();\n      }\n    }\n\n    /**\n     * @return {!Array<!GridFilterDefinition>}\n     * @protected\n     */\n    _mapFilters() {\n      return this._filters.map((filter) => {\n        return {\n          path: filter.path,\n          value: filter.value,\n        };\n      });\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isKeyboardActive } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { addValueToAttribute, removeValueFromAttribute } from '@vaadin/component-base/src/dom-utils.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\n\n/**\n * @polymerMixin\n */\nexport const KeyboardNavigationMixin = (superClass) =>\n  class KeyboardNavigationMixin extends superClass {\n    static get properties() {\n      return {\n        /** @private */\n        _headerFocusable: {\n          type: Object,\n          observer: '_focusableChanged',\n          sync: true,\n        },\n\n        /**\n         * @type {!HTMLElement | undefined}\n         * @protected\n         */\n        _itemsFocusable: {\n          type: Object,\n          observer: '_focusableChanged',\n          sync: true,\n        },\n\n        /** @private */\n        _footerFocusable: {\n          type: Object,\n          observer: '_focusableChanged',\n          sync: true,\n        },\n\n        /** @private */\n        _navigatingIsHidden: Boolean,\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _focusedItemIndex: {\n          type: Number,\n          value: 0,\n        },\n\n        /** @private */\n        _focusedColumnOrder: Number,\n\n        /** @private */\n        _focusedCell: {\n          type: Object,\n          observer: '_focusedCellChanged',\n          sync: true,\n        },\n\n        /**\n         * Indicates whether the grid is currently in interaction mode.\n         * In interaction mode the user is currently interacting with a control,\n         * such as an input or a select, within a cell.\n         * In interaction mode keyboard navigation between cells is disabled.\n         * Interaction mode also prevents the focus target cell of that section of\n         * the grid from receiving focus, allowing the user to switch focus to\n         * controls in adjacent cells, rather than focussing the outer cell\n         * itself.\n         * @type {boolean}\n         * @private\n         */\n        interacting: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n          readOnly: true,\n          observer: '_interactingChanged',\n        },\n      };\n    }\n\n    /** @private */\n    get __rowFocusMode() {\n      return (\n        this.__isRow(this._itemsFocusable) || this.__isRow(this._headerFocusable) || this.__isRow(this._footerFocusable)\n      );\n    }\n\n    set __rowFocusMode(value) {\n      ['_itemsFocusable', '_footerFocusable', '_headerFocusable'].forEach((prop) => {\n        const focusable = this[prop];\n        if (value) {\n          const parent = focusable && focusable.parentElement;\n          if (this.__isCell(focusable)) {\n            // Cell itself focusable (default)\n            this[prop] = parent;\n          } else if (this.__isCell(parent)) {\n            // Focus button mode is enabled for the column,\n            // button element inside the cell is focusable.\n            this[prop] = parent.parentElement;\n          }\n        } else if (!value && this.__isRow(focusable)) {\n          const cell = focusable.firstElementChild;\n          this[prop] = cell._focusButton || cell;\n        }\n      });\n    }\n\n    /** @private */\n    get _visibleItemsCount() {\n      return this._lastVisibleIndex - this._firstVisibleIndex - 1;\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      if (this._ios || this._android) {\n        // Disable keyboard navigation on mobile devices\n        return;\n      }\n\n      this.addEventListener('keydown', this._onKeyDown);\n      this.addEventListener('keyup', this._onKeyUp);\n\n      this.addEventListener('focusin', this._onFocusIn);\n      this.addEventListener('focusout', this._onFocusOut);\n\n      // When focus goes from cell to another cell, focusin/focusout events do\n      // not escape the grid's shadowRoot, thus listening inside the shadowRoot.\n      this.$.table.addEventListener('focusin', this._onContentFocusIn.bind(this));\n\n      this.addEventListener('mousedown', () => {\n        this.toggleAttribute('navigating', false);\n        this._isMousedown = true;\n\n        // Reset stored order when moving focus with mouse.\n        this._focusedColumnOrder = undefined;\n      });\n      this.addEventListener('mouseup', () => {\n        this._isMousedown = false;\n      });\n    }\n\n    /** @private */\n    _focusableChanged(focusable, oldFocusable) {\n      if (oldFocusable) {\n        oldFocusable.setAttribute('tabindex', '-1');\n      }\n      if (focusable) {\n        this._updateGridSectionFocusTarget(focusable);\n      }\n    }\n\n    /** @private */\n    _focusedCellChanged(focusedCell, oldFocusedCell) {\n      if (oldFocusedCell) {\n        removeValueFromAttribute(oldFocusedCell, 'part', 'focused-cell');\n      }\n\n      if (focusedCell) {\n        addValueToAttribute(focusedCell, 'part', 'focused-cell');\n      }\n    }\n\n    /** @private */\n    _interactingChanged() {\n      // Update focus targets when entering / exiting interaction mode\n      this._updateGridSectionFocusTarget(this._headerFocusable);\n      this._updateGridSectionFocusTarget(this._itemsFocusable);\n      this._updateGridSectionFocusTarget(this._footerFocusable);\n    }\n\n    /**\n     * Since the focused cell/row state is stored as an element reference, the reference may get\n     * out of sync when the virtual indexes for elements update due to effective size change.\n     * This function updates the reference to the correct element after a possible index change.\n     * @private\n     */\n    __updateItemsFocusable() {\n      if (!this._itemsFocusable) {\n        return;\n      }\n\n      const wasFocused = this.shadowRoot.activeElement === this._itemsFocusable;\n\n      this._getRenderedRows().forEach((row) => {\n        if (row.index === this._focusedItemIndex) {\n          if (this.__rowFocusMode) {\n            // Row focus mode\n            this._itemsFocusable = row;\n          } else {\n            // Cell focus mode\n            let parent = this._itemsFocusable.parentElement;\n            let cell = this._itemsFocusable;\n\n            if (parent) {\n              // Focus button mode is enabled for the column,\n              // button element inside the cell is focusable.\n              if (this.__isCell(parent)) {\n                cell = parent;\n                parent = parent.parentElement;\n              }\n\n              const cellIndex = [...parent.children].indexOf(cell);\n              this._itemsFocusable = this.__getFocusable(row, row.children[cellIndex]);\n            }\n          }\n        }\n      });\n\n      if (wasFocused) {\n        this._itemsFocusable.focus();\n      }\n    }\n\n    /**\n     * @param {!KeyboardEvent} e\n     * @protected\n     */\n    _onKeyDown(e) {\n      const key = e.key;\n\n      let keyGroup;\n      switch (key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'PageUp':\n        case 'PageDown':\n        case 'Home':\n        case 'End':\n          keyGroup = 'Navigation';\n          break;\n        case 'Enter':\n        case 'Escape':\n        case 'F2':\n          keyGroup = 'Interaction';\n          break;\n        case 'Tab':\n          keyGroup = 'Tab';\n          break;\n        case ' ':\n          keyGroup = 'Space';\n          break;\n        default:\n          break;\n      }\n\n      this._detectInteracting(e);\n      if (this.interacting && keyGroup !== 'Interaction') {\n        // When in the interacting mode, only the \"Interaction\" keys are handled.\n        keyGroup = undefined;\n      }\n\n      if (keyGroup) {\n        this[`_on${keyGroup}KeyDown`](e, key);\n      }\n    }\n\n    /** @private */\n    _ensureScrolledToIndex(index) {\n      const targetRowInDom = [...this.$.items.children].find((child) => child.index === index);\n      if (!targetRowInDom) {\n        this.scrollToIndex(index);\n      } else {\n        this.__scrollIntoViewport(index);\n      }\n    }\n\n    /** @private */\n    __isRowExpandable(row) {\n      if (this.itemHasChildrenPath) {\n        const item = row._item;\n        return !!(item && get(this.itemHasChildrenPath, item) && !this._isExpanded(item));\n      }\n    }\n\n    /** @private */\n    __isRowCollapsible(row) {\n      return this._isExpanded(row._item);\n    }\n\n    /** @private */\n    __isDetailsCell(element) {\n      return element.matches('[part~=\"details-cell\"]');\n    }\n\n    /** @private */\n    __isCell(element) {\n      return element instanceof HTMLTableCellElement;\n    }\n\n    /** @private */\n    __isRow(element) {\n      return element instanceof HTMLTableRowElement;\n    }\n\n    /** @private */\n    __getIndexOfChildElement(el) {\n      return Array.prototype.indexOf.call(el.parentNode.children, el);\n    }\n\n    /** @private */\n    _onNavigationKeyDown(e, key) {\n      e.preventDefault();\n\n      const isRTL = this.__isRTL;\n      const activeRow = e.composedPath().find((el) => this.__isRow(el));\n      const activeCell = e.composedPath().find((el) => this.__isCell(el));\n\n      // Handle keyboard interaction as defined in:\n      // https://w3c.github.io/aria-practices/#keyboard-interaction-24\n\n      let dx = 0,\n        dy = 0;\n      switch (key) {\n        case 'ArrowRight':\n          dx = isRTL ? -1 : 1;\n          break;\n        case 'ArrowLeft':\n          dx = isRTL ? 1 : -1;\n          break;\n        case 'Home':\n          if (this.__rowFocusMode) {\n            // \"If focus is on a row, moves focus to the first row. If focus is in the first row, focus does not move.\"\n            dy = -Infinity;\n          } else if (e.ctrlKey) {\n            // \"If focus is on a cell, moves focus to the first cell in the column. If focus is in the first row, focus does not move.\"\n            dy = -Infinity;\n          } else {\n            // \"If focus is on a cell, moves focus to the first cell in the row. If focus is in the first cell of the row, focus does not move.\"\n            dx = -Infinity;\n          }\n          break;\n        case 'End':\n          if (this.__rowFocusMode) {\n            // \"If focus is on a row, moves focus to the last row. If focus is in the last row, focus does not move.\"\n            dy = Infinity;\n          } else if (e.ctrlKey) {\n            // \"If focus is on a cell, moves focus to the last cell in the column. If focus is in the last row, focus does not move.\"\n            dy = Infinity;\n          } else {\n            // \"If focus is on a cell, moves focus to the last cell in the row. If focus is in the last cell of the row, focus does not move.\"\n            dx = Infinity;\n          }\n          break;\n        case 'ArrowDown':\n          dy = 1;\n          break;\n        case 'ArrowUp':\n          dy = -1;\n          break;\n        case 'PageDown':\n          // Check if the active group is body\n          if (this.$.items.contains(activeRow)) {\n            const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\n            // Scroll the current row to the top...\n            this._scrollToFlatIndex(currentRowIndex);\n          }\n          // ...only then measure the visible items count\n          dy = this._visibleItemsCount;\n          break;\n        case 'PageUp':\n          dy = -this._visibleItemsCount;\n          break;\n        default:\n          break;\n      }\n\n      if ((this.__rowFocusMode && !activeRow) || (!this.__rowFocusMode && !activeCell)) {\n        // When using a screen reader, it's possible that neither a cell nor a row is focused.\n        return;\n      }\n\n      const forwardsKey = isRTL ? 'ArrowLeft' : 'ArrowRight';\n      const backwardsKey = isRTL ? 'ArrowRight' : 'ArrowLeft';\n      if (key === forwardsKey) {\n        // \"Right Arrow:\"\n        if (this.__rowFocusMode) {\n          // In row focus mode\n          if (this.__isRowExpandable(activeRow)) {\n            // \"If focus is on a collapsed row, expands the row.\"\n            this.expandItem(activeRow._item);\n            return;\n          }\n          // \"If focus is on an expanded row or is on a row that does not have child rows,\n          // moves focus to the first cell in the row.\"\n          this.__rowFocusMode = false;\n          this._onCellNavigation(activeRow.firstElementChild, 0, 0);\n          return;\n        }\n      } else if (key === backwardsKey) {\n        // \"Left Arrow:\"\n        if (this.__rowFocusMode) {\n          // In row focus mode\n          if (this.__isRowCollapsible(activeRow)) {\n            // \"If focus is on an expanded row, collapses the row.\"\n            this.collapseItem(activeRow._item);\n            return;\n          }\n        } else {\n          // In cell focus mode\n          const activeRowCells = [...activeRow.children].sort((a, b) => a._order - b._order);\n          if (activeCell === activeRowCells[0] || this.__isDetailsCell(activeCell)) {\n            // \"If focus is on the first cell in a row and row focus is supported, moves focus to the row.\"\n            this.__rowFocusMode = true;\n            this._onRowNavigation(activeRow, 0);\n            return;\n          }\n        }\n      }\n\n      // Navigate\n      if (this.__rowFocusMode) {\n        // Navigate the rows\n        this._onRowNavigation(activeRow, dy);\n      } else {\n        // Navigate the cells\n        this._onCellNavigation(activeCell, dx, dy);\n      }\n    }\n\n    /**\n     * Focuses the target row after navigating by the given dy offset.\n     * If the row is not in the viewport, it is first scrolled to.\n     * @private\n     */\n    _onRowNavigation(activeRow, dy) {\n      const { dstRow } = this.__navigateRows(dy, activeRow);\n\n      if (dstRow) {\n        dstRow.focus();\n      }\n    }\n\n    /** @private */\n    __getIndexInGroup(row, bodyFallbackIndex) {\n      const rowGroup = row.parentNode;\n      // Body rows have index property, otherwise DOM child index of the row is used.\n      if (rowGroup === this.$.items) {\n        return bodyFallbackIndex !== undefined ? bodyFallbackIndex : row.index;\n      }\n      return this.__getIndexOfChildElement(row);\n    }\n\n    /**\n     * Returns the target row after navigating by the given dy offset.\n     * Also returns information whether the details cell should be the target on the target row.\n     * If the row is not in the viewport, it is first scrolled to.\n     * @private\n     */\n    __navigateRows(dy, activeRow, activeCell) {\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\n      const activeRowGroup = activeRow.parentNode;\n      const maxRowIndex = (activeRowGroup === this.$.items ? this._flatSize : activeRowGroup.children.length) - 1;\n\n      // Index of the destination row\n      let dstRowIndex = Math.max(0, Math.min(currentRowIndex + dy, maxRowIndex));\n\n      if (activeRowGroup !== this.$.items) {\n        // Navigating header/footer rows\n\n        // Header and footer could have hidden rows, e. g., if none of the columns\n        // or groups on the given column tree level define template. Skip them\n        // in vertical keyboard navigation.\n        if (dstRowIndex > currentRowIndex) {\n          while (dstRowIndex < maxRowIndex && activeRowGroup.children[dstRowIndex].hidden) {\n            dstRowIndex += 1;\n          }\n        } else if (dstRowIndex < currentRowIndex) {\n          while (dstRowIndex > 0 && activeRowGroup.children[dstRowIndex].hidden) {\n            dstRowIndex -= 1;\n          }\n        }\n\n        this.toggleAttribute('navigating', true);\n\n        return { dstRow: activeRowGroup.children[dstRowIndex] };\n      }\n      // Navigating body rows\n\n      let dstIsRowDetails = false;\n      if (activeCell) {\n        const isRowDetails = this.__isDetailsCell(activeCell);\n        // Row details navigation logic\n        if (activeRowGroup === this.$.items) {\n          const item = activeRow._item;\n          const { item: dstItem } = this._dataProviderController.getFlatIndexContext(dstRowIndex);\n          // Should we navigate to row details?\n          if (isRowDetails) {\n            dstIsRowDetails = dy === 0;\n          } else {\n            dstIsRowDetails =\n              (dy === 1 && this._isDetailsOpened(item)) ||\n              (dy === -1 && dstRowIndex !== currentRowIndex && this._isDetailsOpened(dstItem));\n          }\n          // Should we navigate between details and regular cells of the same row?\n          if (dstIsRowDetails !== isRowDetails && ((dy === 1 && dstIsRowDetails) || (dy === -1 && !dstIsRowDetails))) {\n            dstRowIndex = currentRowIndex;\n          }\n        }\n      }\n\n      // Ensure correct vertical scroll position, destination row is visible\n      this._ensureScrolledToIndex(dstRowIndex);\n\n      // When scrolling with repeated keydown, sometimes FocusEvent listeners\n      // are too late to update _focusedItemIndex. Ensure next keydown\n      // listener invocation gets updated _focusedItemIndex value.\n      this._focusedItemIndex = dstRowIndex;\n\n      // This has to be set after scrolling, otherwise it can be removed by\n      // `_preventScrollerRotatingCellFocus(row, index)` during scrolling.\n      this.toggleAttribute('navigating', true);\n\n      return {\n        dstRow: [...activeRowGroup.children].find((el) => !el.hidden && el.index === dstRowIndex),\n        dstIsRowDetails,\n      };\n    }\n\n    /**\n     * Focuses the target cell after navigating by the given dx and dy offset.\n     * If the cell is not in the viewport, it is first scrolled to.\n     * @private\n     */\n    _onCellNavigation(activeCell, dx, dy) {\n      const activeRow = activeCell.parentNode;\n      const { dstRow, dstIsRowDetails } = this.__navigateRows(dy, activeRow, activeCell);\n      if (!dstRow) {\n        return;\n      }\n\n      let columnIndex = this.__getIndexOfChildElement(activeCell);\n      if (this.$.items.contains(activeCell)) {\n        // lazy column rendering may be enabled, so we need use the always visible sizer cells to find the column index\n        columnIndex = [...this.$.sizer.children].findIndex((sizerCell) => sizerCell._column === activeCell._column);\n      }\n\n      const isCurrentCellRowDetails = this.__isDetailsCell(activeCell);\n      const activeRowGroup = activeRow.parentNode;\n      const currentRowIndex = this.__getIndexInGroup(activeRow, this._focusedItemIndex);\n\n      // _focusedColumnOrder is memoized - this is to ensure predictable\n      // navigation when entering and leaving detail and column group cells.\n      if (this._focusedColumnOrder === undefined) {\n        if (isCurrentCellRowDetails) {\n          this._focusedColumnOrder = 0;\n        } else {\n          this._focusedColumnOrder = this._getColumns(activeRowGroup, currentRowIndex).filter((c) => !c.hidden)[\n            columnIndex\n          ]._order;\n        }\n      }\n\n      if (dstIsRowDetails) {\n        // Focusing a row details cell on the destination row\n        const dstCell = [...dstRow.children].find((el) => this.__isDetailsCell(el));\n        dstCell.focus();\n      } else {\n        // Focusing a regular cell on the destination row\n\n        // Find orderedColumnIndex - the index of order closest matching the\n        // original _focusedColumnOrder in the sorted array of orders\n        // of the visible columns on the destination row.\n        const dstRowIndex = this.__getIndexInGroup(dstRow, this._focusedItemIndex);\n        const dstColumns = this._getColumns(activeRowGroup, dstRowIndex).filter((c) => !c.hidden);\n        const dstSortedColumnOrders = dstColumns.map((c) => c._order).sort((b, a) => b - a);\n        const maxOrderedColumnIndex = dstSortedColumnOrders.length - 1;\n        const orderedColumnIndex = dstSortedColumnOrders.indexOf(\n          dstSortedColumnOrders\n            .slice(0)\n            .sort((b, a) => Math.abs(b - this._focusedColumnOrder) - Math.abs(a - this._focusedColumnOrder))[0],\n        );\n\n        // Index of the destination column order\n        const dstOrderedColumnIndex =\n          dy === 0 && isCurrentCellRowDetails\n            ? orderedColumnIndex\n            : Math.max(0, Math.min(orderedColumnIndex + dx, maxOrderedColumnIndex));\n\n        if (dstOrderedColumnIndex !== orderedColumnIndex) {\n          // Horizontal movement invalidates stored _focusedColumnOrder\n          this._focusedColumnOrder = undefined;\n        }\n\n        const columnIndexByOrder = dstColumns.reduce((acc, col, i) => {\n          acc[col._order] = i;\n          return acc;\n        }, {});\n        const dstColumnIndex = columnIndexByOrder[dstSortedColumnOrders[dstOrderedColumnIndex]];\n\n        let dstCell;\n        if (this.$.items.contains(activeCell)) {\n          const dstSizerCell = this.$.sizer.children[dstColumnIndex];\n          if (this._lazyColumns) {\n            // If the column is not in the viewport, scroll it into view.\n            if (!this.__isColumnInViewport(dstSizerCell._column)) {\n              dstSizerCell.scrollIntoView();\n            }\n            this.__updateColumnsBodyContentHidden();\n            this.__updateHorizontalScrollPosition();\n          }\n\n          dstCell = [...dstRow.children].find((cell) => cell._column === dstSizerCell._column);\n          // Ensure correct horizontal scroll position once the destination cell is available.\n          this._scrollHorizontallyToCell(dstCell);\n        } else {\n          dstCell = dstRow.children[dstColumnIndex];\n          this._scrollHorizontallyToCell(dstCell);\n        }\n\n        dstCell.focus();\n      }\n    }\n\n    /** @private */\n    _onInteractionKeyDown(e, key) {\n      const localTarget = e.composedPath()[0];\n      const localTargetIsTextInput =\n        localTarget.localName === 'input' &&\n        !/^(button|checkbox|color|file|image|radio|range|reset|submit)$/iu.test(localTarget.type);\n\n      let wantInteracting;\n      switch (key) {\n        case 'Enter':\n          wantInteracting = this.interacting ? !localTargetIsTextInput : true;\n          break;\n        case 'Escape':\n          wantInteracting = false;\n          break;\n        case 'F2':\n          wantInteracting = !this.interacting;\n          break;\n        default:\n          break;\n      }\n\n      const { cell } = this._getGridEventLocation(e);\n\n      if (this.interacting !== wantInteracting && cell !== null) {\n        if (wantInteracting) {\n          const focusTarget =\n            cell._content.querySelector('[focus-target]') ||\n            // If a child element hasn't been explicitly marked as a focus target,\n            // fall back to any focusable element inside the cell.\n            [...cell._content.querySelectorAll('*')].find((node) => this._isFocusable(node));\n          if (focusTarget) {\n            e.preventDefault();\n            focusTarget.focus();\n            this._setInteracting(true);\n            this.toggleAttribute('navigating', false);\n          }\n        } else {\n          e.preventDefault();\n          this._focusedColumnOrder = undefined;\n          cell.focus();\n          this._setInteracting(false);\n          this.toggleAttribute('navigating', true);\n        }\n      }\n\n      if (key === 'Escape') {\n        this._hideTooltip(true);\n      }\n    }\n\n    /** @private */\n    _predictFocusStepTarget(srcElement, step) {\n      const tabOrder = [\n        this.$.table,\n        this._headerFocusable,\n        this._itemsFocusable,\n        this._footerFocusable,\n        this.$.focusexit,\n      ];\n\n      let index = tabOrder.indexOf(srcElement);\n\n      index += step;\n      while (index >= 0 && index <= tabOrder.length - 1) {\n        let rowElement = tabOrder[index];\n        if (rowElement && !this.__rowFocusMode) {\n          rowElement = tabOrder[index].parentNode;\n        }\n\n        if (!rowElement || rowElement.hidden) {\n          index += step;\n        } else {\n          break;\n        }\n      }\n\n      let focusStepTarget = tabOrder[index];\n\n      // If the target focusable is tied to a column that is not visible,\n      // find the first visible column and update the target in order to\n      // prevent scrolling to the start of the row.\n      if (focusStepTarget && !this.__isHorizontallyInViewport(focusStepTarget)) {\n        const firstVisibleColumn = this._getColumnsInOrder().find((column) => this.__isColumnInViewport(column));\n        if (firstVisibleColumn) {\n          if (focusStepTarget === this._headerFocusable) {\n            focusStepTarget = firstVisibleColumn._headerCell;\n          } else if (focusStepTarget === this._itemsFocusable) {\n            const rowIndex = focusStepTarget._column._cells.indexOf(focusStepTarget);\n            focusStepTarget = firstVisibleColumn._cells[rowIndex];\n          } else if (focusStepTarget === this._footerFocusable) {\n            focusStepTarget = firstVisibleColumn._footerCell;\n          }\n        }\n      }\n\n      return focusStepTarget;\n    }\n\n    /** @private */\n    _onTabKeyDown(e) {\n      const focusTarget = this._predictFocusStepTarget(e.composedPath()[0], e.shiftKey ? -1 : 1);\n\n      // Can be undefined if grid has tabindex\n      if (!focusTarget) {\n        return;\n      }\n\n      // Prevent focus-trap logic from intercepting the event.\n      e.stopPropagation();\n\n      if (focusTarget === this.$.table) {\n        // The focus is about to exit the grid to the top.\n        this.$.table.focus();\n      } else if (focusTarget === this.$.focusexit) {\n        // The focus is about to exit the grid to the bottom.\n        this.$.focusexit.focus();\n      } else if (focusTarget === this._itemsFocusable) {\n        let itemsFocusTarget = focusTarget;\n        const targetRow = this.__isRow(focusTarget) ? focusTarget : focusTarget.parentNode;\n        this._ensureScrolledToIndex(this._focusedItemIndex);\n        if (targetRow.index !== this._focusedItemIndex && this.__isCell(focusTarget)) {\n          // The target row, which is about to be focused next, has been\n          // assigned with a new index since last focus, probably because of\n          // scrolling. Focus the row for the stored focused item index instead.\n          const columnIndex = Array.from(targetRow.children).indexOf(this._itemsFocusable);\n          const focusedItemRow = Array.from(this.$.items.children).find(\n            (row) => !row.hidden && row.index === this._focusedItemIndex,\n          );\n          if (focusedItemRow) {\n            itemsFocusTarget = focusedItemRow.children[columnIndex];\n          }\n        }\n        e.preventDefault();\n        itemsFocusTarget.focus();\n      } else {\n        e.preventDefault();\n        focusTarget.focus();\n      }\n\n      this.toggleAttribute('navigating', true);\n    }\n\n    /** @private */\n    _onSpaceKeyDown(e) {\n      e.preventDefault();\n\n      const element = e.composedPath()[0];\n      const isRow = this.__isRow(element);\n      if (isRow || !element._content || !element._content.firstElementChild) {\n        this.dispatchEvent(\n          new CustomEvent(isRow ? 'row-activate' : 'cell-activate', {\n            detail: {\n              model: this.__getRowModel(isRow ? element : element.parentElement),\n            },\n          }),\n        );\n      }\n    }\n\n    /** @private */\n    _onKeyUp(e) {\n      if (!/^( |SpaceBar)$/u.test(e.key) || this.interacting) {\n        return;\n      }\n\n      e.preventDefault();\n\n      const cell = e.composedPath()[0];\n      if (cell._content && cell._content.firstElementChild) {\n        const wasNavigating = this.hasAttribute('navigating');\n        cell._content.firstElementChild.dispatchEvent(\n          new MouseEvent('click', {\n            shiftKey: e.shiftKey,\n            bubbles: true,\n            composed: true,\n            cancelable: true,\n          }),\n        );\n        this.toggleAttribute('navigating', wasNavigating);\n      }\n    }\n\n    /**\n     * @param {!FocusEvent} e\n     * @protected\n     */\n    _onFocusIn(e) {\n      if (!this._isMousedown) {\n        this.toggleAttribute('navigating', true);\n      }\n\n      const rootTarget = e.composedPath()[0];\n\n      if (rootTarget === this.$.table || rootTarget === this.$.focusexit) {\n        // The focus enters the top (bottom) of the grid, meaning that user has\n        // tabbed (shift-tabbed) into the grid. Move the focus to\n        // the first (the last) focusable.\n        this._predictFocusStepTarget(rootTarget, rootTarget === this.$.table ? 1 : -1).focus();\n        this._setInteracting(false);\n      } else {\n        this._detectInteracting(e);\n      }\n    }\n\n    /**\n     * @param {!FocusEvent} e\n     * @protected\n     */\n    _onFocusOut(e) {\n      this.toggleAttribute('navigating', false);\n      this._detectInteracting(e);\n      this._hideTooltip();\n      this._focusedCell = null;\n    }\n\n    /** @private */\n    _onContentFocusIn(e) {\n      const { section, cell, row } = this._getGridEventLocation(e);\n\n      if (!cell && !this.__rowFocusMode) {\n        return;\n      }\n\n      this._detectInteracting(e);\n\n      if (section && (cell || row)) {\n        this._activeRowGroup = section;\n        if (this.$.header === section) {\n          this._headerFocusable = this.__getFocusable(row, cell);\n        } else if (this.$.items === section) {\n          this._itemsFocusable = this.__getFocusable(row, cell);\n        } else if (this.$.footer === section) {\n          this._footerFocusable = this.__getFocusable(row, cell);\n        }\n\n        if (cell) {\n          const context = this.getEventContext(e);\n          this.__pendingBodyCellFocus = this.loading && context.section === 'body';\n          if (!this.__pendingBodyCellFocus) {\n            // Fire a cell-focus event for the cell\n            cell.dispatchEvent(new CustomEvent('cell-focus', { bubbles: true, composed: true, detail: { context } }));\n          }\n          this._focusedCell = cell._focusButton || cell;\n\n          if (isKeyboardActive() && e.target === cell) {\n            this._showTooltip(e);\n          }\n        } else {\n          this._focusedCell = null;\n        }\n      }\n\n      this._detectFocusedItemIndex(e);\n    }\n\n    /**\n     * @private\n     */\n    __dispatchPendingBodyCellFocus() {\n      // If the body cell focus was pending, dispatch the event once loading is done\n      if (this.__pendingBodyCellFocus && this.shadowRoot.activeElement === this._itemsFocusable) {\n        this._itemsFocusable.dispatchEvent(new Event('focusin', { bubbles: true, composed: true }));\n      }\n    }\n\n    /**\n     * Get the focusable element depending on the current focus mode.\n     * It can be a row, a cell, or a focusable div inside a cell.\n     *\n     * @param {HTMLElement} row\n     * @param {HTMLElement} cell\n     * @return {HTMLElement}\n     * @private\n     */\n    __getFocusable(row, cell) {\n      return this.__rowFocusMode ? row : cell._focusButton || cell;\n    }\n\n    /**\n     * Enables interaction mode if a cells descendant receives focus or keyboard\n     * input. Disables it if the event is not related to cell content.\n     * @param {!KeyboardEvent|!FocusEvent} e\n     * @private\n     */\n    _detectInteracting(e) {\n      const isInteracting = e.composedPath().some((el) => el.localName === 'vaadin-grid-cell-content');\n      this._setInteracting(isInteracting);\n      this.__updateHorizontalScrollPosition();\n    }\n\n    /** @private */\n    _detectFocusedItemIndex(e) {\n      const { section, row } = this._getGridEventLocation(e);\n      if (section === this.$.items) {\n        this._focusedItemIndex = row.index;\n      }\n    }\n\n    /**\n     * Enables or disables the focus target of the containing section of the\n     * grid from receiving focus, based on whether the user is interacting with\n     * that section of the grid.\n     * @param {HTMLElement} focusTarget\n     * @private\n     */\n    _updateGridSectionFocusTarget(focusTarget) {\n      if (!focusTarget) {\n        return;\n      }\n\n      const section = this._getGridSectionFromFocusTarget(focusTarget);\n      const isInteractingWithinActiveSection = this.interacting && section === this._activeRowGroup;\n\n      focusTarget.tabIndex = isInteractingWithinActiveSection ? -1 : 0;\n    }\n\n    /**\n     * @param {!HTMLTableRowElement} row\n     * @param {number} index\n     * @protected\n     */\n    _preventScrollerRotatingCellFocus(row, index) {\n      if (\n        row.index === this._focusedItemIndex &&\n        this.hasAttribute('navigating') &&\n        this._activeRowGroup === this.$.items\n      ) {\n        // Focused item has went, hide navigation mode\n        this._navigatingIsHidden = true;\n        this.toggleAttribute('navigating', false);\n      }\n      if (index === this._focusedItemIndex && this._navigatingIsHidden) {\n        // Focused item is back, restore navigation mode\n        this._navigatingIsHidden = false;\n        this.toggleAttribute('navigating', true);\n      }\n    }\n\n    /**\n     * @param {HTMLTableSectionElement=} rowGroup\n     * @param {number=} rowIndex\n     * @return {!Array<!GridColumn>}\n     * @protected\n     */\n    _getColumns(rowGroup, rowIndex) {\n      let columnTreeLevel = this._columnTree.length - 1;\n      if (rowGroup === this.$.header) {\n        columnTreeLevel = rowIndex;\n      } else if (rowGroup === this.$.footer) {\n        columnTreeLevel = this._columnTree.length - 1 - rowIndex;\n      }\n      return this._columnTree[columnTreeLevel];\n    }\n\n    /** @private */\n    __isValidFocusable(element) {\n      return this.$.table.contains(element) && element.offsetHeight;\n    }\n\n    /** @protected */\n    _resetKeyboardNavigation() {\n      if (!this.$ && this.performUpdate) {\n        this.performUpdate();\n      }\n      // Header / footer\n      ['header', 'footer'].forEach((section) => {\n        if (!this.__isValidFocusable(this[`_${section}Focusable`])) {\n          const firstVisibleRow = [...this.$[section].children].find((row) => row.offsetHeight);\n          const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\n          if (firstVisibleRow && firstVisibleCell) {\n            this[`_${section}Focusable`] = this.__getFocusable(firstVisibleRow, firstVisibleCell);\n          }\n        }\n      });\n\n      // Body\n      if (!this.__isValidFocusable(this._itemsFocusable) && this.$.items.firstElementChild) {\n        const firstVisibleRow = this.__getFirstVisibleItem();\n        const firstVisibleCell = firstVisibleRow ? [...firstVisibleRow.children].find((cell) => !cell.hidden) : null;\n\n        if (firstVisibleCell && firstVisibleRow) {\n          // Reset memoized column\n          this._focusedColumnOrder = undefined;\n          this._itemsFocusable = this.__getFocusable(firstVisibleRow, firstVisibleCell);\n        }\n      } else {\n        this.__updateItemsFocusable();\n      }\n    }\n\n    /**\n     * @param {!HTMLElement} dstCell\n     * @protected\n     */\n    _scrollHorizontallyToCell(dstCell) {\n      if (dstCell.hasAttribute('frozen') || dstCell.hasAttribute('frozen-to-end') || this.__isDetailsCell(dstCell)) {\n        // These cells are, by design, always visible, no need to scroll.\n        return;\n      }\n\n      const dstCellRect = dstCell.getBoundingClientRect();\n      const dstRow = dstCell.parentNode;\n      const dstCellIndex = Array.from(dstRow.children).indexOf(dstCell);\n      const tableRect = this.$.table.getBoundingClientRect();\n      let leftBoundary = tableRect.left,\n        rightBoundary = tableRect.right;\n      for (let i = dstCellIndex - 1; i >= 0; i--) {\n        const cell = dstRow.children[i];\n        if (cell.hasAttribute('hidden') || this.__isDetailsCell(cell)) {\n          continue;\n        }\n        if (cell.hasAttribute('frozen') || cell.hasAttribute('frozen-to-end')) {\n          leftBoundary = cell.getBoundingClientRect().right;\n          break;\n        }\n      }\n      for (let i = dstCellIndex + 1; i < dstRow.children.length; i++) {\n        const cell = dstRow.children[i];\n        if (cell.hasAttribute('hidden') || this.__isDetailsCell(cell)) {\n          continue;\n        }\n        if (cell.hasAttribute('frozen') || cell.hasAttribute('frozen-to-end')) {\n          rightBoundary = cell.getBoundingClientRect().left;\n          break;\n        }\n      }\n\n      if (dstCellRect.left < leftBoundary) {\n        this.$.table.scrollLeft += Math.round(dstCellRect.left - leftBoundary);\n      }\n      if (dstCellRect.right > rightBoundary) {\n        this.$.table.scrollLeft += Math.round(dstCellRect.right - rightBoundary);\n      }\n    }\n\n    /**\n     * @typedef {Object} GridEventLocation\n     * @property {HTMLTableSectionElement | null} section - The table section element that the event occurred in (header, body, or footer), or null if the event did not occur in a section\n     * @property {HTMLTableRowElement | null} row - The row element that the event occurred in, or null if the event did not occur in a row\n     * @property {HTMLTableCellElement | null} cell - The cell element that the event occurred in, or null if the event did not occur in a cell\n     * @private\n     */\n    /**\n     * Takes an event and returns a location object describing in which part of the grid the event occurred.\n     * The event may either target table section, a row, a cell or contents of a cell.\n     * @param {Event} e\n     * @returns {GridEventLocation}\n     * @private\n     */\n    _getGridEventLocation(e) {\n      const path = e.composedPath();\n      const tableIndex = path.indexOf(this.$.table);\n      // Assuming ascending path to table is: [...,] th|td, tr, thead|tbody, table [,...]\n      const section = tableIndex >= 1 ? path[tableIndex - 1] : null;\n      const row = tableIndex >= 2 ? path[tableIndex - 2] : null;\n      const cell = tableIndex >= 3 ? path[tableIndex - 3] : null;\n\n      return {\n        section,\n        row,\n        cell,\n      };\n    }\n\n    /**\n     * Helper method that maps a focus target cell to the containing grid section\n     * @param {HTMLElement} focusTarget\n     * @returns {HTMLTableSectionElement | null}\n     * @private\n     */\n    _getGridSectionFromFocusTarget(focusTarget) {\n      if (focusTarget === this._headerFocusable) {\n        return this.$.header;\n      }\n      if (focusTarget === this._itemsFocusable) {\n        return this.$.items;\n      }\n      if (focusTarget === this._footerFocusable) {\n        return this.$.footer;\n      }\n      return null;\n    }\n\n    /**\n     * Fired when a cell is focused with click or keyboard navigation.\n     *\n     * Use context property of @see {@link GridCellFocusEvent} to get detail information about the event.\n     *\n     * @event cell-focus\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const RowDetailsMixin = (superClass) =>\n  class RowDetailsMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array containing references to items with open row details.\n         * @type {!Array<!GridItem>}\n         */\n        detailsOpenedItems: {\n          type: Array,\n          value: () => [],\n          sync: true,\n        },\n\n        /**\n         * Custom function for rendering the content of the row details.\n         * Receives three arguments:\n         *\n         * - `root` The row details content DOM element. Append your content to it.\n         * - `grid` The `<vaadin-grid>` element.\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.level` The number of the item's tree sublevel, starts from 0.\n         *   - `model.expanded` True if the item's tree sublevel is expanded.\n         *   - `model.selected` True if the item is selected.\n         *\n         * @type {GridRowDetailsRenderer | null | undefined}\n         */\n        rowDetailsRenderer: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * @type {!Array<!HTMLElement> | undefined}\n         * @protected\n         */\n        _detailsCells: {\n          type: Array,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_detailsOpenedItemsChanged(detailsOpenedItems, rowDetailsRenderer)',\n        '_rowDetailsRendererChanged(rowDetailsRenderer)',\n      ];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._detailsCellResizeObserver = new ResizeObserver((entries) => {\n        entries.forEach(({ target: cell }) => {\n          this._updateDetailsCellHeight(cell.parentElement);\n        });\n\n        // This workaround is needed until Safari also supports\n        // ResizeObserver.observe with {box: 'border-box'}\n        this.__virtualizer.__adapter._resizeHandler();\n      });\n    }\n\n    /** @private */\n    _rowDetailsRendererChanged(rowDetailsRenderer) {\n      if (!rowDetailsRenderer) {\n        return;\n      }\n\n      if (this._columnTree) {\n        // Only update the rows if the column tree has already been initialized\n        iterateChildren(this.$.items, (row) => {\n          if (!row.querySelector('[part~=details-cell]')) {\n            this._updateRow(row, this._columnTree[this._columnTree.length - 1]);\n            const isDetailsOpened = this._isDetailsOpened(row._item);\n            this._toggleDetailsCell(row, isDetailsOpened);\n          }\n        });\n      }\n    }\n\n    /** @private */\n    _detailsOpenedItemsChanged(detailsOpenedItems, rowDetailsRenderer) {\n      iterateChildren(this.$.items, (row) => {\n        // Re-renders the row to possibly close the previously opened details.\n        if (row.hasAttribute('details-opened')) {\n          this._updateItem(row, row._item);\n          return;\n        }\n\n        // Re-renders the row to open the details when a row details renderer is provided.\n        if (rowDetailsRenderer && this._isDetailsOpened(row._item)) {\n          this._updateItem(row, row._item);\n        }\n      });\n    }\n\n    /**\n     * @param {!HTMLElement} cell\n     * @protected\n     */\n    _configureDetailsCell(cell) {\n      cell.setAttribute('part', 'cell details-cell');\n      // Freeze the details cell, so that it does not scroll horizontally\n      // with the normal cells. This way it looks less weird.\n      cell.toggleAttribute('frozen', true);\n\n      this._detailsCellResizeObserver.observe(cell);\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {!GridItem} item\n     * @protected\n     */\n    _toggleDetailsCell(row, detailsOpened) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      cell.hidden = !detailsOpened;\n\n      if (cell.hidden) {\n        return;\n      }\n\n      // Assigns a renderer when the details cell is opened.\n      // The details cell content is rendered later in the `_updateItem` method.\n      if (this.rowDetailsRenderer) {\n        cell._renderer = this.rowDetailsRenderer;\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeight(row) {\n      const cell = row.querySelector('[part~=\"details-cell\"]');\n      if (!cell) {\n        return;\n      }\n\n      this.__updateDetailsRowPadding(row, cell);\n      // Ensure the row has correct padding after frame (the resize observer might miss it)\n      requestAnimationFrame(() => this.__updateDetailsRowPadding(row, cell));\n    }\n\n    /** @private */\n    __updateDetailsRowPadding(row, cell) {\n      if (cell.hidden) {\n        row.style.removeProperty('padding-bottom');\n      } else {\n        row.style.setProperty('padding-bottom', `${cell.offsetHeight}px`);\n      }\n    }\n\n    /** @protected */\n    _updateDetailsCellHeights() {\n      iterateChildren(this.$.items, (row) => {\n        this._updateDetailsCellHeight(row);\n      });\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isDetailsOpened(item) {\n      return this.detailsOpenedItems && this._getItemIndexInArray(item, this.detailsOpenedItems) !== -1;\n    }\n\n    /**\n     * Open the details row of a given item.\n     * @param {!GridItem} item\n     */\n    openItemDetails(item) {\n      if (!this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = [...this.detailsOpenedItems, item];\n      }\n    }\n\n    /**\n     * Close the details row of a given item.\n     * @param {!GridItem} item\n     */\n    closeItemDetails(item) {\n      if (this._isDetailsOpened(item)) {\n        this.detailsOpenedItems = this.detailsOpenedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isElementHidden } from '@vaadin/a11y-base';\nimport { animationFrame, microTask, timeOut } from '@vaadin/component-base/src/async.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { getNormalizedScrollLeft } from '@vaadin/component-base/src/dir-utils.js';\nimport { ResizeMixin } from '@vaadin/component-base/src/resize-mixin.js';\n\nconst timeouts = {\n  SCROLLING: 500,\n  UPDATE_CONTENT_VISIBILITY: 100,\n};\n\n/**\n * @polymerMixin\n */\nexport const ScrollMixin = (superClass) =>\n  class ScrollMixin extends ResizeMixin(superClass) {\n    static get properties() {\n      return {\n        /**\n         * Allows you to choose between modes for rendering columns in the grid:\n         *\n         * \"eager\" (default): All columns are rendered upfront, regardless of their visibility within the viewport.\n         * This mode should generally be preferred, as it avoids the limitations imposed by the \"lazy\" mode.\n         * Use this mode unless the grid has a large number of columns and performance outweighs the limitations\n         * in priority.\n         *\n         * \"lazy\": Optimizes the rendering of cells when there are multiple columns in the grid by virtualizing\n         * horizontal scrolling. In this mode, body cells are rendered only when their corresponding columns are\n         * inside the visible viewport.\n         *\n         * Using \"lazy\" rendering should be used only if you're dealing with a large number of columns and performance\n         * is your highest priority. For most use cases, the default \"eager\" mode is recommended due to the\n         * limitations imposed by the \"lazy\" mode.\n         *\n         * When using the \"lazy\" mode, keep the following limitations in mind:\n         *\n         * - Row Height: When only a number of columns are visible at once, the height of a row can only be that of\n         * the highest cell currently visible on that row. Make sure each cell on a single row has the same height\n         * as all other cells on that row. If row cells have different heights, users may experience jumpiness when\n         * scrolling the grid horizontally as lazily rendered cells with different heights are scrolled into view.\n         *\n         * - Auto-width Columns: For the columns that are initially outside the visible viewport but still use auto-width,\n         * only the header content is taken into account when calculating the column width because the body cells\n         * of the columns outside the viewport are not initially rendered.\n         *\n         * - Screen Reader Compatibility: Screen readers may not be able to associate the focused cells with the correct\n         * headers when only a subset of the body cells on a row is rendered.\n         *\n         * - Keyboard Navigation: Tabbing through focusable elements inside the grid body may not work as expected because\n         * some of the columns that would include focusable elements in the body cells may be outside the visible viewport\n         * and thus not rendered.\n         *\n         * @attr {eager|lazy} column-rendering\n         * @type {!ColumnRendering}\n         */\n        columnRendering: {\n          type: String,\n          value: 'eager',\n          sync: true,\n        },\n\n        /**\n         * Cached array of frozen cells\n         * @private\n         */\n        _frozenCells: {\n          type: Array,\n          value: () => [],\n        },\n\n        /**\n         * Cached array of cells frozen to end\n         * @private\n         */\n        _frozenToEndCells: {\n          type: Array,\n          value: () => [],\n        },\n\n        /** @private */\n        _rowWithFocusedElement: Element,\n      };\n    }\n\n    static get observers() {\n      return ['__columnRenderingChanged(_columnTree, columnRendering)'];\n    }\n\n    /** @private */\n    get _scrollLeft() {\n      return this.$.table.scrollLeft;\n    }\n\n    /** @private */\n    get _scrollTop() {\n      return this.$.table.scrollTop;\n    }\n\n    /**\n     * Override (from iron-scroll-target-behavior) to avoid document scroll\n     * @private\n     */\n    set _scrollTop(top) {\n      this.$.table.scrollTop = top;\n    }\n\n    /** @protected */\n    get _lazyColumns() {\n      return this.columnRendering === 'lazy';\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.scrollTarget = this.$.table;\n\n      this.$.items.addEventListener('focusin', (e) => {\n        const itemsIndex = e.composedPath().indexOf(this.$.items);\n        this._rowWithFocusedElement = e.composedPath()[itemsIndex - 1];\n      });\n      this.$.items.addEventListener('focusout', () => {\n        this._rowWithFocusedElement = undefined;\n      });\n\n      this.$.table.addEventListener('scroll', () => this._afterScroll());\n    }\n\n    /**\n     * @protected\n     * @override\n     */\n    _onResize() {\n      this._updateOverflow();\n      this.__updateHorizontalScrollPosition();\n\n      // For Firefox, manually restore last scroll position when grid becomes\n      // visible again. This solves an issue where switching visibility of two\n      // grids causes Firefox trying to synchronize the scroll positions between\n      // the two grid's table elements.\n      // See https://github.com/vaadin/web-components/issues/5796\n      if (this._firefox) {\n        const isVisible = !isElementHidden(this);\n        if (isVisible && this.__previousVisible === false) {\n          this._scrollTop = this.__memorizedScrollTop || 0;\n        }\n        this.__previousVisible = isVisible;\n      }\n    }\n\n    /**\n     * Scroll to a flat index in the grid. The method doesn't take into account\n     * the hierarchy of the items.\n     *\n     * @param {number} index Row index to scroll to\n     * @protected\n     */\n    _scrollToFlatIndex(index) {\n      index = Math.min(this._flatSize - 1, Math.max(0, index));\n      this.__virtualizer.scrollToIndex(index);\n      this.__scrollIntoViewport(index);\n    }\n\n    /**\n     * Makes sure the row with the given index (if found in the DOM) is fully\n     * inside the visible viewport, taking header/footer into account.\n     * @private\n     */\n    __scrollIntoViewport(index) {\n      const rowElement = [...this.$.items.children].find((child) => child.index === index);\n      if (rowElement) {\n        const dstRect = rowElement.getBoundingClientRect();\n        const footerTop = this.$.footer.getBoundingClientRect().top;\n        const headerBottom = this.$.header.getBoundingClientRect().bottom;\n        if (dstRect.bottom > footerTop) {\n          this.$.table.scrollTop += dstRect.bottom - footerTop;\n        } else if (dstRect.top < headerBottom) {\n          this.$.table.scrollTop -= headerBottom - dstRect.top;\n        }\n      }\n    }\n\n    /** @private */\n    _scheduleScrolling() {\n      if (!this._scrollingFrame) {\n        // Defer setting state attributes to avoid Edge hiccups\n        this._scrollingFrame = requestAnimationFrame(() => this.$.scroller.toggleAttribute('scrolling', true));\n      }\n      this._debounceScrolling = Debouncer.debounce(this._debounceScrolling, timeOut.after(timeouts.SCROLLING), () => {\n        cancelAnimationFrame(this._scrollingFrame);\n        delete this._scrollingFrame;\n        this.$.scroller.toggleAttribute('scrolling', false);\n      });\n    }\n\n    /** @private */\n    _afterScroll() {\n      this.__updateHorizontalScrollPosition();\n\n      if (!this.hasAttribute('reordering')) {\n        this._scheduleScrolling();\n      }\n      if (!this.hasAttribute('navigating')) {\n        this._hideTooltip(true);\n      }\n\n      this._updateOverflow();\n\n      this._debounceColumnContentVisibility = Debouncer.debounce(\n        this._debounceColumnContentVisibility,\n        timeOut.after(timeouts.UPDATE_CONTENT_VISIBILITY),\n        () => {\n          // If horizontal scroll position changed and lazy column rendering is enabled,\n          // update the visible columns.\n          if (this._lazyColumns && this.__cachedScrollLeft !== this._scrollLeft) {\n            this.__cachedScrollLeft = this._scrollLeft;\n            this.__updateColumnsBodyContentHidden();\n          }\n        },\n      );\n\n      // Memorize last scroll position in Firefox\n      if (this._firefox) {\n        const isVisible = !isElementHidden(this);\n        if (isVisible && this.__previousVisible !== false) {\n          this.__memorizedScrollTop = this._scrollTop;\n        }\n      }\n    }\n\n    /** @private */\n    __updateColumnsBodyContentHidden() {\n      if (!this._columnTree) {\n        return;\n      }\n\n      const columnsInOrder = this._getColumnsInOrder();\n\n      // Return if sizer cells are not yet assigned to columns\n      if (!columnsInOrder[0] || !columnsInOrder[0]._sizerCell) {\n        return;\n      }\n\n      let bodyContentHiddenChanged = false;\n\n      // Remove the column cells from the DOM if the column is outside the viewport.\n      // Add the column cells to the DOM if the column is inside the viewport.\n      //\n      // Update the _bodyContentHidden property of the column to reflect the current\n      // visibility state and make it run renderers for the cells if necessary.\n      columnsInOrder.forEach((column) => {\n        const bodyContentHidden = this._lazyColumns && !this.__isColumnInViewport(column);\n\n        if (column._bodyContentHidden !== bodyContentHidden) {\n          bodyContentHiddenChanged = true;\n          column._cells.forEach((cell) => {\n            if (cell !== column._sizerCell) {\n              if (bodyContentHidden) {\n                cell.remove();\n              } else if (cell.__parentRow) {\n                // Add the cell to the correct DOM position in the row\n                const followingColumnCell = [...cell.__parentRow.children].find(\n                  (child) => columnsInOrder.indexOf(child._column) > columnsInOrder.indexOf(column),\n                );\n                cell.__parentRow.insertBefore(cell, followingColumnCell);\n              }\n            }\n          });\n        }\n\n        column._bodyContentHidden = bodyContentHidden;\n      });\n\n      if (bodyContentHiddenChanged) {\n        // Frozen columns may have changed their visibility\n        this._frozenCellsChanged();\n      }\n\n      if (this._lazyColumns) {\n        // Calculate the offset to apply to the body cells\n        const lastFrozenColumn = [...columnsInOrder].reverse().find((column) => column.frozen);\n        const lastFrozenColumnEnd = this.__getColumnEnd(lastFrozenColumn);\n        const firstVisibleColumn = columnsInOrder.find((column) => !column.frozen && !column._bodyContentHidden);\n        this.__lazyColumnsStart = this.__getColumnStart(firstVisibleColumn) - lastFrozenColumnEnd;\n        this.$.items.style.setProperty('--_grid-lazy-columns-start', `${this.__lazyColumnsStart}px`);\n\n        // Make sure the body has a focusable element in lazy columns mode\n        this._resetKeyboardNavigation();\n      }\n    }\n\n    /** @private */\n    __getColumnEnd(column) {\n      if (!column) {\n        return this.__isRTL ? this.$.table.clientWidth : 0;\n      }\n      return column._sizerCell.offsetLeft + (this.__isRTL ? 0 : column._sizerCell.offsetWidth);\n    }\n\n    /** @private */\n    __getColumnStart(column) {\n      if (!column) {\n        return this.__isRTL ? this.$.table.clientWidth : 0;\n      }\n      return column._sizerCell.offsetLeft + (this.__isRTL ? column._sizerCell.offsetWidth : 0);\n    }\n\n    /**\n     * Returns true if the given column is horizontally inside the viewport.\n     * @private\n     */\n    __isColumnInViewport(column) {\n      if (column.frozen || column.frozenToEnd) {\n        // Assume frozen columns to always be inside the viewport\n        return true;\n      }\n\n      // Check if the column's sizer cell is inside the viewport\n      return this.__isHorizontallyInViewport(column._sizerCell);\n    }\n\n    /** @private */\n    __isHorizontallyInViewport(element) {\n      return (\n        element.offsetLeft + element.offsetWidth >= this._scrollLeft &&\n        element.offsetLeft <= this._scrollLeft + this.clientWidth\n      );\n    }\n\n    /** @private */\n    __columnRenderingChanged(_columnTree, columnRendering) {\n      if (columnRendering === 'eager') {\n        this.$.scroller.removeAttribute('column-rendering');\n      } else {\n        this.$.scroller.setAttribute('column-rendering', columnRendering);\n      }\n\n      this.__updateColumnsBodyContentHidden();\n    }\n\n    /** @private */\n    _updateOverflow() {\n      this._debounceOverflow = Debouncer.debounce(this._debounceOverflow, animationFrame, () => {\n        this.__doUpdateOverflow();\n      });\n    }\n\n    /** @private */\n    __doUpdateOverflow() {\n      // Set overflow styling attributes\n      let overflow = '';\n      const table = this.$.table;\n      if (table.scrollTop < table.scrollHeight - table.clientHeight) {\n        overflow += ' bottom';\n      }\n\n      if (table.scrollTop > 0) {\n        overflow += ' top';\n      }\n\n      const scrollLeft = getNormalizedScrollLeft(table, this.getAttribute('dir'));\n      if (scrollLeft > 0) {\n        overflow += ' start';\n      }\n\n      if (scrollLeft < table.scrollWidth - table.clientWidth) {\n        overflow += ' end';\n      }\n\n      if (this.__isRTL) {\n        overflow = overflow.replace(/start|end/giu, (matched) => {\n          return matched === 'start' ? 'end' : 'start';\n        });\n      }\n\n      // TODO: Remove \"right\" and \"left\" values in the next major.\n      if (table.scrollLeft < table.scrollWidth - table.clientWidth) {\n        overflow += ' right';\n      }\n\n      if (table.scrollLeft > 0) {\n        overflow += ' left';\n      }\n\n      const value = overflow.trim();\n      if (value.length > 0 && this.getAttribute('overflow') !== value) {\n        this.setAttribute('overflow', value);\n      } else if (value.length === 0 && this.hasAttribute('overflow')) {\n        this.removeAttribute('overflow');\n      }\n    }\n\n    /** @protected */\n    _frozenCellsChanged() {\n      this._debouncerCacheElements = Debouncer.debounce(this._debouncerCacheElements, microTask, () => {\n        Array.from(this.shadowRoot.querySelectorAll('[part~=\"cell\"]')).forEach((cell) => {\n          cell.style.transform = '';\n        });\n        this._frozenCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen]'));\n        this._frozenToEndCells = Array.prototype.slice.call(this.$.table.querySelectorAll('[frozen-to-end]'));\n        this.__updateHorizontalScrollPosition();\n      });\n      this._debounceUpdateFrozenColumn();\n    }\n\n    /** @protected */\n    _debounceUpdateFrozenColumn() {\n      this.__debounceUpdateFrozenColumn = Debouncer.debounce(this.__debounceUpdateFrozenColumn, microTask, () =>\n        this._updateFrozenColumn(),\n      );\n    }\n\n    /** @private */\n    _updateFrozenColumn() {\n      if (!this._columnTree) {\n        return;\n      }\n\n      const columnsRow = this._columnTree[this._columnTree.length - 1].slice(0);\n      columnsRow.sort((a, b) => {\n        return a._order - b._order;\n      });\n\n      let lastFrozen;\n      let firstFrozenToEnd;\n\n      // Use for loop to only iterate columns once\n      for (let i = 0; i < columnsRow.length; i++) {\n        const col = columnsRow[i];\n\n        col._lastFrozen = false;\n        col._firstFrozenToEnd = false;\n\n        if (firstFrozenToEnd === undefined && col.frozenToEnd && !col.hidden) {\n          firstFrozenToEnd = i;\n        }\n\n        if (col.frozen && !col.hidden) {\n          lastFrozen = i;\n        }\n      }\n\n      if (lastFrozen !== undefined) {\n        columnsRow[lastFrozen]._lastFrozen = true;\n      }\n\n      if (firstFrozenToEnd !== undefined) {\n        columnsRow[firstFrozenToEnd]._firstFrozenToEnd = true;\n      }\n\n      this.__updateColumnsBodyContentHidden();\n    }\n\n    /** @private */\n    __updateHorizontalScrollPosition() {\n      if (!this._columnTree) {\n        return;\n      }\n      const scrollWidth = this.$.table.scrollWidth;\n      const clientWidth = this.$.table.clientWidth;\n      const scrollLeft = Math.max(0, this.$.table.scrollLeft);\n      const normalizedScrollLeft = getNormalizedScrollLeft(this.$.table, this.getAttribute('dir'));\n\n      // Position header, footer and items container\n      const transform = `translate(${-scrollLeft}px, 0)`;\n      this.$.header.style.transform = transform;\n      this.$.footer.style.transform = transform;\n      this.$.items.style.transform = transform;\n\n      // Position frozen cells\n      const x = this.__isRTL ? normalizedScrollLeft + clientWidth - scrollWidth : scrollLeft;\n      const transformFrozen = `translate(${x}px, 0)`;\n      this._frozenCells.forEach((cell) => {\n        cell.style.transform = transformFrozen;\n      });\n\n      // Position cells frozen to end\n      const remaining = this.__isRTL ? normalizedScrollLeft : scrollLeft + clientWidth - scrollWidth;\n      const transformFrozenToEnd = `translate(${remaining}px, 0)`;\n\n      let transformFrozenToEndBody = transformFrozenToEnd;\n\n      if (this._lazyColumns) {\n        // Lazy column rendering is used, calculate the offset to apply to the frozen to end cells\n        const columnsInOrder = this._getColumnsInOrder();\n\n        const lastVisibleColumn = [...columnsInOrder]\n          .reverse()\n          .find((column) => !column.frozenToEnd && !column._bodyContentHidden);\n        const lastVisibleColumnEnd = this.__getColumnEnd(lastVisibleColumn);\n\n        const firstFrozenToEndColumn = columnsInOrder.find((column) => column.frozenToEnd);\n        const firstFrozenToEndColumnStart = this.__getColumnStart(firstFrozenToEndColumn);\n\n        const translateX = remaining + (firstFrozenToEndColumnStart - lastVisibleColumnEnd) + this.__lazyColumnsStart;\n        transformFrozenToEndBody = `translate(${translateX}px, 0)`;\n      }\n\n      this._frozenToEndCells.forEach((cell) => {\n        if (this.$.items.contains(cell)) {\n          cell.style.transform = transformFrozenToEndBody;\n        } else {\n          cell.style.transform = transformFrozenToEnd;\n        }\n      });\n\n      // Only update the --_grid-horizontal-scroll-position custom property when navigating\n      // on row focus mode to avoid performance issues.\n      if (this.hasAttribute('navigating') && this.__rowFocusMode) {\n        this.$.table.style.setProperty('--_grid-horizontal-scroll-position', `${-x}px`);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const SelectionMixin = (superClass) =>\n  class SelectionMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * An array that contains the selected items.\n         * @type {!Array<!GridItem>}\n         */\n        selectedItems: {\n          type: Object,\n          notify: true,\n          value: () => [],\n          sync: true,\n        },\n\n        /**\n         * Set of selected item ids\n         * @private\n         */\n        __selectedKeys: {\n          type: Object,\n          computed: '__computeSelectedKeys(itemIdPath, selectedItems)',\n        },\n      };\n    }\n\n    static get observers() {\n      return ['__selectedItemsChanged(itemIdPath, selectedItems)'];\n    }\n\n    /**\n     * @param {!GridItem} item\n     * @return {boolean}\n     * @protected\n     */\n    _isSelected(item) {\n      return this.__selectedKeys.has(this.getItemId(item));\n    }\n\n    /**\n     * Selects the given item.\n     *\n     * @method selectItem\n     * @param {!GridItem} item The item object\n     */\n    selectItem(item) {\n      if (!this._isSelected(item)) {\n        this.selectedItems = [...this.selectedItems, item];\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @method deselect\n     * @param {!GridItem} item The item object\n     */\n    deselectItem(item) {\n      if (this._isSelected(item)) {\n        this.selectedItems = this.selectedItems.filter((i) => !this._itemsEqual(i, item));\n      }\n    }\n\n    /**\n     * Toggles the selected state of the given item.\n     *\n     * @method toggle\n     * @param {!GridItem} item The item object\n     * @protected\n     */\n    _toggleItem(item) {\n      if (!this._isSelected(item)) {\n        this.selectItem(item);\n      } else {\n        this.deselectItem(item);\n      }\n    }\n\n    /** @private */\n    __selectedItemsChanged() {\n      this.requestContentUpdate();\n    }\n\n    /** @private */\n    __computeSelectedKeys(itemIdPath, selectedItems) {\n      const selected = selectedItems || [];\n      const selectedKeys = new Set();\n      selected.forEach((item) => {\n        selectedKeys.add(this.getItemId(item));\n      });\n\n      return selectedKeys;\n    }\n\n    /**\n     * Fired when the `selectedItems` property changes.\n     *\n     * @event selected-items-changed\n     */\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\nlet defaultMultiSortPriority = 'prepend';\n\n/**\n * @polymerMixin\n */\nexport const SortMixin = (superClass) =>\n  class SortMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * When `true`, all `<vaadin-grid-sorter>` are applied for sorting.\n         * @attr {boolean} multi-sort\n         * @type {boolean}\n         */\n        multiSort: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Controls how columns are added to the sort order when using multi-sort.\n         * The sort order is visually indicated by numbers in grid sorters placed in column headers.\n         *\n         * By default, whenever an unsorted column is sorted, or the sort-direction of a column is\n         * changed, that column gets sort priority 1, thus affecting the priority for all the other\n         * sorted columns. This is identical to using `multi-sort-priority=\"prepend\"`.\n         *\n         * Using this property allows to change this behavior so that sorting an unsorted column\n         * would add it to the \"end\" of the sort, and changing column's sort direction would retain\n         * it's previous priority. To set this, use `multi-sort-priority=\"append\"`.\n         *\n         * @attr {string} multi-sort-priority\n         */\n        multiSortPriority: {\n          type: String,\n          value: () => defaultMultiSortPriority,\n        },\n\n        /**\n         * When `true`, Shift-clicking an unsorted column's sorter adds it to the multi-sort.\n         * Shift + Space does the same action via keyboard. This property has precedence over the\n         * `multiSort` property. If `multiSortOnShiftClick` is true, the multiSort property is effectively ignored.\n         *\n         * @attr {boolean} multi-sort-on-shift-click\n         * @type {boolean}\n         */\n        multiSortOnShiftClick: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * @type {!Array<!GridSorterDefinition>}\n         * @protected\n         */\n        _sorters: {\n          type: Array,\n          value: () => [],\n        },\n\n        /** @private */\n        _previousSorters: {\n          type: Array,\n          value: () => [],\n        },\n      };\n    }\n\n    /**\n     * Sets the default multi-sort priority to use for all grid instances.\n     * This method should be called before creating any grid instances.\n     * Changing this setting does not affect the default for existing grids.\n     *\n     * @param {string} priority\n     */\n    static setDefaultMultiSortPriority(priority) {\n      defaultMultiSortPriority = ['append', 'prepend'].includes(priority) ? priority : 'prepend';\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n      this.addEventListener('sorter-changed', this._onSorterChanged);\n    }\n\n    /** @private */\n    _onSorterChanged(e) {\n      const sorter = e.target;\n      e.stopPropagation();\n      sorter._grid = this;\n      this.__updateSorter(sorter, e.detail.shiftClick, e.detail.fromSorterClick);\n      this.__applySorters();\n    }\n\n    /** @private */\n    __removeSorters(sortersToRemove) {\n      if (sortersToRemove.length === 0) {\n        return;\n      }\n\n      this._sorters = this._sorters.filter((sorter) => sortersToRemove.indexOf(sorter) < 0);\n      if (this.multiSort) {\n        this.__updateSortOrders();\n      }\n      this.__applySorters();\n    }\n\n    /** @private */\n    __updateSortOrders() {\n      this._sorters.forEach((sorter, index) => {\n        sorter._order = this._sorters.length > 1 ? index : null;\n      });\n    }\n\n    /** @private */\n    __appendSorter(sorter) {\n      if (!sorter.direction) {\n        this._removeArrayItem(this._sorters, sorter);\n      } else if (!this._sorters.includes(sorter)) {\n        this._sorters.push(sorter);\n      }\n\n      this.__updateSortOrders();\n    }\n\n    /** @private */\n    __prependSorter(sorter) {\n      this._removeArrayItem(this._sorters, sorter);\n      if (sorter.direction) {\n        this._sorters.unshift(sorter);\n      }\n      this.__updateSortOrders();\n    }\n\n    /** @private */\n    __updateSorter(sorter, shiftClick, fromSorterClick) {\n      if (!sorter.direction && this._sorters.indexOf(sorter) === -1) {\n        return;\n      }\n\n      sorter._order = null;\n\n      if (\n        (this.multiSort && (!this.multiSortOnShiftClick || !fromSorterClick)) ||\n        (this.multiSortOnShiftClick && shiftClick)\n      ) {\n        if (this.multiSortPriority === 'append') {\n          this.__appendSorter(sorter);\n        } else {\n          this.__prependSorter(sorter);\n        }\n      } else if (sorter.direction || this.multiSortOnShiftClick) {\n        const otherSorters = this._sorters.filter((s) => s !== sorter);\n        this._sorters = sorter.direction ? [sorter] : [];\n        otherSorters.forEach((sorter) => {\n          sorter._order = null;\n          sorter.direction = null;\n        });\n      }\n    }\n\n    /** @private */\n    __applySorters() {\n      if (\n        this.dataProvider &&\n        // No need to clear cache if sorters didn't change and grid is attached\n        this.isAttached &&\n        JSON.stringify(this._previousSorters) !== JSON.stringify(this._mapSorters())\n      ) {\n        this.__debounceClearCache();\n      }\n\n      this._a11yUpdateSorters();\n\n      this._previousSorters = this._mapSorters();\n    }\n\n    /**\n     * @return {!Array<!GridSorterDefinition>}\n     * @protected\n     */\n    _mapSorters() {\n      return this._sorters.map((sorter) => {\n        return {\n          path: sorter.path,\n          direction: sorter.direction,\n        };\n      });\n    }\n\n    /** @private */\n    _removeArrayItem(array, item) {\n      const index = array.indexOf(item);\n      if (index > -1) {\n        array.splice(index, 1);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { iterateChildren, iterateRowCells, updatePart } from './vaadin-grid-helpers.js';\n\n/**\n * @polymerMixin\n */\nexport const StylingMixin = (superClass) =>\n  class StylingMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * A function that allows generating CSS class names for grid cells\n         * based on their row and column. The return value should be the generated\n         * class name as a string, or multiple class names separated by whitespace\n         * characters.\n         *\n         * Receives two arguments:\n         * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridCellClassNameGenerator | null | undefined}\n         * @deprecated Use `cellPartNameGenerator` instead.\n         */\n        cellClassNameGenerator: {\n          type: Function,\n          sync: true,\n        },\n\n        /**\n         * A function that allows generating CSS `part` names for grid cells in Shadow DOM based\n         * on their row and column, for styling from outside using the `::part()` selector.\n         *\n         * The return value should be the generated part name as a string, or multiple part names\n         * separated by whitespace characters.\n         *\n         * Receives two arguments:\n         * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).\n         * - `model` The object with the properties related with\n         *   the rendered item, contains:\n         *   - `model.index` The index of the item.\n         *   - `model.item` The item.\n         *   - `model.expanded` Sublevel toggle state.\n         *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.\n         *   - `model.selected` Selected state.\n         *\n         * @type {GridCellPartNameGenerator | null | undefined}\n         */\n        cellPartNameGenerator: {\n          type: Function,\n          sync: true,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '__cellClassNameGeneratorChanged(cellClassNameGenerator)',\n        '__cellPartNameGeneratorChanged(cellPartNameGenerator)',\n      ];\n    }\n\n    /** @private */\n    __cellClassNameGeneratorChanged() {\n      this.generateCellClassNames();\n    }\n\n    /** @private */\n    __cellPartNameGeneratorChanged() {\n      this.generateCellPartNames();\n    }\n\n    /**\n     * Runs the `cellClassNameGenerator` for the visible cells.\n     * If the generator depends on varying conditions, you need to\n     * call this function manually in order to update the styles when\n     * the conditions change.\n     *\n     * @deprecated Use `cellPartNameGenerator` and `generateCellPartNames()` instead.\n     */\n    generateCellClassNames() {\n      iterateChildren(this.$.items, (row) => {\n        if (!row.hidden && !row.hasAttribute('loading')) {\n          this._generateCellClassNames(row, this.__getRowModel(row));\n        }\n      });\n    }\n\n    /**\n     * Runs the `cellPartNameGenerator` for the visible cells.\n     * If the generator depends on varying conditions, you need to\n     * call this function manually in order to update the styles when\n     * the conditions change.\n     */\n    generateCellPartNames() {\n      iterateChildren(this.$.items, (row) => {\n        if (!row.hidden && !row.hasAttribute('loading')) {\n          this._generateCellPartNames(row, this.__getRowModel(row));\n        }\n      });\n    }\n\n    /** @private */\n    _generateCellClassNames(row, model) {\n      iterateRowCells(row, (cell) => {\n        if (cell.__generatedClasses) {\n          cell.__generatedClasses.forEach((className) => cell.classList.remove(className));\n        }\n        if (this.cellClassNameGenerator) {\n          const result = this.cellClassNameGenerator(cell._column, model);\n          cell.__generatedClasses = result && result.split(' ').filter((className) => className.length > 0);\n          if (cell.__generatedClasses) {\n            cell.__generatedClasses.forEach((className) => cell.classList.add(className));\n          }\n        }\n      });\n    }\n\n    /** @private */\n    _generateCellPartNames(row, model) {\n      iterateRowCells(row, (cell) => {\n        if (cell.__generatedParts) {\n          cell.__generatedParts.forEach((partName) => {\n            // Remove previously generated part names\n            updatePart(cell, null, partName);\n          });\n        }\n        if (this.cellPartNameGenerator) {\n          const result = this.cellPartNameGenerator(cell._column, model);\n          cell.__generatedParts = result && result.split(' ').filter((partName) => partName.length > 0);\n          if (cell.__generatedParts) {\n            cell.__generatedParts.forEach((partName) => {\n              // Add the newly generated names to part\n              updatePart(cell, true, partName);\n            });\n          }\n        }\n      });\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isElementHidden } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { TabindexMixin } from '@vaadin/a11y-base/src/tabindex-mixin.js';\nimport { animationFrame, microTask } from '@vaadin/component-base/src/async.js';\nimport { isAndroid, isChrome, isFirefox, isIOS, isSafari, isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { Debouncer } from '@vaadin/component-base/src/debounce.js';\nimport { getClosestElement } from '@vaadin/component-base/src/dom-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { Virtualizer } from '@vaadin/component-base/src/virtualizer.js';\nimport { A11yMixin } from './vaadin-grid-a11y-mixin.js';\nimport { ActiveItemMixin } from './vaadin-grid-active-item-mixin.js';\nimport { ArrayDataProviderMixin } from './vaadin-grid-array-data-provider-mixin.js';\nimport { ColumnReorderingMixin } from './vaadin-grid-column-reordering-mixin.js';\nimport { ColumnResizingMixin } from './vaadin-grid-column-resizing-mixin.js';\nimport { DataProviderMixin } from './vaadin-grid-data-provider-mixin.js';\nimport { DragAndDropMixin } from './vaadin-grid-drag-and-drop-mixin.js';\nimport { DynamicColumnsMixin } from './vaadin-grid-dynamic-columns-mixin.js';\nimport { EventContextMixin } from './vaadin-grid-event-context-mixin.js';\nimport { FilterMixin } from './vaadin-grid-filter-mixin.js';\nimport {\n  getBodyRowCells,\n  iterateChildren,\n  iterateRowCells,\n  updateBooleanRowStates,\n  updateCellsPart,\n} from './vaadin-grid-helpers.js';\nimport { KeyboardNavigationMixin } from './vaadin-grid-keyboard-navigation-mixin.js';\nimport { RowDetailsMixin } from './vaadin-grid-row-details-mixin.js';\nimport { ScrollMixin } from './vaadin-grid-scroll-mixin.js';\nimport { SelectionMixin } from './vaadin-grid-selection-mixin.js';\nimport { SortMixin } from './vaadin-grid-sort-mixin.js';\nimport { StylingMixin } from './vaadin-grid-styling-mixin.js';\n\n/**\n * A mixin providing common grid functionality.\n *\n * @polymerMixin\n * @mixes A11yMixin\n * @mixes ActiveItemMixin\n * @mixes ArrayDataProviderMixin\n * @mixes ColumnResizingMixin\n * @mixes DataProviderMixin\n * @mixes DynamicColumnsMixin\n * @mixes FilterMixin\n * @mixes RowDetailsMixin\n * @mixes ScrollMixin\n * @mixes SelectionMixin\n * @mixes SortMixin\n * @mixes KeyboardNavigationMixin\n * @mixes ColumnReorderingMixin\n * @mixes EventContextMixin\n * @mixes StylingMixin\n * @mixes DragAndDropMixin\n */\nexport const GridMixin = (superClass) =>\n  class extends ArrayDataProviderMixin(\n    DataProviderMixin(\n      DynamicColumnsMixin(\n        ActiveItemMixin(\n          ScrollMixin(\n            SelectionMixin(\n              SortMixin(\n                RowDetailsMixin(\n                  KeyboardNavigationMixin(\n                    A11yMixin(\n                      FilterMixin(\n                        ColumnReorderingMixin(\n                          ColumnResizingMixin(\n                            EventContextMixin(DragAndDropMixin(StylingMixin(TabindexMixin(superClass)))),\n                          ),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  ) {\n    static get observers() {\n      return ['_columnTreeChanged(_columnTree)', '_flatSizeChanged(_flatSize, __virtualizer, _hasData, _columnTree)'];\n    }\n\n    static get properties() {\n      return {\n        /** @private */\n        _safari: {\n          type: Boolean,\n          value: isSafari,\n        },\n\n        /** @private */\n        _ios: {\n          type: Boolean,\n          value: isIOS,\n        },\n\n        /** @private */\n        _firefox: {\n          type: Boolean,\n          value: isFirefox,\n        },\n\n        /** @private */\n        _android: {\n          type: Boolean,\n          value: isAndroid,\n        },\n\n        /** @private */\n        _touchDevice: {\n          type: Boolean,\n          value: isTouch,\n        },\n\n        /**\n         * If true, the grid's height is defined by its rows.\n         *\n         * Effectively, this disables the grid's virtual scrolling so that all the rows are rendered in the DOM at once.\n         * If the grid has a large number of items, using the feature is discouraged to avoid performance issues.\n         * @attr {boolean} all-rows-visible\n         * @type {boolean}\n         */\n        allRowsVisible: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /** @private */\n        __pendingRecalculateColumnWidths: {\n          type: Boolean,\n          value: true,\n        },\n\n        /** @private */\n        isAttached: {\n          value: false,\n        },\n\n        /**\n         * An internal property that is mainly used by `vaadin-template-renderer`\n         * to identify grid elements.\n         *\n         * @private\n         */\n        __gridElement: {\n          type: Boolean,\n          value: true,\n        },\n      };\n    }\n\n    constructor() {\n      super();\n      this.addEventListener('animationend', this._onAnimationEnd);\n    }\n\n    /** @private */\n    get _firstVisibleIndex() {\n      const firstVisibleItem = this.__getFirstVisibleItem();\n      return firstVisibleItem ? firstVisibleItem.index : undefined;\n    }\n\n    /** @private */\n    get _lastVisibleIndex() {\n      const lastVisibleItem = this.__getLastVisibleItem();\n      return lastVisibleItem ? lastVisibleItem.index : undefined;\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n      this.isAttached = true;\n      this.recalculateColumnWidths();\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.isAttached = false;\n      this._hideTooltip(true);\n    }\n\n    /** @private */\n    __getFirstVisibleItem() {\n      return this._getRenderedRows().find((row) => this._isInViewport(row));\n    }\n\n    /** @private */\n    __getLastVisibleItem() {\n      return this._getRenderedRows()\n        .reverse()\n        .find((row) => this._isInViewport(row));\n    }\n\n    /** @private */\n    _isInViewport(item) {\n      const scrollTargetRect = this.$.table.getBoundingClientRect();\n      const itemRect = item.getBoundingClientRect();\n      const headerHeight = this.$.header.getBoundingClientRect().height;\n      const footerHeight = this.$.footer.getBoundingClientRect().height;\n      return (\n        itemRect.bottom > scrollTargetRect.top + headerHeight && itemRect.top < scrollTargetRect.bottom - footerHeight\n      );\n    }\n\n    /** @private */\n    _getRenderedRows() {\n      return Array.from(this.$.items.children)\n        .filter((item) => !item.hidden)\n        .sort((a, b) => a.index - b.index);\n    }\n\n    /** @protected */\n    _getRowContainingNode(node) {\n      const content = getClosestElement('vaadin-grid-cell-content', node);\n      if (!content) {\n        return;\n      }\n\n      const cell = content.assignedSlot.parentElement;\n      return cell.parentElement;\n    }\n\n    /** @protected */\n    _isItemAssignedToRow(item, row) {\n      const model = this.__getRowModel(row);\n      return this.getItemId(item) === this.getItemId(model.item);\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.__virtualizer = new Virtualizer({\n        createElements: this._createScrollerRows.bind(this),\n        updateElement: this._updateScrollerItem.bind(this),\n        scrollContainer: this.$.items,\n        scrollTarget: this.$.table,\n        reorderElements: true,\n      });\n\n      new ResizeObserver(() =>\n        setTimeout(() => {\n          this.__updateColumnsBodyContentHidden();\n          this.__tryToRecalculateColumnWidthsIfPending();\n        }),\n      ).observe(this.$.table);\n\n      processTemplates(this);\n\n      this._tooltipController = new TooltipController(this);\n      this.addController(this._tooltipController);\n      this._tooltipController.setManual(true);\n    }\n\n    /** @private */\n    __getBodyCellCoordinates(cell) {\n      if (this.$.items.contains(cell) && cell.localName === 'td') {\n        return {\n          item: cell.parentElement._item,\n          column: cell._column,\n        };\n      }\n    }\n\n    /** @private */\n    __focusBodyCell({ item, column }) {\n      const row = this._getRenderedRows().find((row) => row._item === item);\n      const cell = row && [...row.children].find((cell) => cell._column === column);\n      if (cell) {\n        cell.focus();\n      }\n    }\n\n    /** @protected */\n    _focusFirstVisibleRow() {\n      const row = this.__getFirstVisibleItem();\n      this.__rowFocusMode = true;\n      row.focus();\n    }\n\n    /** @private */\n    _flatSizeChanged(flatSize, virtualizer, hasData, columnTree) {\n      if (virtualizer && hasData && columnTree) {\n        // Changing the virtualizer size may result in the row with focus getting hidden\n        const cell = this.shadowRoot.activeElement;\n        const cellCoordinates = this.__getBodyCellCoordinates(cell);\n\n        const previousSize = virtualizer.size || 0;\n        virtualizer.size = flatSize;\n\n        // Request an update for the previous last row to have the \"last\" state removed\n        virtualizer.update(previousSize - 1, previousSize - 1);\n        if (flatSize < previousSize) {\n          // Size was decreased, so the new last row requires an explicit update\n          virtualizer.update(flatSize - 1, flatSize - 1);\n        }\n\n        // If the focused cell's parent row got hidden by the size change, focus the corresponding new cell\n        if (cellCoordinates && cell.parentElement.hidden) {\n          this.__focusBodyCell(cellCoordinates);\n        }\n\n        // Make sure the body has a tabbable element\n        this._resetKeyboardNavigation();\n      }\n    }\n\n    /** @private */\n    __getIntrinsicWidth(col) {\n      if (!this.__intrinsicWidthCache.has(col)) {\n        this.__calculateAndCacheIntrinsicWidths([col]);\n      }\n      return this.__intrinsicWidthCache.get(col);\n    }\n\n    /** @private */\n    __getDistributedWidth(col, innerColumn) {\n      if (col == null || col === this) {\n        return 0;\n      }\n\n      const columnWidth = Math.max(\n        this.__getIntrinsicWidth(col),\n        this.__getDistributedWidth((col.assignedSlot || col).parentElement, col),\n      );\n\n      // We're processing a regular grid-column and not a grid-column-group\n      if (!innerColumn) {\n        return columnWidth;\n      }\n\n      // At the end, the width of each vaadin-grid-column-group is determined by the sum of the width of its children.\n      // Here we determine how much space the vaadin-grid-column-group actually needs to render properly and then we distribute that space\n      // to its children, so when we actually do the summation it will be rendered properly.\n      // Check out vaadin-grid-column-group:_updateFlexAndWidth\n      const columnGroup = col;\n      const columnGroupWidth = columnWidth;\n      const sumOfWidthOfAllChildColumns = columnGroup._visibleChildColumns\n        .map((col) => this.__getIntrinsicWidth(col))\n        .reduce((sum, curr) => sum + curr, 0);\n\n      const extraNecessarySpaceForGridColumnGroup = Math.max(0, columnGroupWidth - sumOfWidthOfAllChildColumns);\n\n      // The distribution of the extra necessary space is done according to the intrinsic width of each child column.\n      // Lets say we need 100 pixels of extra space for the grid-column-group to render properly\n      // it has two grid-column children, |100px|300px| in total 400px\n      // the first column gets 25px of the additional space (100/400)*100 = 25\n      // the second column gets the 75px of the additional space (300/400)*100 = 75\n      const proportionOfExtraSpace = this.__getIntrinsicWidth(innerColumn) / sumOfWidthOfAllChildColumns;\n      const shareOfInnerColumnFromNecessaryExtraSpace = proportionOfExtraSpace * extraNecessarySpaceForGridColumnGroup;\n\n      return this.__getIntrinsicWidth(innerColumn) + shareOfInnerColumnFromNecessaryExtraSpace;\n    }\n\n    /**\n     * @param {!Array<!GridColumn>} cols the columns to auto size based on their content width\n     * @private\n     */\n    _recalculateColumnWidths(cols) {\n      // Flush to make sure DOM is up-to-date when measuring the column widths\n      this.__virtualizer.flush();\n      [...this.$.header.children, ...this.$.footer.children].forEach((row) => {\n        if (row.__debounceUpdateHeaderFooterRowVisibility) {\n          row.__debounceUpdateHeaderFooterRowVisibility.flush();\n        }\n      });\n\n      // Flush to account for any changes to the visibility of the columns\n      if (this._debouncerHiddenChanged) {\n        this._debouncerHiddenChanged.flush();\n      }\n\n      this.__intrinsicWidthCache = new Map();\n      // Cache the viewport rows to avoid unnecessary reflows while measuring the column widths\n      const fvi = this._firstVisibleIndex;\n      const lvi = this._lastVisibleIndex;\n      this.__viewportRowsCache = this._getRenderedRows().filter((row) => row.index >= fvi && row.index <= lvi);\n\n      // Pre-cache the intrinsic width of each column\n      this.__calculateAndCacheIntrinsicWidths(cols);\n\n      cols.forEach((col) => {\n        col.width = `${this.__getDistributedWidth(col)}px`;\n      });\n    }\n\n    /**\n     * Toggles the cell content for the given column to use or not use auto width.\n     *\n     * While content for all the column cells uses auto width (instead of the default 100%),\n     * their offsetWidth can be used to calculate the collective intrinsic width of the column.\n     *\n     * @private\n     */\n    __setVisibleCellContentAutoWidth(col, autoWidth) {\n      col._allCells\n        .filter((cell) => {\n          if (this.$.items.contains(cell)) {\n            return this.__viewportRowsCache.includes(cell.parentElement);\n          }\n          return true;\n        })\n        .forEach((cell) => {\n          cell.__measuringAutoWidth = autoWidth;\n\n          if (cell.__measuringAutoWidth) {\n            // Store the original inline width of the cell to restore it later\n            cell.__originalWidth = cell.style.width;\n            // Prepare the cell for having its intrinsic width measured\n            cell.style.width = 'auto';\n            cell.style.position = 'absolute';\n          } else {\n            // Restore the original width\n            cell.style.width = cell.__originalWidth;\n            delete cell.__originalWidth;\n            cell.style.position = '';\n          }\n        });\n    }\n\n    /**\n     * Returns the maximum intrinsic width of the cell content in the given column.\n     * Only cells which are marked for measuring auto width are considered.\n     *\n     * @private\n     */\n    __getAutoWidthCellsMaxWidth(col) {\n      // Note: _allCells only contains cells which are currently rendered in DOM\n      return col._allCells.reduce((width, cell) => {\n        // Add 1px buffer to the offset width to avoid too narrow columns (sub-pixel rendering)\n        return cell.__measuringAutoWidth ? Math.max(width, cell.offsetWidth + 1) : width;\n      }, 0);\n    }\n\n    /**\n     * Calculates and caches the intrinsic width of each given column.\n     *\n     * @private\n     */\n    __calculateAndCacheIntrinsicWidths(cols) {\n      // Make all the columns use auto width at once before measuring to\n      // avoid reflows in between the measurements\n      cols.forEach((col) => this.__setVisibleCellContentAutoWidth(col, true));\n      // Measure and cache\n      cols.forEach((col) => {\n        const width = this.__getAutoWidthCellsMaxWidth(col);\n        this.__intrinsicWidthCache.set(col, width);\n      });\n      // Reset the columns to use 100% width\n      cols.forEach((col) => this.__setVisibleCellContentAutoWidth(col, false));\n    }\n\n    /**\n     * Updates the `width` of all columns which have `autoWidth` set to `true`.\n     */\n    recalculateColumnWidths() {\n      if (!this._columnTree) {\n        return; // No columns\n      }\n      if (isElementHidden(this) || this._dataProviderController.isLoading()) {\n        this.__pendingRecalculateColumnWidths = true;\n        return;\n      }\n      const cols = this._getColumns().filter((col) => !col.hidden && col.autoWidth);\n      this._recalculateColumnWidths(cols);\n    }\n\n    /** @private */\n    __tryToRecalculateColumnWidthsIfPending() {\n      if (!this.__pendingRecalculateColumnWidths || isElementHidden(this) || this._dataProviderController.isLoading()) {\n        return;\n      }\n\n      // Delay recalculation if any rows are missing an index.\n      // This can happen during the grid's initialization if the recalculation is triggered\n      // as a result of the data provider responding synchronously to a page request created\n      // in the middle of the virtualizer update loop. In this case, rows after the one that\n      // triggered the page request may not have an index property yet. The lack of index\n      // prevents _onDataProviderPageReceived from requesting children for these rows,\n      // resulting in loading state being set to false and the recalculation beginning\n      // before all the data is loaded. Note, rows without index get updated in later iterations\n      // of the virtualizer update loop, ensuring the grid eventually reaches a stable state.\n      const hasRowsWithUndefinedIndex = [...this.$.items.children].some((row) => row.index === undefined);\n      if (hasRowsWithUndefinedIndex) {\n        return;\n      }\n\n      const hasRowsWithClientHeight = [...this.$.items.children].some((row) => row.clientHeight > 0);\n      if (hasRowsWithClientHeight) {\n        this.__pendingRecalculateColumnWidths = false;\n        this.recalculateColumnWidths();\n      }\n    }\n\n    /**\n     * @protected\n     * @override\n     */\n    _onDataProviderPageLoaded() {\n      super._onDataProviderPageLoaded();\n      this.__tryToRecalculateColumnWidthsIfPending();\n    }\n\n    /** @private */\n    _createScrollerRows(count) {\n      const rows = [];\n      for (let i = 0; i < count; i++) {\n        const row = document.createElement('tr');\n        row.setAttribute('part', 'row body-row');\n        row.setAttribute('role', 'row');\n        row.setAttribute('tabindex', '-1');\n        if (this._columnTree) {\n          this._updateRow(row, this._columnTree[this._columnTree.length - 1], 'body', false, true);\n        }\n        rows.push(row);\n      }\n\n      if (this._columnTree) {\n        this._columnTree[this._columnTree.length - 1].forEach((c) => {\n          if (c.isConnected && c._cells) {\n            c._cells = [...c._cells];\n          }\n        });\n      }\n\n      this.__afterCreateScrollerRowsDebouncer = Debouncer.debounce(\n        this.__afterCreateScrollerRowsDebouncer,\n        animationFrame,\n        () => {\n          this._afterScroll();\n          this.__tryToRecalculateColumnWidthsIfPending();\n        },\n      );\n      return rows;\n    }\n\n    /** @private */\n    _createCell(tagName, column) {\n      const contentId = (this._contentIndex = this._contentIndex + 1 || 0);\n      const slotName = `vaadin-grid-cell-content-${contentId}`;\n\n      const cellContent = document.createElement('vaadin-grid-cell-content');\n      cellContent.setAttribute('slot', slotName);\n\n      const cell = document.createElement(tagName);\n      cell.id = slotName.replace('-content-', '-');\n      cell.setAttribute('role', tagName === 'td' ? 'gridcell' : 'columnheader');\n\n      // For now we only support tooltip on desktop\n      if (!isAndroid && !isIOS) {\n        cell.addEventListener('mouseenter', (event) => {\n          if (!this.$.scroller.hasAttribute('scrolling')) {\n            this._showTooltip(event);\n          }\n        });\n\n        cell.addEventListener('mouseleave', () => {\n          this._hideTooltip();\n        });\n\n        cell.addEventListener('mousedown', () => {\n          this._hideTooltip(true);\n        });\n      }\n\n      if (column && column._onCellKeyDown) {\n        cell.addEventListener('keydown', column._onCellKeyDown.bind(column));\n      }\n\n      const slot = document.createElement('slot');\n      slot.setAttribute('name', slotName);\n\n      if (column && column._focusButtonMode) {\n        const div = document.createElement('div');\n        div.setAttribute('role', 'button');\n        div.setAttribute('tabindex', '-1');\n        cell.appendChild(div);\n\n        // Patch `focus()` to use the button\n        cell._focusButton = div;\n        cell.focus = function () {\n          cell._focusButton.focus();\n        };\n\n        div.appendChild(slot);\n      } else {\n        cell.setAttribute('tabindex', '-1');\n        cell.appendChild(slot);\n      }\n\n      cell._content = cellContent;\n\n      // With native Shadow DOM, mousedown on slotted element does not focus\n      // focusable slot wrapper, that is why cells are not focused with\n      // mousedown. Workaround: listen for mousedown and focus manually.\n      cellContent.addEventListener('mousedown', () => {\n        if (isChrome) {\n          // Chrome bug: focusing before mouseup prevents text selection, see http://crbug.com/771903\n          const mouseUpListener = (event) => {\n            // If focus is on element within the cell content - respect it, do not change\n            const contentContainsFocusedElement = cellContent.contains(this.getRootNode().activeElement);\n            // Only focus if mouse is released on cell content itself\n            const mouseUpWithinCell = event.composedPath().includes(cellContent);\n            if (!contentContainsFocusedElement && mouseUpWithinCell) {\n              cell.focus();\n            }\n            document.removeEventListener('mouseup', mouseUpListener, true);\n          };\n          document.addEventListener('mouseup', mouseUpListener, true);\n        } else {\n          // Focus on mouseup, on the other hand, removes selection on Safari.\n          // Watch out sync focus removal issue, only async focus works here.\n          setTimeout(() => {\n            if (!cellContent.contains(this.getRootNode().activeElement)) {\n              cell.focus();\n            }\n          });\n        }\n      });\n\n      return cell;\n    }\n\n    /**\n     * @param {!HTMLTableRowElement} row\n     * @param {!Array<!GridColumn>} columns\n     * @param {?string} section\n     * @param {boolean} isColumnRow\n     * @param {boolean} noNotify\n     * @protected\n     */\n    _updateRow(row, columns, section = 'body', isColumnRow = false, noNotify = false) {\n      const contentsFragment = document.createDocumentFragment();\n\n      iterateRowCells(row, (cell) => {\n        cell._vacant = true;\n      });\n      row.innerHTML = '';\n      if (section === 'body') {\n        // Clear the cached cell references\n        row.__cells = [];\n        row.__detailsCell = null;\n      }\n\n      columns\n        .filter((column) => !column.hidden)\n        .forEach((column, index, cols) => {\n          let cell;\n\n          if (section === 'body') {\n            // Body\n            if (!column._cells) {\n              column._cells = [];\n            }\n            cell = column._cells.find((cell) => cell._vacant);\n            if (!cell) {\n              cell = this._createCell('td', column);\n              column._cells.push(cell);\n            }\n            cell.setAttribute('part', 'cell body-cell');\n            cell.__parentRow = row;\n            // Cache the cell reference\n            row.__cells.push(cell);\n\n            const isSizerRow = row === this.$.sizer;\n            if (!column._bodyContentHidden || isSizerRow) {\n              row.appendChild(cell);\n            }\n\n            if (isSizerRow) {\n              column._sizerCell = cell;\n            }\n\n            if (index === cols.length - 1 && this.rowDetailsRenderer) {\n              // Add details cell as last cell to body rows\n              if (!this._detailsCells) {\n                this._detailsCells = [];\n              }\n              const detailsCell = this._detailsCells.find((cell) => cell._vacant) || this._createCell('td');\n              if (this._detailsCells.indexOf(detailsCell) === -1) {\n                this._detailsCells.push(detailsCell);\n              }\n              if (!detailsCell._content.parentElement) {\n                contentsFragment.appendChild(detailsCell._content);\n              }\n              this._configureDetailsCell(detailsCell);\n              row.appendChild(detailsCell);\n              // Cache the details cell reference\n              row.__detailsCell = detailsCell;\n              this._a11ySetRowDetailsCell(row, detailsCell);\n              detailsCell._vacant = false;\n            }\n\n            if (!noNotify) {\n              column._cells = [...column._cells];\n            }\n          } else {\n            // Header & footer\n            const tagName = section === 'header' ? 'th' : 'td';\n            if (isColumnRow || column.localName === 'vaadin-grid-column-group') {\n              cell = column[`_${section}Cell`] || this._createCell(tagName, column);\n              cell._column = column;\n              row.appendChild(cell);\n              column[`_${section}Cell`] = cell;\n            } else {\n              if (!column._emptyCells) {\n                column._emptyCells = [];\n              }\n              cell = column._emptyCells.find((cell) => cell._vacant) || this._createCell(tagName);\n              cell._column = column;\n              row.appendChild(cell);\n              if (column._emptyCells.indexOf(cell) === -1) {\n                column._emptyCells.push(cell);\n              }\n            }\n            cell.part.add('cell', `${section}-cell`);\n          }\n\n          if (!cell._content.parentElement) {\n            contentsFragment.appendChild(cell._content);\n          }\n          cell._vacant = false;\n          cell._column = column;\n        });\n\n      if (section !== 'body') {\n        this.__debounceUpdateHeaderFooterRowVisibility(row);\n      }\n\n      // Might be empty if only cache was used\n      this.appendChild(contentsFragment);\n\n      this._frozenCellsChanged();\n      this._updateFirstAndLastColumnForRow(row);\n    }\n\n    /**\n     * @param {HTMLTableRowElement} row\n     * @protected\n     */\n    __debounceUpdateHeaderFooterRowVisibility(row) {\n      row.__debounceUpdateHeaderFooterRowVisibility = Debouncer.debounce(\n        row.__debounceUpdateHeaderFooterRowVisibility,\n        microTask,\n        () => this.__updateHeaderFooterRowVisibility(row),\n      );\n    }\n\n    /**\n     * @param {HTMLTableRowElement} row\n     * @protected\n     */\n    __updateHeaderFooterRowVisibility(row) {\n      if (!row) {\n        return;\n      }\n\n      const visibleRowCells = Array.from(row.children).filter((cell) => {\n        const column = cell._column;\n        if (column._emptyCells && column._emptyCells.indexOf(cell) > -1) {\n          // The cell is an \"empty cell\"  -> doesn't block hiding the row\n          return false;\n        }\n        if (row.parentElement === this.$.header) {\n          if (column.headerRenderer) {\n            // The cell is the header cell of a column that has a header renderer\n            // -> row should be visible\n            return true;\n          }\n          if (column.header === null) {\n            // The column header is explicilty set to null -> doesn't block hiding the row\n            return false;\n          }\n          if (column.path || column.header !== undefined) {\n            // The column has an explicit non-null header or a path that generates a header\n            // -> row should be visible\n            return true;\n          }\n        } else if (column.footerRenderer) {\n          // The cell is the footer cell of a column that has a footer renderer\n          // -> row should be visible\n          return true;\n        }\n        return false;\n      });\n\n      if (row.hidden !== !visibleRowCells.length) {\n        row.hidden = !visibleRowCells.length;\n      }\n\n      // Make sure the section has a tabbable element\n      this._resetKeyboardNavigation();\n    }\n\n    /** @private */\n    _updateScrollerItem(row, index) {\n      this._preventScrollerRotatingCellFocus(row, index);\n\n      if (!this._columnTree) {\n        return;\n      }\n\n      this._updateRowOrderParts(row, index);\n\n      this._a11yUpdateRowRowindex(row, index);\n      this._getItem(index, row);\n    }\n\n    /** @private */\n    _columnTreeChanged(columnTree) {\n      this._renderColumnTree(columnTree);\n      this.recalculateColumnWidths();\n      this.__updateColumnsBodyContentHidden();\n    }\n\n    /** @private */\n    _updateRowOrderParts(row, index = row.index) {\n      updateBooleanRowStates(row, {\n        first: index === 0,\n        last: index === this._flatSize - 1,\n        odd: index % 2 !== 0,\n        even: index % 2 === 0,\n      });\n    }\n\n    /** @private */\n    _updateRowStateParts(row, { expanded, selected, detailsOpened }) {\n      updateBooleanRowStates(row, {\n        expanded,\n        collapsed: this.__isRowExpandable(row),\n        selected,\n        'details-opened': detailsOpened,\n      });\n    }\n\n    /**\n     * @param {!Array<!GridColumn>} columnTree\n     * @protected\n     */\n    _renderColumnTree(columnTree) {\n      iterateChildren(this.$.items, (row) => {\n        this._updateRow(row, columnTree[columnTree.length - 1], 'body', false, true);\n\n        const model = this.__getRowModel(row);\n        this._updateRowOrderParts(row);\n        this._updateRowStateParts(row, model);\n        this._filterDragAndDrop(row, model);\n      });\n\n      while (this.$.header.children.length < columnTree.length) {\n        const headerRow = document.createElement('tr');\n        headerRow.setAttribute('part', 'row');\n        headerRow.setAttribute('role', 'row');\n        headerRow.setAttribute('tabindex', '-1');\n        this.$.header.appendChild(headerRow);\n\n        const footerRow = document.createElement('tr');\n        footerRow.setAttribute('part', 'row');\n        footerRow.setAttribute('role', 'row');\n        footerRow.setAttribute('tabindex', '-1');\n        this.$.footer.appendChild(footerRow);\n      }\n      while (this.$.header.children.length > columnTree.length) {\n        this.$.header.removeChild(this.$.header.firstElementChild);\n        this.$.footer.removeChild(this.$.footer.firstElementChild);\n      }\n\n      iterateChildren(this.$.header, (headerRow, index, rows) => {\n        this._updateRow(headerRow, columnTree[index], 'header', index === columnTree.length - 1);\n\n        const cells = getBodyRowCells(headerRow);\n        updateCellsPart(cells, 'first-header-row-cell', index === 0);\n        updateCellsPart(cells, 'last-header-row-cell', index === rows.length - 1);\n      });\n\n      iterateChildren(this.$.footer, (footerRow, index, rows) => {\n        this._updateRow(footerRow, columnTree[columnTree.length - 1 - index], 'footer', index === 0);\n\n        const cells = getBodyRowCells(footerRow);\n        updateCellsPart(cells, 'first-footer-row-cell', index === 0);\n        updateCellsPart(cells, 'last-footer-row-cell', index === rows.length - 1);\n      });\n\n      // Sizer rows\n      this._updateRow(this.$.sizer, columnTree[columnTree.length - 1]);\n\n      this._resizeHandler();\n      this._frozenCellsChanged();\n      this._updateFirstAndLastColumn();\n      this._resetKeyboardNavigation();\n      this._a11yUpdateHeaderRows();\n      this._a11yUpdateFooterRows();\n      this.generateCellClassNames();\n      this.generateCellPartNames();\n      this.__updateHeaderAndFooter();\n    }\n\n    /**\n     * @param {!HTMLElement} row\n     * @param {GridItem} item\n     * @protected\n     */\n    _updateItem(row, item) {\n      row._item = item;\n      const model = this.__getRowModel(row);\n\n      this._toggleDetailsCell(row, model.detailsOpened);\n\n      this._a11yUpdateRowLevel(row, model.level);\n      this._a11yUpdateRowSelected(row, model.selected);\n\n      this._updateRowStateParts(row, model);\n\n      this._generateCellClassNames(row, model);\n      this._generateCellPartNames(row, model);\n      this._filterDragAndDrop(row, model);\n\n      iterateChildren(row, (cell) => {\n        if (cell._renderer) {\n          const owner = cell._column || this;\n          cell._renderer.call(owner, cell._content, owner, model);\n        }\n      });\n\n      this._updateDetailsCellHeight(row);\n\n      this._a11yUpdateRowExpanded(row, model.expanded);\n    }\n\n    /** @private */\n    _resizeHandler() {\n      this._updateDetailsCellHeights();\n      this.__updateHorizontalScrollPosition();\n    }\n\n    /** @private */\n    _onAnimationEnd(e) {\n      // ShadyCSS applies scoping suffixes to animation names\n      if (e.animationName.indexOf('vaadin-grid-appear') === 0) {\n        e.stopPropagation();\n        this.__tryToRecalculateColumnWidthsIfPending();\n\n        requestAnimationFrame(() => {\n          this.__scrollToPendingIndexes();\n        });\n      }\n    }\n\n    /**\n     * @param {!HTMLTableRowElement} row\n     * @return {!GridItemModel}\n     * @protected\n     */\n    __getRowModel(row) {\n      return {\n        index: row.index,\n        item: row._item,\n        level: this._getIndexLevel(row.index),\n        expanded: this._isExpanded(row._item),\n        selected: this._isSelected(row._item),\n        detailsOpened: !!this.rowDetailsRenderer && this._isDetailsOpened(row._item),\n      };\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _showTooltip(event) {\n      // Check if there is a slotted vaadin-tooltip element.\n      const tooltip = this._tooltipController.node;\n      if (tooltip && tooltip.isConnected) {\n        this._tooltipController.setTarget(event.target);\n        this._tooltipController.setContext(this.getEventContext(event));\n\n        // Trigger opening using the corresponding delay.\n        tooltip._stateController.open({\n          focus: event.type === 'focusin',\n          hover: event.type === 'mouseenter',\n        });\n      }\n    }\n\n    /** @protected */\n    _hideTooltip(immediate) {\n      const tooltip = this._tooltipController && this._tooltipController.node;\n      if (tooltip) {\n        tooltip._stateController.close(immediate);\n      }\n    }\n\n    /**\n     * Requests an update for the content of cells.\n     *\n     * While performing the update, the following renderers are invoked:\n     * - `Grid.rowDetailsRenderer`\n     * - `GridColumn.renderer`\n     * - `GridColumn.headerRenderer`\n     * - `GridColumn.footerRenderer`\n     *\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n     */\n    requestContentUpdate() {\n      // Header and footer renderers\n      this.__updateHeaderAndFooter();\n\n      // Body and row details renderers\n      this.__updateVisibleRows();\n    }\n\n    /** @private */\n    __updateHeaderAndFooter() {\n      (this._columnTree || []).forEach((level) => {\n        level.forEach((column) => {\n          if (column._renderHeaderAndFooter) {\n            column._renderHeaderAndFooter();\n          }\n        });\n      });\n    }\n\n    /** @protected */\n    __updateVisibleRows(start, end) {\n      if (this.__virtualizer) {\n        this.__virtualizer.update(start, end);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nexport const gridStyles = css`\n  @keyframes vaadin-grid-appear {\n    to {\n      opacity: 1;\n    }\n  }\n\n  :host {\n    display: flex;\n    flex-direction: column;\n    animation: 1ms vaadin-grid-appear;\n    height: 400px;\n    flex: 1 1 auto;\n    align-self: stretch;\n    position: relative;\n  }\n\n  :host([hidden]) {\n    display: none !important;\n  }\n\n  :host([disabled]) {\n    pointer-events: none;\n  }\n\n  #scroller {\n    display: flex;\n    flex-direction: column;\n    min-height: 100%;\n    transform: translateY(0);\n    width: auto;\n    height: auto;\n    position: absolute;\n    inset: 0;\n  }\n\n  :host([all-rows-visible]) {\n    height: auto;\n    align-self: flex-start;\n    flex-grow: 0;\n    width: 100%;\n  }\n\n  :host([all-rows-visible]) #scroller {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n\n  :host([all-rows-visible]) #items {\n    min-height: 1px;\n  }\n\n  #table {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    outline: none;\n    /* Workaround for a Desktop Safari bug: new stacking context here prevents the scrollbar from getting hidden */\n    z-index: 0;\n  }\n\n  #header,\n  #footer {\n    display: block;\n    position: -webkit-sticky;\n    position: sticky;\n    left: 0;\n    overflow: visible;\n    width: 100%;\n    z-index: 1;\n  }\n\n  #header {\n    top: 0;\n  }\n\n  th {\n    text-align: inherit;\n  }\n\n  /* Safari doesn't work with \"inherit\" */\n  [safari] th {\n    text-align: initial;\n  }\n\n  #footer {\n    bottom: 0;\n  }\n\n  #items {\n    flex-grow: 1;\n    flex-shrink: 0;\n    display: block;\n    position: -webkit-sticky;\n    position: sticky;\n    width: 100%;\n    left: 0;\n    overflow: visible;\n  }\n\n  [part~='row'] {\n    display: flex;\n    width: 100%;\n    box-sizing: border-box;\n    margin: 0;\n  }\n\n  [part~='row'][loading] [part~='body-cell'] ::slotted(vaadin-grid-cell-content) {\n    visibility: hidden;\n  }\n\n  [column-rendering='lazy'] [part~='body-cell']:not([frozen]):not([frozen-to-end]) {\n    transform: translateX(var(--_grid-lazy-columns-start));\n  }\n\n  #items [part~='row'] {\n    position: absolute;\n  }\n\n  #items [part~='row']:empty {\n    height: 100%;\n  }\n\n  [part~='cell']:not([part~='details-cell']) {\n    flex-shrink: 0;\n    flex-grow: 1;\n    box-sizing: border-box;\n    display: flex;\n    width: 100%;\n    position: relative;\n    align-items: center;\n    padding: 0;\n    white-space: nowrap;\n  }\n\n  [part~='cell'] > [tabindex] {\n    display: flex;\n    align-items: inherit;\n    outline: none;\n    position: absolute;\n    inset: 0;\n  }\n\n  [part~='details-cell'] {\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    box-sizing: border-box;\n    padding: 0;\n  }\n\n  [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n    display: block;\n    width: 100%;\n    box-sizing: border-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n\n  [frozen],\n  [frozen-to-end] {\n    z-index: 2;\n    will-change: transform;\n  }\n\n  [no-scrollbars][safari] #table,\n  [no-scrollbars][firefox] #table {\n    overflow: hidden;\n  }\n\n  /* Reordering styles */\n  :host([reordering]) [part~='cell'] ::slotted(vaadin-grid-cell-content),\n  :host([reordering]) [part~='resize-handle'],\n  #scroller[no-content-pointer-events] [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n    pointer-events: none;\n  }\n\n  [part~='reorder-ghost'] {\n    visibility: hidden;\n    position: fixed;\n    pointer-events: none;\n    opacity: 0.5;\n\n    /* Prevent overflowing the grid in Firefox */\n    top: 0;\n    left: 0;\n  }\n\n  :host([reordering]) {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n  }\n\n  /* Resizing styles */\n  [part~='resize-handle'] {\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    cursor: col-resize;\n    z-index: 1;\n  }\n\n  [part~='resize-handle']::before {\n    position: absolute;\n    content: '';\n    height: 100%;\n    width: 35px;\n    transform: translateX(-50%);\n  }\n\n  [last-column] [part~='resize-handle']::before,\n  [last-frozen] [part~='resize-handle']::before {\n    width: 18px;\n    transform: none;\n    right: 0;\n  }\n\n  [frozen-to-end] [part~='resize-handle'] {\n    left: 0;\n    right: auto;\n  }\n\n  [frozen-to-end] [part~='resize-handle']::before {\n    left: 0;\n    right: auto;\n  }\n\n  [first-frozen-to-end] [part~='resize-handle']::before {\n    width: 18px;\n    transform: none;\n  }\n\n  [first-frozen-to-end] {\n    margin-inline-start: auto;\n  }\n\n  /* Hide resize handle if scrolled to end */\n  :host(:not([overflow~='end'])) [first-frozen-to-end] [part~='resize-handle'] {\n    display: none;\n  }\n\n  #scroller[column-resizing] {\n    -ms-user-select: none;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    user-select: none;\n  }\n\n  /* Sizer styles */\n  #sizer {\n    display: flex;\n    position: absolute;\n    visibility: hidden;\n  }\n\n  #sizer [part~='details-cell'] {\n    display: none !important;\n  }\n\n  #sizer [part~='cell'][hidden] {\n    display: none !important;\n  }\n\n  #sizer [part~='cell'] {\n    display: block;\n    flex-shrink: 0;\n    line-height: 0;\n    height: 0 !important;\n    min-height: 0 !important;\n    max-height: 0 !important;\n    padding: 0 !important;\n    border: none !important;\n  }\n\n  #sizer [part~='cell']::before {\n    content: '-';\n  }\n\n  #sizer [part~='cell'] ::slotted(vaadin-grid-cell-content) {\n    display: none !important;\n  }\n\n  /* RTL specific styles */\n\n  :host([dir='rtl']) #items,\n  :host([dir='rtl']) #header,\n  :host([dir='rtl']) #footer {\n    left: auto;\n  }\n\n  :host([dir='rtl']) [part~='reorder-ghost'] {\n    left: auto;\n    right: 0;\n  }\n\n  :host([dir='rtl']) [part~='resize-handle'] {\n    left: 0;\n    right: auto;\n  }\n\n  :host([dir='rtl']) [part~='resize-handle']::before {\n    transform: translateX(50%);\n  }\n\n  :host([dir='rtl']) [last-column] [part~='resize-handle']::before,\n  :host([dir='rtl']) [last-frozen] [part~='resize-handle']::before {\n    left: 0;\n    right: auto;\n  }\n\n  :host([dir='rtl']) [frozen-to-end] [part~='resize-handle'] {\n    right: 0;\n    left: auto;\n  }\n\n  :host([dir='rtl']) [frozen-to-end] [part~='resize-handle']::before {\n    right: 0;\n    left: auto;\n  }\n\n  @media (forced-colors: active) {\n    [part~='selected-row'] [part~='first-column-cell']::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      border: 2px solid;\n    }\n\n    [part~='focused-cell']::before {\n      outline: 2px solid !important;\n      outline-offset: -1px;\n    }\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2016 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-grid-column.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { GridMixin } from './vaadin-grid-mixin.js';\nimport { gridStyles } from './vaadin-grid-styles.js';\n\nregisterStyles('vaadin-grid', gridStyles, { moduleId: 'vaadin-grid-styles' });\n\n/**\n * `<vaadin-grid>` is a free, high quality data grid / data table Web Component. The content of the\n * the grid can be populated by using renderer callback function.\n *\n * ### Quick Start\n *\n * Start with an assigning an array to the [`items`](#/elements/vaadin-grid#property-items) property to visualize your data.\n *\n * Use the [`<vaadin-grid-column>`](#/elements/vaadin-grid-column) element to configure the grid columns. Set `path` and `header`\n * shorthand properties for the columns to define what gets rendered in the cells of the column.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column path=\"name.first\" header=\"First name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"name.last\" header=\"Last name\"></vaadin-grid-column>\n *   <vaadin-grid-column path=\"email\"></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n *\n * For custom content `vaadin-grid-column` element provides you with three types of `renderer` callback functions: `headerRenderer`,\n * `renderer` and `footerRenderer`.\n *\n * Each of those renderer functions provides `root`, `column`, `model` arguments when applicable.\n * Generate DOM content, append it to the `root` element and control the state\n * of the host element by accessing `column`. Before generating new content,\n * users are able to check if there is already content in `root` for reusing it.\n *\n * Renderers are called on initialization of new column cells and each time the\n * related row model is updated. DOM generated during the renderer call can be reused\n * in the next renderer call and will be provided with the `root` argument.\n * On first call it will be empty.\n *\n * #### Example:\n * ```html\n * <vaadin-grid>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n *   <vaadin-grid-column></vaadin-grid-column>\n * </vaadin-grid>\n * ```\n * ```js\n * const grid = document.querySelector('vaadin-grid');\n * grid.items = [{'name': 'John', 'surname': 'Lennon', 'role': 'singer'},\n *               {'name': 'Ringo', 'surname': 'Starr', 'role': 'drums'}];\n *\n * const columns = grid.querySelectorAll('vaadin-grid-column');\n *\n * columns[0].headerRenderer = function(root) {\n *   root.textContent = 'Name';\n * };\n * columns[0].renderer = function(root, column, model) {\n *   root.textContent = model.item.name;\n * };\n *\n * columns[1].headerRenderer = function(root) {\n *   root.textContent = 'Surname';\n * };\n * columns[1].renderer = function(root, column, model) {\n *   root.textContent = model.item.surname;\n * };\n *\n * columns[2].headerRenderer = function(root) {\n *   root.textContent = 'Role';\n * };\n * columns[2].renderer = function(root, column, model) {\n *   root.textContent = model.item.role;\n * };\n * ```\n *\n * The following properties are available in the `model` argument:\n *\n * Property name | Type | Description\n * --------------|------|------------\n * `index`| Number | The index of the item.\n * `item` | String or Object | The item.\n * `level` | Number | Number of the item's tree sublevel, starts from 0.\n * `expanded` | Boolean | True if the item's tree sublevel is expanded.\n * `selected` | Boolean | True if the item is selected.\n * `detailsOpened` | Boolean | True if the item's row details are open.\n *\n * The following helper elements can be used for further customization:\n * - [`<vaadin-grid-column-group>`](#/elements/vaadin-grid-column-group)\n * - [`<vaadin-grid-filter>`](#/elements/vaadin-grid-filter)\n * - [`<vaadin-grid-sorter>`](#/elements/vaadin-grid-sorter)\n * - [`<vaadin-grid-selection-column>`](#/elements/vaadin-grid-selection-column)\n * - [`<vaadin-grid-tree-toggle>`](#/elements/vaadin-grid-tree-toggle)\n *\n * __Note that the helper elements must be explicitly imported.__\n * If you want to import everything at once you can use the `all-imports.html` bundle.\n *\n * ### Lazy Loading with Function Data Provider\n *\n * In addition to assigning an array to the items property, you can alternatively\n * provide the `<vaadin-grid>` data through the\n * [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) function property.\n * The `<vaadin-grid>` calls this function lazily, only when it needs more data\n * to be displayed.\n *\n * See the [`dataProvider`](#/elements/vaadin-grid#property-dataProvider) property\n * documentation for the detailed data provider arguments description.\n *\n * __Note that expanding the tree grid's item will trigger a call to the `dataProvider`.__\n *\n * __Also, note that when using function data providers, the total number of items\n * needs to be set manually. The total number of items can be returned\n * in the second argument of the data provider callback:__\n *\n * ```javascript\n * grid.dataProvider = ({page, pageSize}, callback) => {\n *   // page: the requested page index\n *   // pageSize: number of items on one page\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n *\n *   fetch(url)\n *     .then((res) => res.json())\n *     .then(({ employees, totalSize }) => {\n *       callback(employees, totalSize);\n *     });\n * };\n * ```\n *\n * __Alternatively, you can use the `size` property to set the total number of items:__\n *\n * ```javascript\n * grid.size = 200; // The total number of items\n * grid.dataProvider = ({page, pageSize}, callback) => {\n *   const url = `https://api.example/data?page=${page}&per_page=${pageSize}`;\n *\n *   fetch(url)\n *     .then((res) => res.json())\n *     .then((resJson) => callback(resJson.employees));\n * };\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name                  | Description\n * ---------------------------|----------------\n * `row`                      | Row in the internal table\n * `body-row`                 | Body row in the internal table\n * `collapsed-row`            | Collapsed row\n * `expanded-row`             | Expanded row\n * `selected-row`             | Selected row\n * `details-opened-row`       | Row with details open\n * `odd-row`                  | Odd row\n * `even-row`                 | Even row\n * `first-row`                | The first body row\n * `last-row`                 | The last body row\n * `dragstart-row`            | Set on the row for one frame when drag is starting.\n * `dragover-above-row`       | Set on the row when the a row is dragged over above\n * `dragover-below-row`       | Set on the row when the a row is dragged over below\n * `dragover-on-top-row`      | Set on the row when the a row is dragged over on top\n * `drag-disabled-row`        | Set to a row that isn't available for dragging\n * `drop-disabled-row`        | Set to a row that can't be dropped on top of\n * `cell`                     | Cell in the internal table\n * `header-cell`              | Header cell in the internal table\n * `body-cell`                | Body cell in the internal table\n * `footer-cell`              | Footer cell in the internal table\n * `details-cell`             | Row details cell in the internal table\n * `focused-cell`             | Focused cell in the internal table\n * `odd-row-cell`             | Cell in an odd row\n * `even-row-cell`            | Cell in an even row\n * `first-row-cell`           | Cell in the first body row\n * `last-row-cell`            | Cell in the last body row\n * `first-header-row-cell`    | Cell in the first header row\n * `first-footer-row-cell`    | Cell in the first footer row\n * `last-header-row-cell`     | Cell in the last header row\n * `last-footer-row-cell`     | Cell in the last footer row\n * `loading-row-cell`         | Cell in a row that is waiting for data from data provider\n * `selected-row-cell`        | Cell in a selected row\n * `collapsed-row-cell`       | Cell in a collapsed row\n * `expanded-row-cell`        | Cell in an expanded row\n * `details-opened-row-cell`  | Cell in an row with details open\n * `dragstart-row-cell`       | Cell in a row that user started to drag (set for one frame)\n * `dragover-above-row-cell`  | Cell in a row that has another row dragged over above\n * `dragover-below-row-cell`  | Cell in a row that has another row dragged over below\n * `dragover-on-top-row-cell` | Cell in a row that has another row dragged over on top\n * `drag-disabled-row-cell`   | Cell in a row that isn't available for dragging\n * `drop-disabled-row-cell`   | Cell in a row that can't be dropped on top of\n * `frozen-cell`              | Frozen cell in the internal table\n * `frozen-to-end-cell`       | Frozen to end cell in the internal table\n * `last-frozen-cell`         | Last frozen cell\n * `first-frozen-to-end-cell` | First cell frozen to end\n * `first-column-cell`        | First visible cell on a row\n * `last-column-cell`         | Last visible cell on a row\n * `reorder-allowed-cell`     | Cell in a column where another column can be reordered\n * `reorder-dragging-cell`    | Cell in a column currently being reordered\n * `resize-handle`            | Handle for resizing the columns\n * `reorder-ghost`            | Ghost element of the header cell being dragged\n *\n * The following state attributes are available for styling:\n *\n * Attribute             | Description                                                                                       | Part name\n * ----------------------|---------------------------------------------------------------------------------------------------|-----------\n * `loading`             | Set when the grid is loading data from data provider                                              | :host\n * `interacting`         | Keyboard navigation in interaction mode                                                           | :host\n * `navigating`          | Keyboard navigation in navigation mode                                                            | :host\n * `overflow`            | Set when rows are overflowing the grid viewport. Possible values: `top`, `bottom`, `start`, `end` | :host\n * `reordering`          | Set when the grid's columns are being reordered                                                   | :host\n * `dragover`            | Set when the grid (not a specific row) is dragged over                                            | :host\n * `dragging-rows`       | Set when grid rows are dragged                                                                    | :host\n * `reorder-status`      | Reflects the status of a cell while columns are being reordered                                   | cell\n * `frozen`              | Frozen cell                                                                                       | cell\n * `frozen-to-end`       | Cell frozen to end                                                                                | cell\n * `last-frozen`         | Last frozen cell                                                                                  | cell\n * `first-frozen-to-end` | First cell frozen to end                                                                          | cell\n * `first-column`        | First visible cell on a row                                                                       | cell\n * `last-column`         | Last visible cell on a row                                                                        | cell\n * `selected`            | Selected row                                                                                      | row\n * `expanded`            | Expanded row                                                                                      | row\n * `details-opened`      | Row with details open                                                                             | row\n * `loading`             | Row that is waiting for data from data provider                                                   | row\n * `odd`                 | Odd row                                                                                           | row\n * `first`               | The first body row                                                                                | row\n * `last`                | The last body row                                                                                 | row\n * `dragstart`           | Set for one frame when starting to drag a row. The value is a number when dragging multiple rows  | row\n * `dragover`            | Set when the row is dragged over                                                                  | row\n * `drag-disabled`       | Set to a row that isn't available for dragging                                                    | row\n * `drop-disabled`       | Set to a row that can't be dropped on top of                                                      | row\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} active-item-changed - Fired when the `activeItem` property changes.\n * @fires {CustomEvent} cell-activate - Fired when the cell is activated with click or keyboard.\n * @fires {CustomEvent} cell-focus - Fired when a cell is focused with click or keyboard navigation.\n * @fires {CustomEvent} column-reorder - Fired when the columns in the grid are reordered.\n * @fires {CustomEvent} column-resize - Fired when the grid column resize is finished.\n * @fires {CustomEvent} data-provider-changed - Fired when the `dataProvider` property changes.\n * @fires {CustomEvent} expanded-items-changed - Fired when the `expandedItems` property changes.\n * @fires {CustomEvent} grid-dragstart - Fired when starting to drag grid rows.\n * @fires {CustomEvent} grid-dragend - Fired when the dragging of the rows ends.\n * @fires {CustomEvent} grid-drop - Fired when a drop occurs on top of the grid.\n * @fires {CustomEvent} loading-changed - Fired when the `loading` property changes.\n * @fires {CustomEvent} selected-items-changed - Fired when the `selectedItems` property changes.\n * @fires {CustomEvent} size-changed - Fired when the `size` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes GridMixin\n * @mixes ThemableMixin\n * @mixes ControllerMixin\n */\nclass Grid extends GridMixin(ElementMixin(ThemableMixin(ControllerMixin(PolymerElement)))) {\n  static get template() {\n    return html`\n      <div\n        id=\"scroller\"\n        safari$=\"[[_safari]]\"\n        ios$=\"[[_ios]]\"\n        loading$=\"[[loading]]\"\n        column-reordering-allowed$=\"[[columnReorderingAllowed]]\"\n      >\n        <table id=\"table\" role=\"treegrid\" aria-multiselectable=\"true\" tabindex=\"0\">\n          <caption id=\"sizer\" part=\"row\"></caption>\n          <thead id=\"header\" role=\"rowgroup\"></thead>\n          <tbody id=\"items\" role=\"rowgroup\"></tbody>\n          <tfoot id=\"footer\" role=\"rowgroup\"></tfoot>\n        </table>\n\n        <div part=\"reorder-ghost\"></div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n\n      <div id=\"focusexit\" tabindex=\"0\"></div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-grid';\n  }\n}\n\ndefineCustomElement(Grid);\n\nexport { Grid };\n"],
  "mappings": "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",
  "names": ["get", "filter", "column", "cell", "index", "row", "filter", "sorter", "row", "cell", "col"]
}
