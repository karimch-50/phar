{
  "version": 3,
  "sources": ["../../@vaadin/message-input/theme/lumo/vaadin-message-input-styles.js", "../../@vaadin/message-input/src/vaadin-message-input.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/sizing.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/style.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-message-input',\n  css`\n    :host {\n      padding: var(--lumo-space-s) var(--lumo-space-m);\n    }\n\n    ::slotted([slot='textarea']) {\n      margin-inline-end: var(--lumo-space-s);\n    }\n  `,\n  { moduleId: 'lumo-message-input' },\n);\n", "/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/button/src/vaadin-button.js';\nimport '@vaadin/text-area/src/vaadin-text-area.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * `<vaadin-message-input>` is a Web Component for sending messages.\n * It consists of a text area that grows on along with the content, and a send button to send message.\n *\n * The message can be sent by one of the following actions:\n * - by pressing Enter (use Shift + Enter to add a new line)\n * - by clicking `submit` button.\n *\n * ```html\n * <vaadin-message-input></vaadin-message-input>\n * ```\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ControllerMixin\n * @mixes ThemableMixin\n * @mixes ElementMixin\n */\nclass MessageInput extends ElementMixin(ThemableMixin(ControllerMixin(PolymerElement))) {\n  static get properties() {\n    return {\n      /**\n       * Current content of the text input field\n       */\n      value: {\n        type: String,\n        value: '',\n      },\n\n      /**\n       * The object used to localize this component.\n       * For changing the default localization, change the entire\n       * `i18n` object.\n       *\n       * The object has the following JSON structure and default values:\n       *\n       * ```\n       * {\n       *   // Used as the button label\n       *   send: 'Send',\n       *\n       *   // Used as the input field's placeholder and aria-label\n       *   message: 'Message'\n       * }\n       * ```\n       *\n       * @type {!MessageInputI18n}\n       * @default {English}\n       */\n      i18n: {\n        type: Object,\n        value: () => ({\n          send: 'Send',\n          message: 'Message',\n        }),\n      },\n\n      /**\n       * Set to true to disable this element.\n       * @type {boolean}\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /** @private */\n      _button: {\n        type: Object,\n      },\n\n      /** @private */\n      _textArea: {\n        type: Object,\n      },\n    };\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          align-items: flex-start;\n          box-sizing: border-box;\n          display: flex;\n          max-height: 50vh;\n          overflow: hidden;\n          flex-shrink: 0;\n        }\n\n        :host([hidden]) {\n          display: none !important;\n        }\n\n        ::slotted([slot='button']) {\n          flex-shrink: 0;\n        }\n\n        ::slotted([slot='textarea']) {\n          align-self: stretch;\n          flex-grow: 1;\n        }\n      </style>\n      <slot name=\"textarea\"></slot>\n\n      <slot name=\"button\"></slot>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-message-input';\n  }\n\n  static get observers() {\n    return [\n      '__buttonPropsChanged(_button, disabled, i18n)',\n      '__textAreaPropsChanged(_textArea, disabled, i18n, value)',\n    ];\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._buttonController = new SlotController(this, 'button', 'vaadin-button', {\n      initializer: (btn) => {\n        btn.setAttribute('theme', 'primary contained');\n\n        btn.addEventListener('click', () => {\n          this.__submit();\n        });\n\n        this._button = btn;\n      },\n    });\n    this.addController(this._buttonController);\n\n    this._textAreaController = new SlotController(this, 'textarea', 'vaadin-text-area', {\n      initializer: (textarea) => {\n        textarea.addEventListener('value-changed', (event) => {\n          this.value = event.detail.value;\n        });\n\n        textarea.addEventListener('keydown', (event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            this.__submit();\n          }\n        });\n\n        const input = textarea.inputElement;\n        input.removeAttribute('aria-labelledby');\n\n        // Set initial height to one row\n        input.setAttribute('rows', 1);\n        input.style.minHeight = '0';\n\n        this._textArea = textarea;\n      },\n    });\n    this.addController(this._textAreaController);\n\n    this._tooltipController = new TooltipController(this);\n    this.addController(this._tooltipController);\n  }\n\n  /** @private */\n  __buttonPropsChanged(button, disabled, i18n) {\n    if (button) {\n      button.disabled = disabled;\n      button.textContent = i18n.send;\n    }\n  }\n\n  /** @private */\n  __textAreaPropsChanged(textArea, disabled, i18n, value) {\n    if (textArea) {\n      textArea.disabled = disabled;\n      textArea.value = value;\n\n      const message = i18n.message;\n      textArea.placeholder = message;\n\n      if (message) {\n        textArea.inputElement.setAttribute('aria-label', message);\n      } else {\n        textArea.inputElement.removeAttribute('aria-label');\n      }\n    }\n  }\n\n  /**\n   * Submits the current value as an custom event named 'submit'.\n   * It also clears the text input and refocuses it for sending another message.\n   * In UI, can be triggered by pressing the submit button or pressing enter key when field is focused.\n   * It does not submit anything if text is empty.\n   */\n  __submit() {\n    if (this.value !== '') {\n      this.dispatchEvent(new CustomEvent('submit', { detail: { value: this.value } }));\n      this.value = '';\n    }\n    this._textArea.focus();\n  }\n\n  /**\n   * Fired when a new message is submitted with `<vaadin-message-input>`, either\n   * by clicking the \"send\" button, or pressing the Enter key.\n   * @event submit\n   */\n}\n\ndefineCustomElement(MessageInput);\n\nexport { MessageInput };\n"],
  "mappings": "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",
  "names": []
}
