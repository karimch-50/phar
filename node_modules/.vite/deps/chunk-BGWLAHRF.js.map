{
  "version": 3,
  "sources": ["../../@vaadin/component-base/src/overlay-class-mixin.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2023 - 2024 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A mixin that forwards CSS class names to the internal overlay element\n * by setting the `overlayClass` property or `overlay-class` attribute.\n *\n * @polymerMixin\n */\nexport const OverlayClassMixin = (superclass) =>\n  class OverlayClassMixinClass extends superclass {\n    static get properties() {\n      return {\n        /**\n         * A space-delimited list of CSS class names to set on the overlay element.\n         * This property does not affect other CSS class names set manually via JS.\n         *\n         * Note, if the CSS class name was set with this property, clearing it will\n         * remove it from the overlay, even if the same class name was also added\n         * manually, e.g. by using `classList.add()` in the `renderer` function.\n         *\n         * @attr {string} overlay-class\n         */\n        overlayClass: {\n          type: String,\n        },\n\n        /**\n         * An overlay element on which CSS class names are set.\n         *\n         * @protected\n         */\n        _overlayElement: {\n          type: Object,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['__updateOverlayClassNames(overlayClass, _overlayElement)'];\n    }\n\n    /** @private */\n    __updateOverlayClassNames(overlayClass, overlayElement) {\n      if (!overlayElement) {\n        return;\n      }\n\n      // Overlay is set but overlayClass is not set\n      if (overlayClass === undefined) {\n        return;\n      }\n\n      const { classList } = overlayElement;\n\n      if (!this.__initialClasses) {\n        this.__initialClasses = new Set(classList);\n      }\n\n      if (Array.isArray(this.__previousClasses)) {\n        // Remove old classes that no longer apply\n        const classesToRemove = this.__previousClasses.filter((name) => !this.__initialClasses.has(name));\n        if (classesToRemove.length > 0) {\n          classList.remove(...classesToRemove);\n        }\n      }\n\n      // Add new classes based on the overlayClass\n      const classesToAdd = typeof overlayClass === 'string' ? overlayClass.split(' ').filter(Boolean) : [];\n      if (classesToAdd.length > 0) {\n        classList.add(...classesToAdd);\n      }\n\n      this.__previousClasses = classesToAdd;\n    }\n  };\n"],
  "mappings": ";AAYO,IAAM,oBAAoB,CAAC,eAChC,MAAM,+BAA+B,WAAW;AAAA,EAC9C,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWL,cAAc;AAAA,QACZ,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,iBAAiB;AAAA,QACf,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO,CAAC,0DAA0D;AAAA,EACpE;AAAA;AAAA,EAGA,0BAA0B,cAAc,gBAAgB;AACtD,QAAI,CAAC,gBAAgB;AACnB;AAAA,IACF;AAGA,QAAI,iBAAiB,QAAW;AAC9B;AAAA,IACF;AAEA,UAAM,EAAE,UAAU,IAAI;AAEtB,QAAI,CAAC,KAAK,kBAAkB;AAC1B,WAAK,mBAAmB,IAAI,IAAI,SAAS;AAAA,IAC3C;AAEA,QAAI,MAAM,QAAQ,KAAK,iBAAiB,GAAG;AAEzC,YAAM,kBAAkB,KAAK,kBAAkB,OAAO,CAAC,SAAS,CAAC,KAAK,iBAAiB,IAAI,IAAI,CAAC;AAChG,UAAI,gBAAgB,SAAS,GAAG;AAC9B,kBAAU,OAAO,GAAG,eAAe;AAAA,MACrC;AAAA,IACF;AAGA,UAAM,eAAe,OAAO,iBAAiB,WAAW,aAAa,MAAM,GAAG,EAAE,OAAO,OAAO,IAAI,CAAC;AACnG,QAAI,aAAa,SAAS,GAAG;AAC3B,gBAAU,IAAI,GAAG,YAAY;AAAA,IAC/B;AAEA,SAAK,oBAAoB;AAAA,EAC3B;AACF;",
  "names": []
}
