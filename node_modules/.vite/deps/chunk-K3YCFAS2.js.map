{
  "version": 3,
  "sources": ["../../ol/src/ImageBase.js", "../../ol/src/Image.js"],
  "sourcesContent": ["/**\n * @module ol/ImageBase\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {abstract} from './util.js';\n\n/**\n * @abstract\n */\nclass ImageBase extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default} state State.\n   */\n  constructor(extent, resolution, pixelRatio, state) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = state;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    return abstract();\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n}\n\nexport default ImageBase;\n", "/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAA;;EAAA,SAAA,QAAA;AAAwB,cAAAA,YAAA,MAAA;AAOtB,aAAAA,WAAY,QAAQ,YAAY,YAAY,OAAK;AAAjD,UAAA,QACE,OAAA,KAAA,IAAA,KAAO;AAMP,YAAK,SAAS;AAMd,YAAK,cAAc;AAMnB,YAAK,aAAa;AAMlB,YAAK,QAAQ;;IACf;AAKA,IAAAA,WAAA,UAAA,UAAA,WAAA;AACE,WAAK,cAAc,kBAAU,MAAM;IACrC;AAKA,IAAAA,WAAA,UAAA,YAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,WAAA,UAAA,WAAA,WAAA;AACE,aAAO,SAAQ;IACjB;AAKA,IAAAA,WAAA,UAAA,gBAAA,WAAA;AACE,aAAO,KAAK;IACd;AAKA,IAAAA,WAAA,UAAA,gBAAA,WAAA;AACE;;QAA8B,KAAK;;IACrC;AAKA,IAAAA,WAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAMA,IAAAA,WAAA,UAAA,OAAA,WAAA;AACE,eAAQ;IACV;AACF,WAAAA;EAAA,EArFwB,cAAW;;AAuFnC,IAAA,oBAAe;;;;;;;;;;;;;;;;;;;;;;;;ACrEf,IAAA;;EAAA,SAAA,QAAA;AAA2B,IAAAC,WAAAC,eAAA,MAAA;AASzB,aAAAA,cACE,QACA,YACA,YACA,KACA,aACA,mBAAiB;AANnB,UAAA,QAQE,OAAA,KAAA,MAAM,QAAQ,YAAY,YAAY,mBAAW,IAAI,KAAC;AAMtD,YAAK,OAAO;AAMZ,YAAK,SAAS,IAAI,MAAK;AACvB,UAAI,gBAAgB,MAAM;AACxB,cAAK,OAAO,cAAc;;AAO5B,YAAK,YAAY;AAMjB,YAAK,QAAQ,mBAAW;AAMxB,YAAK,qBAAqB;;IAC5B;AAMA,IAAAA,cAAA,UAAA,WAAA,WAAA;AACE,aAAO,KAAK;IACd;AAOA,IAAAA,cAAA,UAAA,oBAAA,WAAA;AACE,WAAK,QAAQ,mBAAW;AACxB,WAAK,eAAc;AACnB,WAAK,QAAO;IACd;AAOA,IAAAA,cAAA,UAAA,mBAAA,WAAA;AACE,UAAI,KAAK,eAAe,QAAW;AACjC,aAAK,aAAa,UAAU,KAAK,MAAM,IAAI,KAAK,OAAO;;AAEzD,WAAK,QAAQ,mBAAW;AACxB,WAAK,eAAc;AACnB,WAAK,QAAO;IACd;AAQA,IAAAA,cAAA,UAAA,OAAA,WAAA;AACE,UAAI,KAAK,SAAS,mBAAW,QAAQ,KAAK,SAAS,mBAAW,OAAO;AACnE,aAAK,QAAQ,mBAAW;AACxB,aAAK,QAAO;AACZ,aAAK,mBAAmB,MAAM,KAAK,IAAI;AACvC,aAAK,YAAY,YACf,KAAK,QACL,KAAK,iBAAiB,KAAK,IAAI,GAC/B,KAAK,kBAAkB,KAAK,IAAI,CAAC;;IAGvC;AAKA,IAAAA,cAAA,UAAA,WAAA,SAAS,OAAK;AACZ,WAAK,SAAS;AACd,WAAK,aAAa,UAAU,KAAK,MAAM,IAAI,KAAK,OAAO;IACzD;AAOA,IAAAA,cAAA,UAAA,iBAAA,WAAA;AACE,UAAI,KAAK,WAAW;AAClB,aAAK,UAAS;AACd,aAAK,YAAY;;IAErB;AACF,WAAAA;EAAA,EA5H2B,iBAAS;;AAoI9B,SAAU,YAAY,OAAO,aAAa,cAAY;AAC1D,MAAM;;IAAuC;;AAC7C,MAAI,YAAY;AAChB,MAAI,WAAW;AACf,MAAI,SAAS;AAEb,MAAM,eAAe;IACnB,WAAW,KAAK,kBAAU,MAAM,WAAA;AAC9B,eAAS;AACT,UAAI,CAAC,UAAU;AACb,oBAAW;;IAEf,CAAC;;AAGH,MAAI,IAAI,OAAO,cAAc;AAC3B,eAAW;AACX,QACG,OAAM,EACN,KAAK,WAAA;AACJ,UAAI,WAAW;AACb,oBAAW;;IAEf,CAAC,EACA,MAAM,SAAU,OAAK;AACpB,UAAI,WAAW;AACb,YAAI,QAAQ;AACV,sBAAW;eACN;AACL,uBAAY;;;IAGlB,CAAC;SACE;AACL,iBAAa,KAAK,WAAW,KAAK,kBAAU,OAAO,YAAY,CAAC;;AAGlE,SAAO,SAAS,WAAQ;AACtB,gBAAY;AACZ,iBAAa,QAAQ,aAAa;EACpC;AACF;AAEA,IAAA,gBAAe;",
  "names": ["ImageBase", "__extends", "ImageWrapper"]
}
