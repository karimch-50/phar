{
  "version": 3,
  "sources": ["../../ol/src/style/Image.js", "../../ol/src/colorlike.js", "../../ol/src/render/canvas.js", "../../ol/src/style/RegularShape.js", "../../ol/src/style/Circle.js", "../../ol/src/style/Style.js"],
  "sourcesContent": ["/**\n * @module ol/style/Image\n */\nimport {abstract} from '../util.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nclass ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n  }\n\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  getOpacity() {\n    return this.opacity_;\n  }\n\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  getDisplacement() {\n    return this.displacement_;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  getAnchor() {\n    return abstract();\n  }\n\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getImage(pixelRatio) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getHitDetectionImage() {\n    return abstract();\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return 1;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return abstract();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  getOrigin() {\n    return abstract();\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  getSize() {\n    return abstract();\n  }\n\n  /**\n   * Set the displacement.\n   *\n   * @param {Array<number>} displacement Displacement.\n   * @api\n   */\n  setDisplacement(displacement) {\n    this.displacement_ = displacement;\n  }\n\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  setOpacity(opacity) {\n    this.opacity_ = opacity;\n  }\n\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    abstract();\n  }\n}\n\nexport default ImageStyle;\n", "/**\n * @module ol/colorlike\n */\nimport {toString} from './color.js';\n\n/**\n * A type accepted by CanvasRenderingContext2D.fillStyle\n * or CanvasRenderingContext2D.strokeStyle.\n * Represents a color, pattern, or gradient. The origin for patterns and\n * gradients as fill style is an increment of 512 css pixels from map coordinate\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\n * must be a factor of two (2, 4, 8, ..., 512).\n *\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\n * @api\n */\n\n/**\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\n * @api\n */\nexport function asColorLike(color) {\n  if (Array.isArray(color)) {\n    return toString(color);\n  } else {\n    return color;\n  }\n}\n", "/**\n * @module ol/render/canvas\n */\nimport BaseObject from '../Object.js';\nimport EventTarget from '../events/Target.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\nimport {clear} from '../obj.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getFontParameters} from '../css.js';\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\n */\n\n/**\n * @typedef Label\n * @property {number} width Width.\n * @property {number} height Height.\n * @property {Array<string|number>} contextInstructions ContextInstructions.\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\n * @property {Array<number>} currentLineDash Current LineDash.\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\n * @property {number} [currentLineWidth] Current LineWidth.\n * @property {number} [currentMiterLimit] Current MiterLimit.\n * @property {number} [lastStroke] Last stroke.\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {CanvasLineCap} [lineCap] LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} [lineDashOffset] LineDashOffset.\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\n * @property {number} [lineWidth] LineWidth.\n * @property {number} [miterLimit] MiterLimit.\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} lineWidth LineWidth.\n * @property {number} miterLimit MiterLimit.\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font Font.\n * @property {string} [textAlign] TextAlign.\n * @property {string} textBaseline TextBaseline.\n * @property {string} [placement] Placement.\n * @property {number} [maxAngle] MaxAngle.\n * @property {boolean} [overflow] Overflow.\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\n * @property {import(\"../size.js\").Size} [scale] Scale.\n * @property {Array<number>} [padding] Padding.\n */\n\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFont = '10px sans-serif';\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultFillStyle = '#000';\n\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport const defaultLineCap = 'round';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultLineDash = [];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineDashOffset = 0;\n\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport const defaultLineJoin = 'round';\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultMiterLimit = 10;\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultStrokeStyle = '#000';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultTextAlign = 'center';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultTextBaseline = 'middle';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultPadding = [0, 0, 0, 0];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineWidth = 1;\n\n/**\n * @type {BaseObject}\n */\nexport const checkedFonts = new BaseObject();\n\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache~LRUCache#setSize cache.setSize()}.\n * Deprecated - there is no label cache any more.\n * @type {?}\n * @api\n * @deprecated\n */\nexport const labelCache = new EventTarget();\nlabelCache.setSize = function () {\n  console.warn('labelCache is deprecated.'); //eslint-disable-line\n};\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet measureContext = null;\n\n/**\n * @type {string}\n */\nlet measureFont;\n\n/**\n * @type {!Object<string, number>}\n */\nexport const textHeights = {};\n\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport const registerFont = (function () {\n  const retries = 100;\n  const size = '32px ';\n  const referenceFonts = ['monospace', 'serif'];\n  const len = referenceFonts.length;\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  let interval, referenceWidth;\n\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    let available = true;\n    for (let i = 0; i < len; ++i) {\n      const referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\n        text\n      );\n      if (fontFamily != referenceFont) {\n        const width = measureTextWidth(\n          fontStyle +\n            ' ' +\n            fontWeight +\n            ' ' +\n            size +\n            fontFamily +\n            ',' +\n            referenceFont,\n          text\n        );\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n\n  function check() {\n    let done = true;\n    const fonts = checkedFonts.getKeys();\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\n      const font = fonts[i];\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          clear(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    const font = getFontParameters(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    for (let i = 0, ii = families.length; i < ii; ++i) {\n      const family = families[i];\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n})();\n\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport const measureTextHeight = (function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (WORKER_OFFSCREEN_CANVAS) {\n        const font = getFontParameters(fontSpec);\n        const metrics = measureText(fontSpec, 'Žg');\n        const lineHeight = isNaN(Number(font.lineHeight))\n          ? 1.2\n          : Number(font.lineHeight);\n        height =\n          lineHeight *\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n})();\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @return {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = measureTextWidth(font, text);\n  cache[text] = width;\n  return width;\n}\n\n/**\n * @param {TextState} baseStyle Base style.\n * @param {Array<string>} chunks Text chunks to measure.\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\n */\nexport function getTextDimensions(baseStyle, chunks) {\n  const widths = [];\n  const heights = [];\n  const lineWidths = [];\n  let width = 0;\n  let lineWidth = 0;\n  let height = 0;\n  let lineHeight = 0;\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\n    const text = chunks[i];\n    if (text === '\\n' || i === ii) {\n      width = Math.max(width, lineWidth);\n      lineWidths.push(lineWidth);\n      lineWidth = 0;\n      height += lineHeight;\n      continue;\n    }\n    const font = chunks[i + 1] || baseStyle.font;\n    const currentWidth = measureTextWidth(font, text);\n    widths.push(currentWidth);\n    lineWidth += currentWidth;\n    const currentHeight = measureTextHeight(font);\n    heights.push(currentHeight);\n    lineHeight = Math.max(lineHeight, currentHeight);\n  }\n  return {width, height, widths, heights, lineWidths};\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nexport function drawImageOrLabel(\n  context,\n  transform,\n  opacity,\n  labelOrImage,\n  originX,\n  originY,\n  w,\n  h,\n  x,\n  y,\n  scale\n) {\n  context.save();\n\n  if (opacity !== 1) {\n    context.globalAlpha *= opacity;\n  }\n  if (transform) {\n    context.setTransform.apply(context, transform);\n  }\n\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      0,\n      0,\n      w,\n      h\n    );\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      x,\n      y,\n      w * scale[0],\n      h * scale[1]\n    );\n  }\n\n  context.restore();\n}\n\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(\n        context,\n        contextInstructions[i + 1]\n      );\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}\n", "/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    if (!size) {\n      return null;\n    }\n    const displacement = this.getDisplacement();\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n", "/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n", "/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Stroke from './Stroke.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void}\n * RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import GeometryType from 'ol/geom/GeometryType';\n *  import {Circle, Fill, Stroke, Style} from 'ol/style';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles[GeometryType.POLYGON] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n *\n *  styles[GeometryType.LINE_STRING] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n *\n *  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\n *    styles[GeometryType.LINE_STRING]\n *  );\n *\n *  styles[GeometryType.POINT] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n *\n *  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\n *    GeometryType.POLYGON\n *  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [opt_options] Style options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ =\n      options.hitDetectionRenderer !== undefined\n        ? options.hitDetectionRenderer\n        : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/GeometryType.js\").default, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles[GeometryType.POLYGON] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles[GeometryType.MULTI_POLYGON] = styles[GeometryType.POLYGON];\n\n  styles[GeometryType.LINE_STRING] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles[GeometryType.MULTI_LINE_STRING] = styles[GeometryType.LINE_STRING];\n\n  styles[GeometryType.CIRCLE] = styles[GeometryType.POLYGON].concat(\n    styles[GeometryType.LINE_STRING]\n  );\n\n  styles[GeometryType.POINT] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles[GeometryType.MULTI_POINT] = styles[GeometryType.POINT];\n\n  styles[GeometryType.GEOMETRY_COLLECTION] = styles[\n    GeometryType.POLYGON\n  ].concat(styles[GeometryType.LINE_STRING], styles[GeometryType.POINT]);\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n"],
  "mappings": "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",
  "names": ["ImageStyle", "RegularShape", "__extends", "CircleStyle", "Style"]
}
