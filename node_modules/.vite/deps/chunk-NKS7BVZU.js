import {
  DialogBaseMixin,
  dialogOverlay,
  dialogOverlay2
} from "./chunk-XLXC57MX.js";
import {
  setAriaIDReference
} from "./chunk-XWHFZQ32.js";
import {
  OverlayClassMixin
} from "./chunk-BGWLAHRF.js";
import {
  overlay
} from "./chunk-UFBVVQ65.js";
import {
  OverlayMixin,
  overlayStyles
} from "./chunk-HYO4DUYL.js";
import {
  ElementMixin
} from "./chunk-MWSAWSJ3.js";
import {
  SlotController
} from "./chunk-6C6BQOMD.js";
import {
  generateUniqueId
} from "./chunk-ZPXTDJKE.js";
import {
  ControllerMixin
} from "./chunk-QGCYTHXO.js";
import {
  ThemableMixin,
  ThemePropertyMixin,
  registerStyles
} from "./chunk-BBNA52CT.js";
import {
  css
} from "./chunk-CMT2GIH3.js";
import {
  DirMixin
} from "./chunk-B6NQGUVK.js";
import {
  defineCustomElement
} from "./chunk-JDVQIXGE.js";
import {
  PolymerElement
} from "./chunk-4TYUW4EB.js";
import {
  html
} from "./chunk-XB4RSW42.js";

// node_modules/@vaadin/confirm-dialog/theme/lumo/vaadin-confirm-dialog-styles.js
registerStyles(
  "vaadin-confirm-dialog-overlay",
  [
    overlay,
    dialogOverlay,
    css`
      [part='header'] ::slotted(h3) {
        margin-top: 0 !important;
        margin-bottom: 0 !important;
        margin-inline-start: calc(var(--lumo-space-l) - var(--lumo-space-m));
      }

      [part='message'] {
        width: 25em;
        min-width: 100%;
        max-width: 100%;
      }

      ::slotted([slot$='button'][theme~='tertiary']) {
        padding-left: var(--lumo-space-s);
        padding-right: var(--lumo-space-s);
      }

      [part='cancel-button'] {
        flex-grow: 1;
      }

      @media (max-width: 360px) {
        [part='footer'] {
          flex-direction: column-reverse;
          align-items: stretch;
          padding: var(--lumo-space-s) var(--lumo-space-l);
          gap: var(--lumo-space-s);
        }

        ::slotted([slot$='button']) {
          width: 100%;
          margin: 0;
        }
      }
    `
  ],
  { moduleId: "lumo-confirm-dialog-overlay" }
);

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog-base-mixin.js
var ConfirmDialogBaseMixin = (superClass) => class ConfirmDialogBaseMixinClass extends superClass {
  static get properties() {
    return {
      /**
       * Set the `aria-label` attribute for assistive technologies like
       * screen readers. An empty string value for this property (the
       * default) means that the `aria-label` attribute is not present.
       */
      ariaLabel: {
        type: String,
        value: ""
      },
      /**
       * Height to be set on the overlay content.
       */
      contentHeight: {
        type: String
      },
      /**
       * Width to be set on the overlay content.
       */
      contentWidth: {
        type: String
      }
    };
  }
  static get observers() {
    return [
      "__updateContentHeight(contentHeight, _overlayElement)",
      "__updateContentWidth(contentWidth, _overlayElement)"
    ];
  }
  /** @private */
  __updateDimension(overlay2, dimension, value) {
    const prop = `--_vaadin-confirm-dialog-content-${dimension}`;
    if (value) {
      overlay2.style.setProperty(prop, value);
    } else {
      overlay2.style.removeProperty(prop);
    }
  }
  /** @private */
  __updateContentHeight(height, overlay2) {
    if (overlay2) {
      this.__updateDimension(overlay2, "height", height);
    }
  }
  /** @private */
  __updateContentWidth(width, overlay2) {
    if (overlay2) {
      this.__updateDimension(overlay2, "width", width);
    }
  }
};

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay-styles.js
var confirmDialogOverlay = css`
  :host {
    --_vaadin-confirm-dialog-content-width: auto;
    --_vaadin-confirm-dialog-content-height: auto;
  }

  [part='overlay'] {
    width: var(--_vaadin-confirm-dialog-content-width);
    height: var(--_vaadin-confirm-dialog-content-height);
  }

  ::slotted([slot='header']) {
    pointer-events: auto;
  }

  /* Make buttons clickable */
  [part='footer'] > * {
    pointer-events: all;
  }
`;

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay.js
registerStyles("vaadin-confirm-dialog-overlay", [overlayStyles, dialogOverlay2, confirmDialogOverlay], {
  moduleId: "vaadin-confirm-dialog-overlay-styles"
});
var ConfirmDialogOverlay = class extends OverlayMixin(DirMixin(ThemableMixin(PolymerElement))) {
  static get is() {
    return "vaadin-confirm-dialog-overlay";
  }
  static get template() {
    return html`
      <div part="backdrop" id="backdrop" hidden$="[[!withBackdrop]]"></div>
      <div part="overlay" id="overlay" tabindex="0">
        <section id="resizerContainer" class="resizer-container">
          <header part="header"><slot name="header"></slot></header>
          <div part="content" id="content">
            <div part="message"><slot></slot></div>
          </div>
          <footer part="footer" role="toolbar">
            <div part="cancel-button">
              <slot name="cancel-button"></slot>
            </div>
            <div part="reject-button">
              <slot name="reject-button"></slot>
            </div>
            <div part="confirm-button">
              <slot name="confirm-button"></slot>
            </div>
          </footer>
        </section>
      </div>
    `;
  }
  /**
   * @protected
   * @override
   */
  ready() {
    super.ready();
    this.setAttribute("has-header", "");
    this.setAttribute("has-footer", "");
  }
};
defineCustomElement(ConfirmDialogOverlay);
var ConfirmDialogDialog = class extends ConfirmDialogBaseMixin(
  DialogBaseMixin(OverlayClassMixin(ThemePropertyMixin(PolymerElement)))
) {
  static get is() {
    return "vaadin-confirm-dialog-dialog";
  }
  static get template() {
    return html`
      <style>
        :host {
          display: none;
        }
      </style>

      <vaadin-confirm-dialog-overlay
        id="overlay"
        opened="[[opened]]"
        on-opened-changed="_onOverlayOpened"
        on-mousedown="_bringOverlayToFront"
        on-touchstart="_bringOverlayToFront"
        theme$="[[_theme]]"
        modeless="[[modeless]]"
        with-backdrop="[[!modeless]]"
        resizable$="[[resizable]]"
        aria-label$="[[ariaLabel]]"
        restore-focus-on-close
        focus-trap
      ></vaadin-confirm-dialog-overlay>
    `;
  }
};
defineCustomElement(ConfirmDialogDialog);

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog-mixin.js
var ConfirmDialogMixin = (superClass) => class ConfirmDialogMixinClass extends superClass {
  static get properties() {
    return {
      /**
       * Sets the `aria-describedby` attribute of the overlay element.
       *
       * By default, all elements inside the message area are linked
       * through the `aria-describedby` attribute. However, there are
       * cases where this can confuse screen reader users (e.g. the dialog
       * may present a password confirmation form). For these cases,
       * it's better to associate only the elements that will help describe
       * the confirmation dialog through this API.
       */
      accessibleDescriptionRef: {
        type: String
      },
      /**
       * True if the overlay is currently displayed.
       * @type {boolean}
       */
      opened: {
        type: Boolean,
        value: false,
        notify: true
      },
      /**
       * Set the confirmation dialog title.
       * @type {string}
       */
      header: {
        type: String,
        value: ""
      },
      /**
       * Set the message or confirmation question.
       */
      message: {
        type: String,
        value: ""
      },
      /**
       * Text displayed on confirm-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} confirm-text
       * @type {string}
       */
      confirmText: {
        type: String,
        value: "Confirm"
      },
      /**
       * Theme for a confirm-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} confirm-theme
       * @type {string}
       */
      confirmTheme: {
        type: String,
        value: "primary"
      },
      /**
       * Set to true to disable closing dialog on Escape press
       * @attr {boolean} no-close-on-esc
       * @type {boolean}
       */
      noCloseOnEsc: {
        type: Boolean,
        value: false
      },
      /**
       * Whether to show reject button or not.
       * @attr {boolean} reject-button-visible
       * @type {boolean}
       */
      rejectButtonVisible: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      /**
       * Text displayed on reject-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} reject-text
       * @type {string}
       */
      rejectText: {
        type: String,
        value: "Reject"
      },
      /**
       * Theme for a reject-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} reject-theme
       * @type {string}
       */
      rejectTheme: {
        type: String,
        value: "error tertiary"
      },
      /**
       * Whether to show cancel button or not.
       * @attr {boolean} cancel-button-visible
       * @type {boolean}
       */
      cancelButtonVisible: {
        type: Boolean,
        reflectToAttribute: true,
        value: false
      },
      /**
       * Text displayed on cancel-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} cancel-text
       * @type {string}
       */
      cancelText: {
        type: String,
        value: "Cancel"
      },
      /**
       * Theme for a cancel-button.
       * This only affects the default button, custom slotted buttons will not be altered.
       * @attr {string} cancel-theme
       * @type {string}
       */
      cancelTheme: {
        type: String,
        value: "tertiary"
      },
      /**
       * A space-delimited list of CSS class names
       * to set on the underlying overlay element.
       *
       * @attr {string} overlay-class
       */
      overlayClass: {
        type: String
      },
      /**
       * A reference to the "Cancel" button which will be teleported to the overlay.
       * @private
       */
      _cancelButton: {
        type: Object
      },
      /**
       * A reference to the "Confirm" button which will be teleported to the overlay.
       * @private
       */
      _confirmButton: {
        type: Object
      },
      /**
       * A reference to the "header" node which will be teleported to the overlay.
       * @private
       */
      _headerNode: {
        type: Object
      },
      /**
       * A list of message nodes which will be placed in the overlay default slot.
       * @private
       */
      _messageNodes: {
        type: Array,
        value: () => []
      },
      /**
       * A reference to the overlay element.
       * @private
       */
      _overlayElement: {
        type: Object,
        sync: true
      },
      /**
       * A reference to the "Reject" button which will be teleported to the overlay.
       * @private
       */
      _rejectButton: {
        type: Object
      },
      /**
       * Height to be set on the overlay content.
       * @protected
       */
      _contentHeight: {
        type: String
      },
      /**
       * Width to be set on the overlay content.
       * @protected
       */
      _contentWidth: {
        type: String
      }
    };
  }
  static get observers() {
    return [
      "__updateConfirmButton(_confirmButton, confirmText, confirmTheme)",
      "__updateCancelButton(_cancelButton, cancelText, cancelTheme, cancelButtonVisible)",
      "__updateHeaderNode(_headerNode, header)",
      "__updateMessageNodes(_messageNodes, message)",
      "__updateRejectButton(_rejectButton, rejectText, rejectTheme, rejectButtonVisible)",
      "__accessibleDescriptionRefChanged(_overlayElement, _messageNodes, accessibleDescriptionRef)"
    ];
  }
  constructor() {
    super();
    this.__cancel = this.__cancel.bind(this);
    this.__confirm = this.__confirm.bind(this);
    this.__reject = this.__reject.bind(this);
  }
  get __slottedNodes() {
    return [this._headerNode, ...this._messageNodes, this._cancelButton, this._confirmButton, this._rejectButton];
  }
  /** @protected */
  ready() {
    super.ready();
    this._headerController = new SlotController(this, "header", "h3", {
      initializer: (node) => {
        this._headerNode = node;
      }
    });
    this.addController(this._headerController);
    this._messageController = new SlotController(this, "", "div", {
      // Allow providing multiple custom nodes in the default slot
      multiple: true,
      observe: false,
      initializer: (node) => {
        const wrapper = document.createElement("div");
        wrapper.style.display = "contents";
        const wrapperId = `confirm-dialog-message-${generateUniqueId()}`;
        wrapper.id = wrapperId;
        this.appendChild(wrapper);
        wrapper.appendChild(node);
        this._messageNodes = [...this._messageNodes, wrapper];
      }
    });
    this.addController(this._messageController);
    this._cancelController = new SlotController(this, "cancel-button", "vaadin-button", {
      initializer: (button) => {
        this.__setupSlottedButton("cancel", button);
      }
    });
    this.addController(this._cancelController);
    this._rejectController = new SlotController(this, "reject-button", "vaadin-button", {
      initializer: (button) => {
        this.__setupSlottedButton("reject", button);
      }
    });
    this.addController(this._rejectController);
    this._confirmController = new SlotController(this, "confirm-button", "vaadin-button", {
      initializer: (button) => {
        this.__setupSlottedButton("confirm", button);
      }
    });
    this.addController(this._confirmController);
  }
  /** @protected */
  _initOverlay(overlay2) {
    overlay2.addEventListener("vaadin-overlay-escape-press", this._escPressed.bind(this));
    overlay2.addEventListener("vaadin-overlay-open", () => this.__onDialogOpened());
    overlay2.addEventListener("vaadin-overlay-closed", () => this.__onDialogClosed());
    overlay2.setAttribute("role", "alertdialog");
  }
  /** @private */
  __onDialogOpened() {
    const overlay2 = this._overlayElement;
    this.__slottedNodes.forEach((node) => {
      overlay2.appendChild(node);
    });
    const confirmButton = overlay2.querySelector('[slot="confirm-button"]');
    if (confirmButton) {
      confirmButton.focus();
    }
  }
  /** @private */
  __onDialogClosed() {
    this.__slottedNodes.forEach((node) => {
      this.appendChild(node);
    });
  }
  /** @private */
  __accessibleDescriptionRefChanged(overlay2, messageNodes, accessibleDescriptionRef) {
    if (!overlay2 || !messageNodes) {
      return;
    }
    if (accessibleDescriptionRef !== void 0) {
      setAriaIDReference(overlay2, "aria-describedby", {
        newId: accessibleDescriptionRef,
        oldId: this.__oldAccessibleDescriptionRef,
        fromUser: true
      });
    } else {
      messageNodes.forEach((node) => {
        setAriaIDReference(overlay2, "aria-describedby", { newId: node.id });
      });
    }
    this.__oldAccessibleDescriptionRef = accessibleDescriptionRef;
  }
  /** @private */
  __setupSlottedButton(type, button) {
    const property = `_${type}Button`;
    const listener = `__${type}`;
    if (this[property] && this[property] !== button) {
      this[property].remove();
    }
    button.addEventListener("click", this[listener]);
    this[property] = button;
  }
  /** @private */
  __updateCancelButton(button, cancelText, cancelTheme, showCancel) {
    if (button) {
      if (button === this._cancelController.defaultNode) {
        button.textContent = cancelText;
        button.setAttribute("theme", cancelTheme);
      }
      button.toggleAttribute("hidden", !showCancel);
    }
  }
  /** @private */
  __updateConfirmButton(button, confirmText, confirmTheme) {
    if (button && button === this._confirmController.defaultNode) {
      button.textContent = confirmText;
      button.setAttribute("theme", confirmTheme);
    }
  }
  /** @private */
  __updateHeaderNode(headerNode, header) {
    if (headerNode && headerNode === this._headerController.defaultNode) {
      headerNode.textContent = header;
    }
  }
  /** @private */
  __updateMessageNodes(nodes, message) {
    if (nodes && nodes.length > 0) {
      const defaultWrapperNode = nodes.find(
        (node) => this._messageController.defaultNode && node === this._messageController.defaultNode.parentElement
      );
      if (defaultWrapperNode) {
        defaultWrapperNode.firstChild.textContent = message;
      }
    }
  }
  /** @private */
  __updateRejectButton(button, rejectText, rejectTheme, showReject) {
    if (button) {
      if (button === this._rejectController.defaultNode) {
        button.textContent = rejectText;
        button.setAttribute("theme", rejectTheme);
      }
      button.toggleAttribute("hidden", !showReject);
    }
  }
  /** @private */
  _escPressed(event) {
    if (!event.defaultPrevented) {
      this.__cancel();
    }
  }
  /** @private */
  __confirm() {
    this.dispatchEvent(new CustomEvent("confirm"));
    this.opened = false;
  }
  /** @private */
  __cancel() {
    this.dispatchEvent(new CustomEvent("cancel"));
    this.opened = false;
  }
  /** @private */
  __reject() {
    this.dispatchEvent(new CustomEvent("reject"));
    this.opened = false;
  }
  /** @private */
  _getAriaLabel(header) {
    return header || "confirmation";
  }
};

// node_modules/@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js
var ConfirmDialog = class extends ConfirmDialogMixin(ElementMixin(ThemePropertyMixin(ControllerMixin(PolymerElement)))) {
  static get template() {
    return html`
      <style>
        :host,
        [hidden] {
          display: none !important;
        }
      </style>

      <vaadin-confirm-dialog-dialog
        id="dialog"
        opened="{{opened}}"
        overlay-class="[[overlayClass]]"
        aria-label="[[_getAriaLabel(header)]]"
        theme$="[[_theme]]"
        no-close-on-outside-click
        no-close-on-esc="[[noCloseOnEsc]]"
        content-height="[[_contentHeight]]"
        content-width="[[_contentWidth]]"
      ></vaadin-confirm-dialog-dialog>

      <div hidden>
        <slot name="header"></slot>
        <slot></slot>
        <slot name="cancel-button"></slot>
        <slot name="reject-button"></slot>
        <slot name="confirm-button"></slot>
      </div>
    `;
  }
  static get is() {
    return "vaadin-confirm-dialog";
  }
  /** @protected */
  ready() {
    super.ready();
    this._overlayElement = this.$.dialog.$.overlay;
    this._initOverlay(this._overlayElement);
  }
  /**
   * @event confirm
   * fired when Confirm button was pressed.
   */
  /**
   * @event cancel
   * fired when Cancel button or Escape key was pressed.
   */
  /**
   * @event reject
   * fired when Reject button was pressed.
   */
};
defineCustomElement(ConfirmDialog);
/*! Bundled license information:

@vaadin/confirm-dialog/src/vaadin-confirm-dialog-base-mixin.js:
  (**
   * @license
   * Copyright (c) 2018 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay-styles.js:
  (**
   * @license
   * Copyright (c) 2018 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay.js:
  (**
   * @license
   * Copyright (c) 2018 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/confirm-dialog/src/vaadin-confirm-dialog-mixin.js:
  (**
   * @license
   * Copyright (c) 2018 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js:
  (**
   * @license
   * Copyright (c) 2018 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)
*/
//# sourceMappingURL=chunk-NKS7BVZU.js.map
