{
  "version": 3,
  "sources": ["../../ol/src/obj.js", "../../ol/src/util.js", "../../ol/src/AssertionError.js"],
  "sourcesContent": ["/**\n * @module ol/obj\n */\n\n/**\n * Polyfill for Object.assign().  Assigns enumerable and own properties from\n * one or more source objects to a target object.\n * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.\n *\n * @param {!Object} target The target object.\n * @param {...Object} var_sources The source object(s).\n * @return {!Object} The modified target object.\n */\nexport const assign =\n  typeof Object.assign === 'function'\n    ? Object.assign\n    : function (target, var_sources) {\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        const output = Object(target);\n        for (let i = 1, ii = arguments.length; i < ii; ++i) {\n          const source = arguments[i];\n          if (source !== undefined && source !== null) {\n            for (const key in source) {\n              if (source.hasOwnProperty(key)) {\n                output[key] = source[key];\n              }\n            }\n          }\n        }\n        return output;\n      };\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Polyfill for Object.values().  Get an array of property values from an object.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n *\n * @param {!Object<K,V>} object The object from which to get the values.\n * @return {!Array<V>} The property values.\n * @template K,V\n */\nexport const getValues =\n  typeof Object.values === 'function'\n    ? Object.values\n    : function (object) {\n        const values = [];\n        for (const property in object) {\n          values.push(object[property]);\n        }\n        return values;\n      };\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n", "/**\n * @module ol/util\n */\n\n/**\n * @return {?} Any return.\n */\nexport function abstract() {\n  return /** @type {?} */ (\n    (function () {\n      throw new Error('Unimplemented abstract method.');\n    })()\n  );\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = 'latest';\n", "/**\n * @module ol/AssertionError\n */\nimport {VERSION} from './util.js';\n\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nclass AssertionError extends Error {\n  /**\n   * @param {number} code Error code.\n   */\n  constructor(code) {\n    const path = VERSION === 'latest' ? VERSION : 'v' + VERSION.split('-')[0];\n    const message =\n      'Assertion failed. See https://openlayers.org/en/' +\n      path +\n      '/doc/errors/#' +\n      code +\n      ' for details.';\n\n    super(message);\n\n    /**\n     * Error code. The meaning of the code can be found on\n     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n     * the version found in the OpenLayers script's header comment if a version\n     * other than the latest is used).\n     * @type {number}\n     * @api\n     */\n    this.code = code;\n\n    /**\n     * @type {string}\n     */\n    this.name = 'AssertionError';\n\n    // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n    this.message = message;\n  }\n}\n\nexport default AssertionError;\n"],
  "mappings": ";AAaO,IAAM,SACX,OAAO,OAAO,WAAW,aACrB,OAAO,SACP,SAAU,QAAQ,aAAW;AAC3B,MAAI,WAAW,UAAa,WAAW,MAAM;AAC3C,UAAM,IAAI,UAAU,4CAA4C;;AAGlE,MAAM,SAAS,OAAO,MAAM;AAC5B,WAAS,IAAI,GAAG,KAAK,UAAU,QAAQ,IAAI,IAAI,EAAE,GAAG;AAClD,QAAM,SAAS,UAAU,CAAC;AAC1B,QAAI,WAAW,UAAa,WAAW,MAAM;AAC3C,eAAW,OAAO,QAAQ;AACxB,YAAI,OAAO,eAAe,GAAG,GAAG;AAC9B,iBAAO,GAAG,IAAI,OAAO,GAAG;;;;;AAKhC,SAAO;AACT;AAMA,SAAU,MAAM,QAAM;AAC1B,WAAW,YAAY,QAAQ;AAC7B,WAAO,OAAO,QAAQ;;AAE1B;AAUO,IAAM,YACX,OAAO,OAAO,WAAW,aACrB,OAAO,SACP,SAAU,QAAM;AACd,MAAM,SAAS,CAAA;AACf,WAAW,YAAY,QAAQ;AAC7B,WAAO,KAAK,OAAO,QAAQ,CAAC;;AAE9B,SAAO;AACT;AAOA,SAAU,QAAQ,QAAM;AAC5B,MAAI;AACJ,OAAK,YAAY,QAAQ;AACvB,WAAO;;AAET,SAAO,CAAC;AACV;;;ACpEM,SAAU,WAAQ;AACtB;;IACG,WAAA;AACC,YAAM,IAAI,MAAM,gCAAgC;IAClD,EAAE;;AAEN;AAOA,IAAI,cAAc;AAWZ,SAAU,OAAO,KAAG;AACxB,SAAO,IAAI,WAAW,IAAI,SAAS,OAAO,EAAE,WAAW;AACzD;AAMO,IAAM,UAAU;;;;;;;;;;;;;;;;;;;;;;;;AC7BvB,IAAA;;EAAA,SAAA,QAAA;AAA6B,cAAAA,iBAAA,MAAA;AAI3B,aAAAA,gBAAY,MAAI;AAAhB,UAAA,QAAA;AACE,UAAM,OAAO,YAAY,WAAW,UAAU,MAAM,QAAQ,MAAM,GAAG,EAAE,CAAC;AACxE,UAAM,UACJ,qDACA,OACA,kBACA,OACA;cAEF,OAAA,KAAA,MAAM,OAAO,KAAC;AAUd,YAAK,OAAO;AAKZ,YAAK,OAAO;AAGZ,YAAK,UAAU;;IACjB;AACF,WAAAA;EAAA,EAjC6B,KAAK;;AAmClC,IAAA,yBAAe;",
  "names": ["AssertionError"]
}
