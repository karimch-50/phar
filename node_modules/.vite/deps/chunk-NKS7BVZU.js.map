{
  "version": 3,
  "sources": ["../../@vaadin/confirm-dialog/theme/lumo/vaadin-confirm-dialog-styles.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-base-mixin.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay-styles.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-overlay.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog-mixin.js", "../../@vaadin/confirm-dialog/src/vaadin-confirm-dialog.js"],
  "sourcesContent": ["import '@vaadin/button/theme/lumo/vaadin-button-styles.js';\nimport '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { dialogOverlay } from '@vaadin/dialog/theme/lumo/vaadin-dialog-styles.js';\nimport { overlay } from '@vaadin/vaadin-lumo-styles/mixins/overlay.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-confirm-dialog-overlay',\n  [\n    overlay,\n    dialogOverlay,\n    css`\n      [part='header'] ::slotted(h3) {\n        margin-top: 0 !important;\n        margin-bottom: 0 !important;\n        margin-inline-start: calc(var(--lumo-space-l) - var(--lumo-space-m));\n      }\n\n      [part='message'] {\n        width: 25em;\n        min-width: 100%;\n        max-width: 100%;\n      }\n\n      ::slotted([slot$='button'][theme~='tertiary']) {\n        padding-left: var(--lumo-space-s);\n        padding-right: var(--lumo-space-s);\n      }\n\n      [part='cancel-button'] {\n        flex-grow: 1;\n      }\n\n      @media (max-width: 360px) {\n        [part='footer'] {\n          flex-direction: column-reverse;\n          align-items: stretch;\n          padding: var(--lumo-space-s) var(--lumo-space-l);\n          gap: var(--lumo-space-s);\n        }\n\n        ::slotted([slot$='button']) {\n          width: 100%;\n          margin: 0;\n        }\n      }\n    `,\n  ],\n  { moduleId: 'lumo-confirm-dialog-overlay' },\n);\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * @polymerMixin\n */\nexport const ConfirmDialogBaseMixin = (superClass) =>\n  class ConfirmDialogBaseMixinClass extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Set the `aria-label` attribute for assistive technologies like\n         * screen readers. An empty string value for this property (the\n         * default) means that the `aria-label` attribute is not present.\n         */\n        ariaLabel: {\n          type: String,\n          value: '',\n        },\n\n        /**\n         * Height to be set on the overlay content.\n         */\n        contentHeight: {\n          type: String,\n        },\n\n        /**\n         * Width to be set on the overlay content.\n         */\n        contentWidth: {\n          type: String,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '__updateContentHeight(contentHeight, _overlayElement)',\n        '__updateContentWidth(contentWidth, _overlayElement)',\n      ];\n    }\n\n    /** @private */\n    __updateDimension(overlay, dimension, value) {\n      const prop = `--_vaadin-confirm-dialog-content-${dimension}`;\n\n      if (value) {\n        overlay.style.setProperty(prop, value);\n      } else {\n        overlay.style.removeProperty(prop);\n      }\n    }\n\n    /** @private */\n    __updateContentHeight(height, overlay) {\n      if (overlay) {\n        this.__updateDimension(overlay, 'height', height);\n      }\n    }\n\n    /** @private */\n    __updateContentWidth(width, overlay) {\n      if (overlay) {\n        this.__updateDimension(overlay, 'width', width);\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from 'lit';\n\nexport const confirmDialogOverlay = css`\n  :host {\n    --_vaadin-confirm-dialog-content-width: auto;\n    --_vaadin-confirm-dialog-content-height: auto;\n  }\n\n  [part='overlay'] {\n    width: var(--_vaadin-confirm-dialog-content-width);\n    height: var(--_vaadin-confirm-dialog-content-height);\n  }\n\n  ::slotted([slot='header']) {\n    pointer-events: auto;\n  }\n\n  /* Make buttons clickable */\n  [part='footer'] > * {\n    pointer-events: all;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\nimport { DialogBaseMixin } from '@vaadin/dialog/src/vaadin-dialog-base-mixin.js';\nimport { dialogOverlay } from '@vaadin/dialog/src/vaadin-dialog-styles.js';\nimport { OverlayMixin } from '@vaadin/overlay/src/vaadin-overlay-mixin.js';\nimport { overlayStyles } from '@vaadin/overlay/src/vaadin-overlay-styles.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\nimport { ConfirmDialogBaseMixin } from './vaadin-confirm-dialog-base-mixin.js';\nimport { confirmDialogOverlay } from './vaadin-confirm-dialog-overlay-styles.js';\n\nregisterStyles('vaadin-confirm-dialog-overlay', [overlayStyles, dialogOverlay, confirmDialogOverlay], {\n  moduleId: 'vaadin-confirm-dialog-overlay-styles',\n});\n\n/**\n * An element used internally by `<vaadin-confirm-dialog>`. Not intended to be used separately.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes DirMixin\n * @mixes OverlayMixin\n * @mixes ThemableMixin\n * @private\n */\nclass ConfirmDialogOverlay extends OverlayMixin(DirMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-confirm-dialog-overlay';\n  }\n\n  static get template() {\n    return html`\n      <div part=\"backdrop\" id=\"backdrop\" hidden$=\"[[!withBackdrop]]\"></div>\n      <div part=\"overlay\" id=\"overlay\" tabindex=\"0\">\n        <section id=\"resizerContainer\" class=\"resizer-container\">\n          <header part=\"header\"><slot name=\"header\"></slot></header>\n          <div part=\"content\" id=\"content\">\n            <div part=\"message\"><slot></slot></div>\n          </div>\n          <footer part=\"footer\" role=\"toolbar\">\n            <div part=\"cancel-button\">\n              <slot name=\"cancel-button\"></slot>\n            </div>\n            <div part=\"reject-button\">\n              <slot name=\"reject-button\"></slot>\n            </div>\n            <div part=\"confirm-button\">\n              <slot name=\"confirm-button\"></slot>\n            </div>\n          </footer>\n        </section>\n      </div>\n    `;\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  ready() {\n    super.ready();\n\n    // ConfirmDialog has header and footer but does not use renderers\n    this.setAttribute('has-header', '');\n    this.setAttribute('has-footer', '');\n  }\n}\n\ndefineCustomElement(ConfirmDialogOverlay);\n\n/**\n * An element used internally by `<vaadin-confirm-dialog>`. Not intended to be used separately.\n * @private\n */\nclass ConfirmDialogDialog extends ConfirmDialogBaseMixin(\n  DialogBaseMixin(OverlayClassMixin(ThemePropertyMixin(PolymerElement))),\n) {\n  static get is() {\n    return 'vaadin-confirm-dialog-dialog';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: none;\n        }\n      </style>\n\n      <vaadin-confirm-dialog-overlay\n        id=\"overlay\"\n        opened=\"[[opened]]\"\n        on-opened-changed=\"_onOverlayOpened\"\n        on-mousedown=\"_bringOverlayToFront\"\n        on-touchstart=\"_bringOverlayToFront\"\n        theme$=\"[[_theme]]\"\n        modeless=\"[[modeless]]\"\n        with-backdrop=\"[[!modeless]]\"\n        resizable$=\"[[resizable]]\"\n        aria-label$=\"[[ariaLabel]]\"\n        restore-focus-on-close\n        focus-trap\n      ></vaadin-confirm-dialog-overlay>\n    `;\n  }\n}\n\ndefineCustomElement(ConfirmDialogDialog);\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { setAriaIDReference } from '@vaadin/a11y-base/src/aria-id-reference.js';\nimport { SlotController } from '@vaadin/component-base/src/slot-controller.js';\nimport { generateUniqueId } from '@vaadin/component-base/src/unique-id-utils.js';\n\n/**\n * @polymerMixin\n */\nexport const ConfirmDialogMixin = (superClass) =>\n  class ConfirmDialogMixinClass extends superClass {\n    static get properties() {\n      return {\n        /**\n         * Sets the `aria-describedby` attribute of the overlay element.\n         *\n         * By default, all elements inside the message area are linked\n         * through the `aria-describedby` attribute. However, there are\n         * cases where this can confuse screen reader users (e.g. the dialog\n         * may present a password confirmation form). For these cases,\n         * it's better to associate only the elements that will help describe\n         * the confirmation dialog through this API.\n         */\n        accessibleDescriptionRef: {\n          type: String,\n        },\n\n        /**\n         * True if the overlay is currently displayed.\n         * @type {boolean}\n         */\n        opened: {\n          type: Boolean,\n          value: false,\n          notify: true,\n        },\n\n        /**\n         * Set the confirmation dialog title.\n         * @type {string}\n         */\n        header: {\n          type: String,\n          value: '',\n        },\n\n        /**\n         * Set the message or confirmation question.\n         */\n        message: {\n          type: String,\n          value: '',\n        },\n\n        /**\n         * Text displayed on confirm-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} confirm-text\n         * @type {string}\n         */\n        confirmText: {\n          type: String,\n          value: 'Confirm',\n        },\n\n        /**\n         * Theme for a confirm-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} confirm-theme\n         * @type {string}\n         */\n        confirmTheme: {\n          type: String,\n          value: 'primary',\n        },\n\n        /**\n         * Set to true to disable closing dialog on Escape press\n         * @attr {boolean} no-close-on-esc\n         * @type {boolean}\n         */\n        noCloseOnEsc: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Whether to show reject button or not.\n         * @attr {boolean} reject-button-visible\n         * @type {boolean}\n         */\n        rejectButtonVisible: {\n          type: Boolean,\n          reflectToAttribute: true,\n          value: false,\n        },\n\n        /**\n         * Text displayed on reject-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} reject-text\n         * @type {string}\n         */\n        rejectText: {\n          type: String,\n          value: 'Reject',\n        },\n\n        /**\n         * Theme for a reject-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} reject-theme\n         * @type {string}\n         */\n        rejectTheme: {\n          type: String,\n          value: 'error tertiary',\n        },\n\n        /**\n         * Whether to show cancel button or not.\n         * @attr {boolean} cancel-button-visible\n         * @type {boolean}\n         */\n        cancelButtonVisible: {\n          type: Boolean,\n          reflectToAttribute: true,\n          value: false,\n        },\n\n        /**\n         * Text displayed on cancel-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} cancel-text\n         * @type {string}\n         */\n        cancelText: {\n          type: String,\n          value: 'Cancel',\n        },\n\n        /**\n         * Theme for a cancel-button.\n         * This only affects the default button, custom slotted buttons will not be altered.\n         * @attr {string} cancel-theme\n         * @type {string}\n         */\n        cancelTheme: {\n          type: String,\n          value: 'tertiary',\n        },\n\n        /**\n         * A space-delimited list of CSS class names\n         * to set on the underlying overlay element.\n         *\n         * @attr {string} overlay-class\n         */\n        overlayClass: {\n          type: String,\n        },\n\n        /**\n         * A reference to the \"Cancel\" button which will be teleported to the overlay.\n         * @private\n         */\n        _cancelButton: {\n          type: Object,\n        },\n\n        /**\n         * A reference to the \"Confirm\" button which will be teleported to the overlay.\n         * @private\n         */\n        _confirmButton: {\n          type: Object,\n        },\n\n        /**\n         * A reference to the \"header\" node which will be teleported to the overlay.\n         * @private\n         */\n        _headerNode: {\n          type: Object,\n        },\n\n        /**\n         * A list of message nodes which will be placed in the overlay default slot.\n         * @private\n         */\n        _messageNodes: {\n          type: Array,\n          value: () => [],\n        },\n\n        /**\n         * A reference to the overlay element.\n         * @private\n         */\n        _overlayElement: {\n          type: Object,\n          sync: true,\n        },\n\n        /**\n         * A reference to the \"Reject\" button which will be teleported to the overlay.\n         * @private\n         */\n        _rejectButton: {\n          type: Object,\n        },\n\n        /**\n         * Height to be set on the overlay content.\n         * @protected\n         */\n        _contentHeight: {\n          type: String,\n        },\n\n        /**\n         * Width to be set on the overlay content.\n         * @protected\n         */\n        _contentWidth: {\n          type: String,\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '__updateConfirmButton(_confirmButton, confirmText, confirmTheme)',\n        '__updateCancelButton(_cancelButton, cancelText, cancelTheme, cancelButtonVisible)',\n        '__updateHeaderNode(_headerNode, header)',\n        '__updateMessageNodes(_messageNodes, message)',\n        '__updateRejectButton(_rejectButton, rejectText, rejectTheme, rejectButtonVisible)',\n        '__accessibleDescriptionRefChanged(_overlayElement, _messageNodes, accessibleDescriptionRef)',\n      ];\n    }\n\n    constructor() {\n      super();\n\n      this.__cancel = this.__cancel.bind(this);\n      this.__confirm = this.__confirm.bind(this);\n      this.__reject = this.__reject.bind(this);\n    }\n\n    get __slottedNodes() {\n      return [this._headerNode, ...this._messageNodes, this._cancelButton, this._confirmButton, this._rejectButton];\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._headerController = new SlotController(this, 'header', 'h3', {\n        initializer: (node) => {\n          this._headerNode = node;\n        },\n      });\n      this.addController(this._headerController);\n\n      this._messageController = new SlotController(this, '', 'div', {\n        // Allow providing multiple custom nodes in the default slot\n        multiple: true,\n        observe: false,\n        initializer: (node) => {\n          const wrapper = document.createElement('div');\n          wrapper.style.display = 'contents';\n          const wrapperId = `confirm-dialog-message-${generateUniqueId()}`;\n          wrapper.id = wrapperId;\n          this.appendChild(wrapper);\n          wrapper.appendChild(node);\n          this._messageNodes = [...this._messageNodes, wrapper];\n        },\n      });\n      this.addController(this._messageController);\n\n      // NOTE: order in which buttons are added should match the order of slots in template\n      this._cancelController = new SlotController(this, 'cancel-button', 'vaadin-button', {\n        initializer: (button) => {\n          this.__setupSlottedButton('cancel', button);\n        },\n      });\n      this.addController(this._cancelController);\n\n      this._rejectController = new SlotController(this, 'reject-button', 'vaadin-button', {\n        initializer: (button) => {\n          this.__setupSlottedButton('reject', button);\n        },\n      });\n      this.addController(this._rejectController);\n\n      this._confirmController = new SlotController(this, 'confirm-button', 'vaadin-button', {\n        initializer: (button) => {\n          this.__setupSlottedButton('confirm', button);\n        },\n      });\n      this.addController(this._confirmController);\n    }\n\n    /** @protected */\n    _initOverlay(overlay) {\n      overlay.addEventListener('vaadin-overlay-escape-press', this._escPressed.bind(this));\n      overlay.addEventListener('vaadin-overlay-open', () => this.__onDialogOpened());\n      overlay.addEventListener('vaadin-overlay-closed', () => this.__onDialogClosed());\n      overlay.setAttribute('role', 'alertdialog');\n    }\n\n    /** @private */\n    __onDialogOpened() {\n      const overlay = this._overlayElement;\n\n      // Teleport slotted nodes to the overlay element.\n      this.__slottedNodes.forEach((node) => {\n        overlay.appendChild(node);\n      });\n\n      const confirmButton = overlay.querySelector('[slot=\"confirm-button\"]');\n      if (confirmButton) {\n        confirmButton.focus();\n      }\n    }\n\n    /** @private */\n    __onDialogClosed() {\n      // Move nodes from the overlay back to the host.\n      this.__slottedNodes.forEach((node) => {\n        this.appendChild(node);\n      });\n    }\n\n    /** @private */\n    __accessibleDescriptionRefChanged(overlay, messageNodes, accessibleDescriptionRef) {\n      if (!overlay || !messageNodes) {\n        return;\n      }\n\n      if (accessibleDescriptionRef !== undefined) {\n        setAriaIDReference(overlay, 'aria-describedby', {\n          newId: accessibleDescriptionRef,\n          oldId: this.__oldAccessibleDescriptionRef,\n          fromUser: true,\n        });\n      } else {\n        messageNodes.forEach((node) => {\n          setAriaIDReference(overlay, 'aria-describedby', { newId: node.id });\n        });\n      }\n\n      this.__oldAccessibleDescriptionRef = accessibleDescriptionRef;\n    }\n\n    /** @private */\n    __setupSlottedButton(type, button) {\n      const property = `_${type}Button`;\n      const listener = `__${type}`;\n\n      if (this[property] && this[property] !== button) {\n        this[property].remove();\n      }\n\n      button.addEventListener('click', this[listener]);\n      this[property] = button;\n    }\n\n    /** @private */\n    __updateCancelButton(button, cancelText, cancelTheme, showCancel) {\n      if (button) {\n        if (button === this._cancelController.defaultNode) {\n          button.textContent = cancelText;\n          button.setAttribute('theme', cancelTheme);\n        }\n        button.toggleAttribute('hidden', !showCancel);\n      }\n    }\n\n    /** @private */\n    __updateConfirmButton(button, confirmText, confirmTheme) {\n      if (button && button === this._confirmController.defaultNode) {\n        button.textContent = confirmText;\n        button.setAttribute('theme', confirmTheme);\n      }\n    }\n\n    /** @private */\n    __updateHeaderNode(headerNode, header) {\n      // Only update text content for the default header node.\n      if (headerNode && headerNode === this._headerController.defaultNode) {\n        headerNode.textContent = header;\n      }\n    }\n\n    /** @private */\n    __updateMessageNodes(nodes, message) {\n      if (nodes && nodes.length > 0) {\n        const defaultWrapperNode = nodes.find(\n          (node) => this._messageController.defaultNode && node === this._messageController.defaultNode.parentElement,\n        );\n        if (defaultWrapperNode) {\n          defaultWrapperNode.firstChild.textContent = message;\n        }\n      }\n    }\n\n    /** @private */\n    __updateRejectButton(button, rejectText, rejectTheme, showReject) {\n      if (button) {\n        if (button === this._rejectController.defaultNode) {\n          button.textContent = rejectText;\n          button.setAttribute('theme', rejectTheme);\n        }\n        button.toggleAttribute('hidden', !showReject);\n      }\n    }\n\n    /** @private */\n    _escPressed(event) {\n      if (!event.defaultPrevented) {\n        this.__cancel();\n      }\n    }\n\n    /** @private */\n    __confirm() {\n      this.dispatchEvent(new CustomEvent('confirm'));\n      this.opened = false;\n    }\n\n    /** @private */\n    __cancel() {\n      this.dispatchEvent(new CustomEvent('cancel'));\n      this.opened = false;\n    }\n\n    /** @private */\n    __reject() {\n      this.dispatchEvent(new CustomEvent('reject'));\n      this.opened = false;\n    }\n\n    /** @private */\n    _getAriaLabel(header) {\n      return header || 'confirmation';\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport '@vaadin/button/src/vaadin-button.js';\nimport './vaadin-confirm-dialog-overlay.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\nimport { ConfirmDialogMixin } from './vaadin-confirm-dialog-mixin.js';\n\n/**\n * `<vaadin-confirm-dialog>` is a Web Component for showing alerts and asking for user confirmation.\n *\n * ```\n * <vaadin-confirm-dialog cancel-button-visible>\n *   There are unsaved changes. Do you really want to leave?\n * </vaadin-confirm-dialog>\n * ```\n *\n * ### Styling\n *\n * The `<vaadin-confirm-dialog>` is not themable. Apply styles to `<vaadin-confirm-dialog-overlay>`\n * component and use its shadow parts for styling.\n * See [`<vaadin-overlay>`](#/elements/vaadin-overlay) for the overlay styling documentation.\n *\n * In addition to `<vaadin-overlay>` parts, the following parts are available for theming:\n *\n * Part name        | Description\n * -----------------|-------------------------------------------\n * `header`         | The header element wrapper\n * `message`        | The message element wrapper\n * `footer`         | The footer element that wraps the buttons\n * `cancel-button`  | The \"Cancel\" button wrapper\n * `confirm-button` | The \"Confirm\" button wrapper\n * `reject-button`  | The \"Reject\" button wrapper\n *\n * Use `confirmTheme`, `cancelTheme` and `rejectTheme` properties to customize buttons theme.\n * Also, the `theme` attribute value set on `<vaadin-confirm-dialog>` is propagated to the\n * `<vaadin-confirm-dialog-overlay>` component.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * ### Custom content\n *\n * The following slots are available for providing custom content:\n *\n * Slot name         | Description\n * ------------------|---------------------------\n * `header`          | Slot for header element\n * `cancel-button`   | Slot for \"Cancel\" button\n * `confirm-button`  | Slot for \"Confirm\" button\n * `reject-button`   | Slot for \"Reject\" button\n *\n * @fires {Event} confirm - Fired when Confirm button was pressed.\n * @fires {Event} cancel - Fired when Cancel button or Escape key was pressed.\n * @fires {Event} reject - Fired when Reject button was pressed.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ConfirmDialogMixin\n * @mixes ControllerMixin\n * @mixes ElementMixin\n * @mixes ThemePropertyMixin\n */\nclass ConfirmDialog extends ConfirmDialogMixin(ElementMixin(ThemePropertyMixin(ControllerMixin(PolymerElement)))) {\n  static get template() {\n    return html`\n      <style>\n        :host,\n        [hidden] {\n          display: none !important;\n        }\n      </style>\n\n      <vaadin-confirm-dialog-dialog\n        id=\"dialog\"\n        opened=\"{{opened}}\"\n        overlay-class=\"[[overlayClass]]\"\n        aria-label=\"[[_getAriaLabel(header)]]\"\n        theme$=\"[[_theme]]\"\n        no-close-on-outside-click\n        no-close-on-esc=\"[[noCloseOnEsc]]\"\n        content-height=\"[[_contentHeight]]\"\n        content-width=\"[[_contentWidth]]\"\n      ></vaadin-confirm-dialog-dialog>\n\n      <div hidden>\n        <slot name=\"header\"></slot>\n        <slot></slot>\n        <slot name=\"cancel-button\"></slot>\n        <slot name=\"reject-button\"></slot>\n        <slot name=\"confirm-button\"></slot>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-confirm-dialog';\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._overlayElement = this.$.dialog.$.overlay;\n\n    this._initOverlay(this._overlayElement);\n  }\n\n  /**\n   * @event confirm\n   * fired when Confirm button was pressed.\n   */\n\n  /**\n   * @event cancel\n   * fired when Cancel button or Escape key was pressed.\n   */\n\n  /**\n   * @event reject\n   * fired when Reject button was pressed.\n   */\n}\n\ndefineCustomElement(ConfirmDialog);\n\nexport { ConfirmDialog };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAAA,EACE;AAAA,EACA;AAAA,IACE;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCF;AAAA,EACA,EAAE,UAAU,8BAA8B;AAC5C;;;ACzCO,IAAM,yBAAyB,CAAC,eACrC,MAAM,oCAAoC,WAAW;AAAA,EACnD,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAML,WAAW;AAAA,QACT,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAKA,eAAe;AAAA,QACb,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA,MAKA,cAAc;AAAA,QACZ,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,kBAAkBA,UAAS,WAAW,OAAO;AAC3C,UAAM,OAAO,oCAAoC,SAAS;AAE1D,QAAI,OAAO;AACT,MAAAA,SAAQ,MAAM,YAAY,MAAM,KAAK;AAAA,IACvC,OAAO;AACL,MAAAA,SAAQ,MAAM,eAAe,IAAI;AAAA,IACnC;AAAA,EACF;AAAA;AAAA,EAGA,sBAAsB,QAAQA,UAAS;AACrC,QAAIA,UAAS;AACX,WAAK,kBAAkBA,UAAS,UAAU,MAAM;AAAA,IAClD;AAAA,EACF;AAAA;AAAA,EAGA,qBAAqB,OAAOA,UAAS;AACnC,QAAIA,UAAS;AACX,WAAK,kBAAkBA,UAAS,SAAS,KAAK;AAAA,IAChD;AAAA,EACF;AACF;;;AC/DK,IAAM,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACWpC,eAAe,iCAAiC,CAAC,eAAeC,gBAAe,oBAAoB,GAAG;AAAA,EACpG,UAAU;AACZ,CAAC;AAYD,IAAM,uBAAN,cAAmC,aAAa,SAAS,cAAc,cAAc,CAAC,CAAC,EAAE;AAAA,EACvF,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACN,UAAM,MAAM;AAGZ,SAAK,aAAa,cAAc,EAAE;AAClC,SAAK,aAAa,cAAc,EAAE;AAAA,EACpC;AACF;AAEA,oBAAoB,oBAAoB;AAMxC,IAAM,sBAAN,cAAkC;AAAA,EAChC,gBAAgB,kBAAkB,mBAAmB,cAAc,CAAC,CAAC;AACvE,EAAE;AAAA,EACA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA,EAEA,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBT;AACF;AAEA,oBAAoB,mBAAmB;;;ACtGhC,IAAM,qBAAqB,CAAC,eACjC,MAAM,gCAAgC,WAAW;AAAA,EAC/C,WAAW,aAAa;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWL,0BAA0B;AAAA,QACxB,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,QACP,QAAQ;AAAA,MACV;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,QAAQ;AAAA,QACN,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAKA,SAAS;AAAA,QACP,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,aAAa;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,cAAc;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,cAAc;AAAA,QACZ,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,qBAAqB;AAAA,QACnB,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,YAAY;AAAA,QACV,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,aAAa;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,qBAAqB;AAAA,QACnB,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,YAAY;AAAA,QACV,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,aAAa;AAAA,QACX,MAAM;AAAA,QACN,OAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,cAAc;AAAA,QACZ,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AAAA,QACb,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,gBAAgB;AAAA,QACd,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,aAAa;AAAA,QACX,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AAAA,QACb,MAAM;AAAA,QACN,OAAO,MAAM,CAAC;AAAA,MAChB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB;AAAA,QACf,MAAM;AAAA,QACN,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AAAA,QACb,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,gBAAgB;AAAA,QACd,MAAM;AAAA,MACR;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,eAAe;AAAA,QACb,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,YAAY;AACrB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AAAA,EACzC;AAAA,EAEA,IAAI,iBAAiB;AACnB,WAAO,CAAC,KAAK,aAAa,GAAG,KAAK,eAAe,KAAK,eAAe,KAAK,gBAAgB,KAAK,aAAa;AAAA,EAC9G;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,oBAAoB,IAAI,eAAe,MAAM,UAAU,MAAM;AAAA,MAChE,aAAa,CAAC,SAAS;AACrB,aAAK,cAAc;AAAA,MACrB;AAAA,IACF,CAAC;AACD,SAAK,cAAc,KAAK,iBAAiB;AAEzC,SAAK,qBAAqB,IAAI,eAAe,MAAM,IAAI,OAAO;AAAA;AAAA,MAE5D,UAAU;AAAA,MACV,SAAS;AAAA,MACT,aAAa,CAAC,SAAS;AACrB,cAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,gBAAQ,MAAM,UAAU;AACxB,cAAM,YAAY,0BAA0B,iBAAiB,CAAC;AAC9D,gBAAQ,KAAK;AACb,aAAK,YAAY,OAAO;AACxB,gBAAQ,YAAY,IAAI;AACxB,aAAK,gBAAgB,CAAC,GAAG,KAAK,eAAe,OAAO;AAAA,MACtD;AAAA,IACF,CAAC;AACD,SAAK,cAAc,KAAK,kBAAkB;AAG1C,SAAK,oBAAoB,IAAI,eAAe,MAAM,iBAAiB,iBAAiB;AAAA,MAClF,aAAa,CAAC,WAAW;AACvB,aAAK,qBAAqB,UAAU,MAAM;AAAA,MAC5C;AAAA,IACF,CAAC;AACD,SAAK,cAAc,KAAK,iBAAiB;AAEzC,SAAK,oBAAoB,IAAI,eAAe,MAAM,iBAAiB,iBAAiB;AAAA,MAClF,aAAa,CAAC,WAAW;AACvB,aAAK,qBAAqB,UAAU,MAAM;AAAA,MAC5C;AAAA,IACF,CAAC;AACD,SAAK,cAAc,KAAK,iBAAiB;AAEzC,SAAK,qBAAqB,IAAI,eAAe,MAAM,kBAAkB,iBAAiB;AAAA,MACpF,aAAa,CAAC,WAAW;AACvB,aAAK,qBAAqB,WAAW,MAAM;AAAA,MAC7C;AAAA,IACF,CAAC;AACD,SAAK,cAAc,KAAK,kBAAkB;AAAA,EAC5C;AAAA;AAAA,EAGA,aAAaC,UAAS;AACpB,IAAAA,SAAQ,iBAAiB,+BAA+B,KAAK,YAAY,KAAK,IAAI,CAAC;AACnF,IAAAA,SAAQ,iBAAiB,uBAAuB,MAAM,KAAK,iBAAiB,CAAC;AAC7E,IAAAA,SAAQ,iBAAiB,yBAAyB,MAAM,KAAK,iBAAiB,CAAC;AAC/E,IAAAA,SAAQ,aAAa,QAAQ,aAAa;AAAA,EAC5C;AAAA;AAAA,EAGA,mBAAmB;AACjB,UAAMA,WAAU,KAAK;AAGrB,SAAK,eAAe,QAAQ,CAAC,SAAS;AACpC,MAAAA,SAAQ,YAAY,IAAI;AAAA,IAC1B,CAAC;AAED,UAAM,gBAAgBA,SAAQ,cAAc,yBAAyB;AACrE,QAAI,eAAe;AACjB,oBAAc,MAAM;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAGA,mBAAmB;AAEjB,SAAK,eAAe,QAAQ,CAAC,SAAS;AACpC,WAAK,YAAY,IAAI;AAAA,IACvB,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,kCAAkCA,UAAS,cAAc,0BAA0B;AACjF,QAAI,CAACA,YAAW,CAAC,cAAc;AAC7B;AAAA,IACF;AAEA,QAAI,6BAA6B,QAAW;AAC1C,yBAAmBA,UAAS,oBAAoB;AAAA,QAC9C,OAAO;AAAA,QACP,OAAO,KAAK;AAAA,QACZ,UAAU;AAAA,MACZ,CAAC;AAAA,IACH,OAAO;AACL,mBAAa,QAAQ,CAAC,SAAS;AAC7B,2BAAmBA,UAAS,oBAAoB,EAAE,OAAO,KAAK,GAAG,CAAC;AAAA,MACpE,CAAC;AAAA,IACH;AAEA,SAAK,gCAAgC;AAAA,EACvC;AAAA;AAAA,EAGA,qBAAqB,MAAM,QAAQ;AACjC,UAAM,WAAW,IAAI,IAAI;AACzB,UAAM,WAAW,KAAK,IAAI;AAE1B,QAAI,KAAK,QAAQ,KAAK,KAAK,QAAQ,MAAM,QAAQ;AAC/C,WAAK,QAAQ,EAAE,OAAO;AAAA,IACxB;AAEA,WAAO,iBAAiB,SAAS,KAAK,QAAQ,CAAC;AAC/C,SAAK,QAAQ,IAAI;AAAA,EACnB;AAAA;AAAA,EAGA,qBAAqB,QAAQ,YAAY,aAAa,YAAY;AAChE,QAAI,QAAQ;AACV,UAAI,WAAW,KAAK,kBAAkB,aAAa;AACjD,eAAO,cAAc;AACrB,eAAO,aAAa,SAAS,WAAW;AAAA,MAC1C;AACA,aAAO,gBAAgB,UAAU,CAAC,UAAU;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA,EAGA,sBAAsB,QAAQ,aAAa,cAAc;AACvD,QAAI,UAAU,WAAW,KAAK,mBAAmB,aAAa;AAC5D,aAAO,cAAc;AACrB,aAAO,aAAa,SAAS,YAAY;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA,EAGA,mBAAmB,YAAY,QAAQ;AAErC,QAAI,cAAc,eAAe,KAAK,kBAAkB,aAAa;AACnE,iBAAW,cAAc;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA,EAGA,qBAAqB,OAAO,SAAS;AACnC,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,YAAM,qBAAqB,MAAM;AAAA,QAC/B,CAAC,SAAS,KAAK,mBAAmB,eAAe,SAAS,KAAK,mBAAmB,YAAY;AAAA,MAChG;AACA,UAAI,oBAAoB;AACtB,2BAAmB,WAAW,cAAc;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,qBAAqB,QAAQ,YAAY,aAAa,YAAY;AAChE,QAAI,QAAQ;AACV,UAAI,WAAW,KAAK,kBAAkB,aAAa;AACjD,eAAO,cAAc;AACrB,eAAO,aAAa,SAAS,WAAW;AAAA,MAC1C;AACA,aAAO,gBAAgB,UAAU,CAAC,UAAU;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA,EAGA,YAAY,OAAO;AACjB,QAAI,CAAC,MAAM,kBAAkB;AAC3B,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA;AAAA,EAGA,YAAY;AACV,SAAK,cAAc,IAAI,YAAY,SAAS,CAAC;AAC7C,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA,EAGA,WAAW;AACT,SAAK,cAAc,IAAI,YAAY,QAAQ,CAAC;AAC5C,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA,EAGA,WAAW;AACT,SAAK,cAAc,IAAI,YAAY,QAAQ,CAAC;AAC5C,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA,EAGA,cAAc,QAAQ;AACpB,WAAO,UAAU;AAAA,EACnB;AACF;;;AC7XF,IAAM,gBAAN,cAA4B,mBAAmB,aAAa,mBAAmB,gBAAgB,cAAc,CAAC,CAAC,CAAC,EAAE;AAAA,EAChH,WAAW,WAAW;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BT;AAAA,EAEA,WAAW,KAAK;AACd,WAAO;AAAA,EACT;AAAA;AAAA,EAGA,QAAQ;AACN,UAAM,MAAM;AAEZ,SAAK,kBAAkB,KAAK,EAAE,OAAO,EAAE;AAEvC,SAAK,aAAa,KAAK,eAAe;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBF;AAEA,oBAAoB,aAAa;",
  "names": ["overlay", "dialogOverlay", "overlay"]
}
