import {
  easeOut,
  linear
} from "./chunk-FV2F4KM5.js";
import {
  MAC,
  WEBKIT
} from "./chunk-IRMQKYQT.js";
import {
  Collection_default
} from "./chunk-LKQXZ32B.js";
import {
  assert
} from "./chunk-FE3DXTD6.js";
import {
  EventType_default,
  Event_default,
  FALSE,
  Object_default,
  TRUE,
  includes
} from "./chunk-OAOBVDCL.js";
import {
  getValues
} from "./chunk-K4RYKKJS.js";

// node_modules/ol/interaction/Property.js
var Property_default = {
  ACTIVE: "active"
};

// node_modules/ol/interaction/Interaction.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Interaction = (
  /** @class */
  function(_super) {
    __extends(Interaction2, _super);
    function Interaction2(opt_options) {
      var _this = _super.call(this) || this;
      _this.on;
      _this.once;
      _this.un;
      if (opt_options && opt_options.handleEvent) {
        _this.handleEvent = opt_options.handleEvent;
      }
      _this.map_ = null;
      _this.setActive(true);
      return _this;
    }
    Interaction2.prototype.getActive = function() {
      return (
        /** @type {boolean} */
        this.get(Property_default.ACTIVE)
      );
    };
    Interaction2.prototype.getMap = function() {
      return this.map_;
    };
    Interaction2.prototype.handleEvent = function(mapBrowserEvent) {
      return true;
    };
    Interaction2.prototype.setActive = function(active) {
      this.set(Property_default.ACTIVE, active);
    };
    Interaction2.prototype.setMap = function(map) {
      this.map_ = map;
    };
    return Interaction2;
  }(Object_default)
);
function pan(view, delta, opt_duration) {
  var currentCenter = view.getCenterInternal();
  if (currentCenter) {
    var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
    view.animateInternal({
      duration: opt_duration !== void 0 ? opt_duration : 250,
      easing: linear,
      center: view.getConstrainedCenter(center)
    });
  }
}
function zoomByDelta(view, delta, opt_anchor, opt_duration) {
  var currentZoom = view.getZoom();
  if (currentZoom === void 0) {
    return;
  }
  var newZoom = view.getConstrainedZoom(currentZoom + delta);
  var newResolution = view.getResolutionForZoom(newZoom);
  if (view.getAnimating()) {
    view.cancelAnimations();
  }
  view.animate({
    resolution: newResolution,
    anchor: opt_anchor,
    duration: opt_duration !== void 0 ? opt_duration : 250,
    easing: easeOut
  });
}
var Interaction_default = Interaction;

// node_modules/ol/MapBrowserEventType.js
var MapBrowserEventType_default = {
  /**
   * A true single click with no dragging and no double click. Note that this
   * event is delayed by 250 ms to ensure that it is not a double click.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
   * @api
   */
  SINGLECLICK: "singleclick",
  /**
   * A click with no dragging. A double click will fire two of this.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
   * @api
   */
  CLICK: EventType_default.CLICK,
  /**
   * A true double click, with no dragging.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
   * @api
   */
  DBLCLICK: EventType_default.DBLCLICK,
  /**
   * Triggered when a pointer is dragged.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
   * @api
   */
  POINTERDRAG: "pointerdrag",
  /**
   * Triggered when a pointer is moved. Note that on touch devices this is
   * triggered when the map is panned, so is not the same as mousemove.
   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
   * @api
   */
  POINTERMOVE: "pointermove",
  POINTERDOWN: "pointerdown",
  POINTERUP: "pointerup",
  POINTEROVER: "pointerover",
  POINTEROUT: "pointerout",
  POINTERENTER: "pointerenter",
  POINTERLEAVE: "pointerleave",
  POINTERCANCEL: "pointercancel"
};

// node_modules/ol/interaction/Pointer.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PointerInteraction = (
  /** @class */
  function(_super) {
    __extends2(PointerInteraction2, _super);
    function PointerInteraction2(opt_options) {
      var _this = this;
      var options = opt_options ? opt_options : {};
      _this = _super.call(
        this,
        /** @type {import("./Interaction.js").InteractionOptions} */
        options
      ) || this;
      if (options.handleDownEvent) {
        _this.handleDownEvent = options.handleDownEvent;
      }
      if (options.handleDragEvent) {
        _this.handleDragEvent = options.handleDragEvent;
      }
      if (options.handleMoveEvent) {
        _this.handleMoveEvent = options.handleMoveEvent;
      }
      if (options.handleUpEvent) {
        _this.handleUpEvent = options.handleUpEvent;
      }
      if (options.stopDown) {
        _this.stopDown = options.stopDown;
      }
      _this.handlingDownUpSequence = false;
      _this.trackedPointers_ = {};
      _this.targetPointers = [];
      return _this;
    }
    PointerInteraction2.prototype.getPointerCount = function() {
      return this.targetPointers.length;
    };
    PointerInteraction2.prototype.handleDownEvent = function(mapBrowserEvent) {
      return false;
    };
    PointerInteraction2.prototype.handleDragEvent = function(mapBrowserEvent) {
    };
    PointerInteraction2.prototype.handleEvent = function(mapBrowserEvent) {
      if (!mapBrowserEvent.originalEvent) {
        return true;
      }
      var stopEvent = false;
      this.updateTrackedPointers_(mapBrowserEvent);
      if (this.handlingDownUpSequence) {
        if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERDRAG) {
          this.handleDragEvent(mapBrowserEvent);
          mapBrowserEvent.originalEvent.preventDefault();
        } else if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERUP) {
          var handledUp = this.handleUpEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
        }
      } else {
        if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERDOWN) {
          var handled = this.handleDownEvent(mapBrowserEvent);
          this.handlingDownUpSequence = handled;
          stopEvent = this.stopDown(handled);
        } else if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERMOVE) {
          this.handleMoveEvent(mapBrowserEvent);
        }
      }
      return !stopEvent;
    };
    PointerInteraction2.prototype.handleMoveEvent = function(mapBrowserEvent) {
    };
    PointerInteraction2.prototype.handleUpEvent = function(mapBrowserEvent) {
      return false;
    };
    PointerInteraction2.prototype.stopDown = function(handled) {
      return handled;
    };
    PointerInteraction2.prototype.updateTrackedPointers_ = function(mapBrowserEvent) {
      if (isPointerDraggingEvent(mapBrowserEvent)) {
        var event_1 = mapBrowserEvent.originalEvent;
        var id = event_1.pointerId.toString();
        if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERUP) {
          delete this.trackedPointers_[id];
        } else if (mapBrowserEvent.type == MapBrowserEventType_default.POINTERDOWN) {
          this.trackedPointers_[id] = event_1;
        } else if (id in this.trackedPointers_) {
          this.trackedPointers_[id] = event_1;
        }
        this.targetPointers = getValues(this.trackedPointers_);
      }
    };
    return PointerInteraction2;
  }(Interaction_default)
);
function centroid(pointerEvents) {
  var length = pointerEvents.length;
  var clientX = 0;
  var clientY = 0;
  for (var i = 0; i < length; i++) {
    clientX += pointerEvents[i].clientX;
    clientY += pointerEvents[i].clientY;
  }
  return [clientX / length, clientY / length];
}
function isPointerDraggingEvent(mapBrowserEvent) {
  var type = mapBrowserEvent.type;
  return type === MapBrowserEventType_default.POINTERDOWN || type === MapBrowserEventType_default.POINTERDRAG || type === MapBrowserEventType_default.POINTERUP;
}
var Pointer_default = PointerInteraction;

// node_modules/ol/events/condition.js
function all(var_args) {
  var conditions = arguments;
  return function(event) {
    var pass = true;
    for (var i = 0, ii = conditions.length; i < ii; ++i) {
      pass = pass && conditions[i](event);
      if (!pass) {
        break;
      }
    }
    return pass;
  };
}
var altKeyOnly = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    mapBrowserEvent.originalEvent
  );
  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
var altShiftKeysOnly = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    mapBrowserEvent.originalEvent
  );
  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
var focus = function(event) {
  var targetElement = event.map.getTargetElement();
  var activeElement = event.map.getOwnerDocument().activeElement;
  return targetElement.contains(activeElement);
};
var focusWithTabindex = function(event) {
  return event.map.getTargetElement().hasAttribute("tabindex") ? focus(event) : true;
};
var always = TRUE;
var mouseActionButton = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {MouseEvent} */
    mapBrowserEvent.originalEvent
  );
  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);
};
var never = FALSE;
var singleClick = function(mapBrowserEvent) {
  return mapBrowserEvent.type == MapBrowserEventType_default.SINGLECLICK;
};
var noModifierKeys = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    mapBrowserEvent.originalEvent
  );
  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;
};
var shiftKeyOnly = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    mapBrowserEvent.originalEvent
  );
  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;
};
var targetNotEditable = function(mapBrowserEvent) {
  var originalEvent = (
    /** @type {KeyboardEvent|MouseEvent|TouchEvent} */
    mapBrowserEvent.originalEvent
  );
  var tagName = (
    /** @type {Element} */
    originalEvent.target.tagName
  );
  return tagName !== "INPUT" && tagName !== "SELECT" && tagName !== "TEXTAREA";
};
var mouseOnly = function(mapBrowserEvent) {
  var pointerEvent = (
    /** @type {import("../MapBrowserEvent").default} */
    mapBrowserEvent.originalEvent
  );
  assert(pointerEvent !== void 0, 56);
  return pointerEvent.pointerType == "mouse";
};
var primaryAction = function(mapBrowserEvent) {
  var pointerEvent = (
    /** @type {import("../MapBrowserEvent").default} */
    mapBrowserEvent.originalEvent
  );
  assert(pointerEvent !== void 0, 56);
  return pointerEvent.isPrimary && pointerEvent.button === 0;
};

// node_modules/ol/interaction/Translate.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TranslateEventType = {
  /**
   * Triggered upon feature translation start.
   * @event TranslateEvent#translatestart
   * @api
   */
  TRANSLATESTART: "translatestart",
  /**
   * Triggered upon feature translation.
   * @event TranslateEvent#translating
   * @api
   */
  TRANSLATING: "translating",
  /**
   * Triggered upon feature translation end.
   * @event TranslateEvent#translateend
   * @api
   */
  TRANSLATEEND: "translateend"
};
var TranslateEvent = (
  /** @class */
  function(_super) {
    __extends3(TranslateEvent2, _super);
    function TranslateEvent2(type, features, coordinate, startCoordinate, mapBrowserEvent) {
      var _this = _super.call(this, type) || this;
      _this.features = features;
      _this.coordinate = coordinate;
      _this.startCoordinate = startCoordinate;
      _this.mapBrowserEvent = mapBrowserEvent;
      return _this;
    }
    return TranslateEvent2;
  }(Event_default)
);
var Translate = (
  /** @class */
  function(_super) {
    __extends3(Translate2, _super);
    function Translate2(opt_options) {
      var _this = this;
      var options = opt_options ? opt_options : {};
      _this = _super.call(
        this,
        /** @type {import("./Pointer.js").Options} */
        options
      ) || this;
      _this.on;
      _this.once;
      _this.un;
      _this.lastCoordinate_ = null;
      _this.startCoordinate_ = null;
      _this.features_ = options.features !== void 0 ? options.features : null;
      var layerFilter;
      if (options.layers && !_this.features_) {
        if (typeof options.layers === "function") {
          layerFilter = options.layers;
        } else {
          var layers_1 = options.layers;
          layerFilter = function(layer) {
            return includes(layers_1, layer);
          };
        }
      } else {
        layerFilter = TRUE;
      }
      _this.layerFilter_ = layerFilter;
      _this.filter_ = options.filter && !_this.features_ ? options.filter : TRUE;
      _this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;
      _this.condition_ = options.condition ? options.condition : always;
      _this.lastFeature_ = null;
      _this.addChangeListener(Property_default.ACTIVE, _this.handleActiveChanged_);
      return _this;
    }
    Translate2.prototype.handleDownEvent = function(event) {
      if (!event.originalEvent || !this.condition_(event)) {
        return false;
      }
      this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
      if (!this.lastCoordinate_ && this.lastFeature_) {
        this.startCoordinate_ = event.coordinate;
        this.lastCoordinate_ = event.coordinate;
        this.handleMoveEvent(event);
        var features = this.features_ || new Collection_default([this.lastFeature_]);
        this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATESTART, features, event.coordinate, this.startCoordinate_, event));
        return true;
      }
      return false;
    };
    Translate2.prototype.handleUpEvent = function(event) {
      if (this.lastCoordinate_) {
        this.lastCoordinate_ = null;
        this.handleMoveEvent(event);
        var features = this.features_ || new Collection_default([this.lastFeature_]);
        this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATEEND, features, event.coordinate, this.startCoordinate_, event));
        this.startCoordinate_ = null;
        return true;
      }
      return false;
    };
    Translate2.prototype.handleDragEvent = function(event) {
      if (this.lastCoordinate_) {
        var newCoordinate = event.coordinate;
        var deltaX_1 = newCoordinate[0] - this.lastCoordinate_[0];
        var deltaY_1 = newCoordinate[1] - this.lastCoordinate_[1];
        var features = this.features_ || new Collection_default([this.lastFeature_]);
        features.forEach(function(feature) {
          var geom = feature.getGeometry();
          geom.translate(deltaX_1, deltaY_1);
          feature.setGeometry(geom);
        });
        this.lastCoordinate_ = newCoordinate;
        this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATING, features, newCoordinate, this.startCoordinate_, event));
      }
    };
    Translate2.prototype.handleMoveEvent = function(event) {
      var elem = event.map.getViewport();
      if (this.featuresAtPixel_(event.pixel, event.map)) {
        elem.classList.remove(this.lastCoordinate_ ? "ol-grab" : "ol-grabbing");
        elem.classList.add(this.lastCoordinate_ ? "ol-grabbing" : "ol-grab");
      } else {
        elem.classList.remove("ol-grab", "ol-grabbing");
      }
    };
    Translate2.prototype.featuresAtPixel_ = function(pixel, map) {
      return map.forEachFeatureAtPixel(pixel, (function(feature, layer) {
        if (this.filter_(feature, layer)) {
          if (!this.features_ || includes(this.features_.getArray(), feature)) {
            return feature;
          }
        }
      }).bind(this), {
        layerFilter: this.layerFilter_,
        hitTolerance: this.hitTolerance_
      });
    };
    Translate2.prototype.getHitTolerance = function() {
      return this.hitTolerance_;
    };
    Translate2.prototype.setHitTolerance = function(hitTolerance) {
      this.hitTolerance_ = hitTolerance;
    };
    Translate2.prototype.setMap = function(map) {
      var oldMap = this.getMap();
      _super.prototype.setMap.call(this, map);
      this.updateState_(oldMap);
    };
    Translate2.prototype.handleActiveChanged_ = function() {
      this.updateState_(null);
    };
    Translate2.prototype.updateState_ = function(oldMap) {
      var map = this.getMap();
      var active = this.getActive();
      if (!map || !active) {
        map = map || oldMap;
        if (map) {
          var elem = map.getViewport();
          elem.classList.remove("ol-grab", "ol-grabbing");
        }
      }
    };
    return Translate2;
  }(Pointer_default)
);
var Translate_default = Translate;

export {
  MapBrowserEventType_default,
  Property_default,
  pan,
  zoomByDelta,
  Interaction_default,
  centroid,
  Pointer_default,
  all,
  altKeyOnly,
  altShiftKeysOnly,
  focusWithTabindex,
  always,
  mouseActionButton,
  never,
  singleClick,
  noModifierKeys,
  shiftKeyOnly,
  targetNotEditable,
  mouseOnly,
  primaryAction,
  TranslateEvent,
  Translate_default
};
//# sourceMappingURL=chunk-C4Z3GV5F.js.map
