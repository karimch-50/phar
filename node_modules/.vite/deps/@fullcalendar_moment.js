import {
  init_moment,
  moment_default
} from "./chunk-27XVSPO5.js";
import "./chunk-ULJGACYD.js";
import {
  CalendarImpl,
  createPlugin
} from "./chunk-HNRJUSKU.js";
import "./chunk-WGAPYIUP.js";

// node_modules/@fullcalendar/moment/index.js
init_moment();
function toMoment(date, calendar) {
  if (!(calendar instanceof CalendarImpl)) {
    throw new Error("must supply a CalendarApi instance");
  }
  let { dateEnv } = calendar.getCurrentData();
  return convertToMoment(date, dateEnv.timeZone, null, dateEnv.locale.codes[0]);
}
function toMomentDuration(fcDuration) {
  return moment_default.duration(fcDuration);
}
function convertToMoment(input, timeZone, timeZoneOffset, locale) {
  let mom;
  if (timeZone === "local") {
    mom = moment_default(input);
  } else if (timeZone === "UTC") {
    mom = moment_default.utc(input);
  } else if (moment_default.tz) {
    mom = moment_default.tz(input, timeZone);
  } else {
    mom = moment_default.utc(input);
    if (timeZoneOffset != null) {
      mom.utcOffset(timeZoneOffset);
    }
  }
  mom.locale(locale);
  return mom;
}
function formatWithCmdStr(cmdStr, arg) {
  let cmd = parseCmdStr(cmdStr);
  if (arg.end) {
    let startMom = convertToMoment(arg.start.array, arg.timeZone, arg.start.timeZoneOffset, arg.localeCodes[0]);
    let endMom = convertToMoment(arg.end.array, arg.timeZone, arg.end.timeZoneOffset, arg.localeCodes[0]);
    return formatRange(cmd, createMomentFormatFunc(startMom), createMomentFormatFunc(endMom), arg.defaultSeparator);
  }
  return convertToMoment(arg.date.array, arg.timeZone, arg.date.timeZoneOffset, arg.localeCodes[0]).format(cmd.whole);
}
function createMomentFormatFunc(mom) {
  return (cmdStr) => cmdStr ? mom.format(cmdStr) : "";
}
function parseCmdStr(cmdStr) {
  let parts = cmdStr.match(/^(.*?)\{(.*)\}(.*)$/);
  if (parts) {
    let middle = parseCmdStr(parts[2]);
    return {
      head: parts[1],
      middle,
      tail: parts[3],
      whole: parts[1] + middle.whole + parts[3]
    };
  }
  return {
    head: null,
    middle: null,
    tail: null,
    whole: cmdStr
  };
}
function formatRange(cmd, formatStart, formatEnd, separator) {
  if (cmd.middle) {
    let startHead = formatStart(cmd.head);
    let startMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);
    let startTail = formatStart(cmd.tail);
    let endHead = formatEnd(cmd.head);
    let endMiddle = formatRange(cmd.middle, formatStart, formatEnd, separator);
    let endTail = formatEnd(cmd.tail);
    if (startHead === endHead && startTail === endTail) {
      return startHead + (startMiddle === endMiddle ? startMiddle : startMiddle + separator + endMiddle) + startTail;
    }
  }
  let startWhole = formatStart(cmd.whole);
  let endWhole = formatEnd(cmd.whole);
  if (startWhole === endWhole) {
    return startWhole;
  }
  return startWhole + separator + endWhole;
}
var index = createPlugin({
  name: "@fullcalendar/moment",
  cmdFormatter: formatWithCmdStr
});
export {
  index as default,
  toMoment,
  toMomentDuration
};
//# sourceMappingURL=@fullcalendar_moment.js.map
