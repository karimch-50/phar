{
  "version": 3,
  "sources": ["../../@vaadin/custom-field/src/vaadin-custom-field-mixin.js", "../../@vaadin/custom-field/src/vaadin-custom-field-styles.js", "../../@vaadin/custom-field/src/vaadin-custom-field.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { getFlattenedElements } from '@vaadin/component-base/src/dom-utils.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { FieldMixin } from '@vaadin/field-base/src/field-mixin.js';\n\n/**\n * Default implementation of the parse function that creates individual field\n * values from the single component value.\n * @param value\n * @returns {*}\n */\nconst defaultParseValue = (value) => {\n  return value.split('\\t');\n};\n\n/**\n * Default implementation of the format function that creates a single component\n * value from individual field values.\n * @param inputValues\n * @returns {*}\n */\nconst defaultFormatValue = (inputValues) => {\n  return inputValues.join('\\t');\n};\n\n/**\n * @polymerMixin\n * @mixes FieldMixin\n * @mixes FocusMixin\n * @mixes KeyboardMixin\n */\nexport const CustomFieldMixin = (superClass) =>\n  class CustomFieldMixin extends FieldMixin(FocusMixin(KeyboardMixin(superClass))) {\n    static get properties() {\n      return {\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        name: String,\n\n        /**\n         * The value of the field. When wrapping several inputs, it will contain `\\t`\n         * (Tab character) as a delimiter indicating parts intended to be used as the\n         * corresponding inputs values.\n         * Use the [`formatValue`](#/elements/vaadin-custom-field#property-formatValue)\n         * and [`parseValue`](#/elements/vaadin-custom-field#property-parseValue)\n         * properties to customize this behavior.\n         */\n        value: {\n          type: String,\n          observer: '__valueChanged',\n          notify: true,\n        },\n\n        /**\n         * Array of available input nodes\n         * @type {!Array<!HTMLElement> | undefined}\n         */\n        inputs: {\n          type: Array,\n          readOnly: true,\n        },\n\n        /**\n         * A function to format the values of the individual fields contained by\n         * the custom field into a single component value. The function receives\n         * an array of all values of the individual fields in the order of their\n         * presence in the DOM, and must return a single component value.\n         * This function is called each time a value of an internal field is\n         * changed.\n         *\n         * Example:\n         * ```js\n         * customField.formatValue = (fieldValues) => {\n         *   return fieldValues.join(\"-\");\n         * }\n         * ```\n         * @type {!CustomFieldFormatValueFn | undefined}\n         */\n        formatValue: {\n          type: Function,\n        },\n\n        /**\n         * A function to parse the component value into values for the individual\n         * fields contained by the custom field. The function receives the\n         * component value, and must return an array of values for the individual\n         * fields in the order of their presence in the DOM.\n         * The function is called each time the value of the component changes.\n         *\n         * Example:\n         * ```js\n         * customField.parseValue = (componentValue) => {\n         *   return componentValue.split(\"-\");\n         * }\n         * ```\n         * @type {!CustomFieldParseValueFn | undefined}\n         */\n        parseValue: {\n          type: Function,\n        },\n      };\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      // See https://github.com/vaadin/vaadin-web-components/issues/94\n      this.setAttribute('role', 'group');\n\n      this.ariaTarget = this;\n\n      this.__childrenObserver = new MutationObserver(() => {\n        this.__setInputsFromSlot();\n      });\n\n      this.__setInputsFromSlot();\n      this.$.slot.addEventListener('slotchange', () => {\n        this.__setInputsFromSlot();\n\n        // Observe changes to any children except inputs\n        // to allow wrapping `<input>` with `<div>` etc.\n        getFlattenedElements(this.$.slot)\n          .filter((el) => !this.__isInput(el))\n          .forEach((el) => {\n            this.__childrenObserver.observe(el, { childList: true });\n          });\n      });\n\n      this._tooltipController = new TooltipController(this);\n      this.addController(this._tooltipController);\n      this._tooltipController.setShouldShow((target) => {\n        const inputs = target.inputs || [];\n        return !inputs.some((el) => el.opened);\n      });\n    }\n\n    /** @protected */\n    focus() {\n      if (this.inputs && this.inputs[0]) {\n        this.inputs[0].focus();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin` to validate on blur.\n     * @param {boolean} focused\n     * @protected\n     */\n    _setFocused(focused) {\n      super._setFocused(focused);\n\n      if (!focused) {\n        this.validate();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin` to not remove focused\n     * state when focus moves to another input in the custom field.\n     * @param {FocusEvent} event\n     * @return {boolean}\n     * @protected\n     */\n    _shouldRemoveFocus(event) {\n      const { relatedTarget } = event;\n      return !this.inputs.some((el) => relatedTarget === (el.focusElement || el));\n    }\n\n    /**\n     * Returns true if the current inputs values satisfy all constraints (if any).\n     *\n     * @return {boolean}\n     */\n    checkValidity() {\n      const invalidFields = this.inputs.filter((input) => !(input.validate || input.checkValidity).call(input));\n\n      if (invalidFields.length || (this.required && !this.value.trim())) {\n        // Either 1. one of the input fields is invalid or\n        // 2. the custom field itself is required but doesn't have a value\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * @param {KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onKeyDown(e) {\n      if (e.key === 'Tab') {\n        if (\n          (this.inputs.indexOf(e.target) < this.inputs.length - 1 && !e.shiftKey) ||\n          (this.inputs.indexOf(e.target) > 0 && e.shiftKey)\n        ) {\n          this.dispatchEvent(new CustomEvent('internal-tab'));\n        } else {\n          // FIXME(yuriy): remove this workaround when value should not be updated before focusout\n          this.__setValue();\n        }\n      }\n    }\n\n    /** @protected */\n    _onInputChange(event) {\n      // Stop native change events\n      event.stopPropagation();\n\n      this.__setValue();\n      this.validate();\n      this.dispatchEvent(\n        new CustomEvent('change', {\n          bubbles: true,\n          cancelable: false,\n          detail: {\n            value: this.value,\n          },\n        }),\n      );\n    }\n\n    /** @private */\n    __setValue() {\n      this.__settingValue = true;\n      const formatFn = this.formatValue || defaultFormatValue;\n      this.value = formatFn.apply(this, [this.inputs.map((input) => input.value)]);\n      this.__settingValue = false;\n    }\n\n    /** @private */\n    __isInput(node) {\n      const isSlottedInput = node.getAttribute('slot') === 'input' || node.getAttribute('slot') === 'textarea';\n      return !isSlottedInput && (node.validate || node.checkValidity);\n    }\n\n    /** @private */\n    __getInputsFromSlot() {\n      return getFlattenedElements(this.$.slot).filter((node) => this.__isInput(node));\n    }\n\n    /** @private */\n    __setInputsFromSlot() {\n      this._setInputs(this.__getInputsFromSlot());\n      this.__setValue();\n    }\n\n    /** @private */\n    __toggleHasValue(value) {\n      this.toggleAttribute('has-value', value !== null && value.trim() !== '');\n    }\n\n    /** @private */\n    __valueChanged(value, oldValue) {\n      if (this.__settingValue || !this.inputs) {\n        return;\n      }\n\n      this.__toggleHasValue(value);\n\n      const parseFn = this.parseValue || defaultParseValue;\n      const valuesArray = parseFn.apply(this, [value]);\n      if (!valuesArray || valuesArray.length === 0) {\n        console.warn('Value parser has not provided values array');\n        return;\n      }\n\n      this.inputs.forEach((input, id) => {\n        input.value = valuesArray[id];\n      });\n      if (oldValue !== undefined) {\n        this.validate();\n      }\n    }\n  };\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from 'lit';\n\nexport const customFieldStyles = css`\n  :host {\n    display: inline-flex;\n  }\n\n  :host::before {\n    content: '\\\\2003';\n    width: 0;\n    display: inline-block;\n    /* Size and position this element on the same vertical position as the input-field element\n           to make vertical align for the host element work as expected */\n  }\n\n  :host([hidden]) {\n    display: none !important;\n  }\n\n  .vaadin-custom-field-container {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n  }\n\n  .inputs-wrapper {\n    flex: none;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { CustomFieldMixin } from './vaadin-custom-field-mixin.js';\nimport { customFieldStyles } from './vaadin-custom-field-styles.js';\n\nregisterStyles('vaadin-custom-field', customFieldStyles, { moduleId: 'vaadin-custom-field-styles' });\n\n/**\n * `<vaadin-custom-field>` is a web component for wrapping multiple components as a single field.\n *\n * ```\n * <vaadin-custom-field label=\"Appointment time\">\n *   <vaadin-date-picker></vaadin-date-picker>\n *   <vaadin-time-picker></vaadin-time-picker>\n * </vaadin-custom-field>\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name            | Description\n * ---------------------|----------------\n * `label`              | The slotted label element wrapper\n * `helper-text`        | The slotted helper text element wrapper\n * `error-message`      | The slotted error message element wrapper\n * `required-indicator` | The `required` state indicator element\n * `input-fields`       | The slotted input elements wrapper\n *\n * The following state attributes are available for styling:\n *\n * Attribute           | Description                               | Part name\n * --------------------|-------------------------------------------|------------\n * `invalid`           | Set when the element is invalid           | :host\n * `focused`           | Set when the element is focused           | :host\n * `has-label`         | Set when the element has a label          | :host\n * `has-value`         | Set when the element has a value          | :host\n * `has-helper`        | Set when the element has helper text      | :host\n * `has-error-message` | Set when the element has an error message | :host\n *\n * You may also manually set `disabled` or `readonly` attribute on this component to make the label\n * part look visually the same as on a `<vaadin-text-field>` when it is disabled or readonly.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {Event} change - Fired when the user commits a value change for any of the internal inputs.\n * @fires {Event} internal-tab - Fired on Tab keydown triggered from the internal inputs, meaning focus will not leave the inputs.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes CustomFieldMixin\n * @mixes ElementMixin\n * @mixes ThemableMixin\n */\nclass CustomField extends CustomFieldMixin(ThemableMixin(ElementMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-custom-field';\n  }\n\n  static get template() {\n    return html`\n      <div class=\"vaadin-custom-field-container\">\n        <div part=\"label\" on-click=\"focus\">\n          <slot name=\"label\"></slot>\n          <span part=\"required-indicator\" aria-hidden=\"true\"></span>\n        </div>\n\n        <div class=\"inputs-wrapper\" part=\"input-fields\" on-change=\"_onInputChange\">\n          <slot id=\"slot\"></slot>\n        </div>\n\n        <div part=\"helper-text\">\n          <slot name=\"helper\"></slot>\n        </div>\n\n        <div part=\"error-message\">\n          <slot name=\"error-message\"></slot>\n        </div>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  /**\n   * Fired when the user commits a value change for any of the internal inputs.\n   *\n   * @event change\n   */\n}\n\ndefineCustomElement(CustomField);\n\nexport { CustomField };\n"],
  "mappings": "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",
  "names": []
}
