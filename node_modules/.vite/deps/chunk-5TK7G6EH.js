import {
  Fill_default
} from "./chunk-TAVH433R.js";
import {
  toSize
} from "./chunk-V7IIVM7C.js";

// node_modules/ol/style/TextPlacement.js
var TextPlacement_default = {
  POINT: "point",
  LINE: "line"
};

// node_modules/ol/style/Text.js
var DEFAULT_FILL_COLOR = "#333";
var Text = (
  /** @class */
  function() {
    function Text2(opt_options) {
      var options = opt_options || {};
      this.font_ = options.font;
      this.rotation_ = options.rotation;
      this.rotateWithView_ = options.rotateWithView;
      this.scale_ = options.scale;
      this.scaleArray_ = toSize(options.scale !== void 0 ? options.scale : 1);
      this.text_ = options.text;
      this.textAlign_ = options.textAlign;
      this.textBaseline_ = options.textBaseline;
      this.fill_ = options.fill !== void 0 ? options.fill : new Fill_default({ color: DEFAULT_FILL_COLOR });
      this.maxAngle_ = options.maxAngle !== void 0 ? options.maxAngle : Math.PI / 4;
      this.placement_ = options.placement !== void 0 ? options.placement : TextPlacement_default.POINT;
      this.overflow_ = !!options.overflow;
      this.stroke_ = options.stroke !== void 0 ? options.stroke : null;
      this.offsetX_ = options.offsetX !== void 0 ? options.offsetX : 0;
      this.offsetY_ = options.offsetY !== void 0 ? options.offsetY : 0;
      this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;
      this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;
      this.padding_ = options.padding === void 0 ? null : options.padding;
    }
    Text2.prototype.clone = function() {
      var scale = this.getScale();
      return new Text2({
        font: this.getFont(),
        placement: this.getPlacement(),
        maxAngle: this.getMaxAngle(),
        overflow: this.getOverflow(),
        rotation: this.getRotation(),
        rotateWithView: this.getRotateWithView(),
        scale: Array.isArray(scale) ? scale.slice() : scale,
        text: this.getText(),
        textAlign: this.getTextAlign(),
        textBaseline: this.getTextBaseline(),
        fill: this.getFill() ? this.getFill().clone() : void 0,
        stroke: this.getStroke() ? this.getStroke().clone() : void 0,
        offsetX: this.getOffsetX(),
        offsetY: this.getOffsetY(),
        backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : void 0,
        backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : void 0,
        padding: this.getPadding() || void 0
      });
    };
    Text2.prototype.getOverflow = function() {
      return this.overflow_;
    };
    Text2.prototype.getFont = function() {
      return this.font_;
    };
    Text2.prototype.getMaxAngle = function() {
      return this.maxAngle_;
    };
    Text2.prototype.getPlacement = function() {
      return this.placement_;
    };
    Text2.prototype.getOffsetX = function() {
      return this.offsetX_;
    };
    Text2.prototype.getOffsetY = function() {
      return this.offsetY_;
    };
    Text2.prototype.getFill = function() {
      return this.fill_;
    };
    Text2.prototype.getRotateWithView = function() {
      return this.rotateWithView_;
    };
    Text2.prototype.getRotation = function() {
      return this.rotation_;
    };
    Text2.prototype.getScale = function() {
      return this.scale_;
    };
    Text2.prototype.getScaleArray = function() {
      return this.scaleArray_;
    };
    Text2.prototype.getStroke = function() {
      return this.stroke_;
    };
    Text2.prototype.getText = function() {
      return this.text_;
    };
    Text2.prototype.getTextAlign = function() {
      return this.textAlign_;
    };
    Text2.prototype.getTextBaseline = function() {
      return this.textBaseline_;
    };
    Text2.prototype.getBackgroundFill = function() {
      return this.backgroundFill_;
    };
    Text2.prototype.getBackgroundStroke = function() {
      return this.backgroundStroke_;
    };
    Text2.prototype.getPadding = function() {
      return this.padding_;
    };
    Text2.prototype.setOverflow = function(overflow) {
      this.overflow_ = overflow;
    };
    Text2.prototype.setFont = function(font) {
      this.font_ = font;
    };
    Text2.prototype.setMaxAngle = function(maxAngle) {
      this.maxAngle_ = maxAngle;
    };
    Text2.prototype.setOffsetX = function(offsetX) {
      this.offsetX_ = offsetX;
    };
    Text2.prototype.setOffsetY = function(offsetY) {
      this.offsetY_ = offsetY;
    };
    Text2.prototype.setPlacement = function(placement) {
      this.placement_ = placement;
    };
    Text2.prototype.setRotateWithView = function(rotateWithView) {
      this.rotateWithView_ = rotateWithView;
    };
    Text2.prototype.setFill = function(fill) {
      this.fill_ = fill;
    };
    Text2.prototype.setRotation = function(rotation) {
      this.rotation_ = rotation;
    };
    Text2.prototype.setScale = function(scale) {
      this.scale_ = scale;
      this.scaleArray_ = toSize(scale !== void 0 ? scale : 1);
    };
    Text2.prototype.setStroke = function(stroke) {
      this.stroke_ = stroke;
    };
    Text2.prototype.setText = function(text) {
      this.text_ = text;
    };
    Text2.prototype.setTextAlign = function(textAlign) {
      this.textAlign_ = textAlign;
    };
    Text2.prototype.setTextBaseline = function(textBaseline) {
      this.textBaseline_ = textBaseline;
    };
    Text2.prototype.setBackgroundFill = function(fill) {
      this.backgroundFill_ = fill;
    };
    Text2.prototype.setBackgroundStroke = function(stroke) {
      this.backgroundStroke_ = stroke;
    };
    Text2.prototype.setPadding = function(padding) {
      this.padding_ = padding;
    };
    return Text2;
  }()
);
var Text_default = Text;

export {
  TextPlacement_default,
  Text_default
};
//# sourceMappingURL=chunk-5TK7G6EH.js.map
