{
  "version": 3,
  "sources": ["../../@vaadin/accordion/theme/lumo/vaadin-accordion-heading-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-heading-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-heading.js", "../../@vaadin/accordion/theme/lumo/vaadin-accordion-panel-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-panel-styles.js", "../../@vaadin/accordion/src/vaadin-accordion-panel.js"],
  "sourcesContent": ["import { detailsSummary } from '@vaadin/details/theme/lumo/vaadin-details-summary-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst accordionHeading = css`\n  :host {\n    padding: 0;\n  }\n\n  [part='content'] {\n    padding: var(--lumo-space-s) 0;\n  }\n\n  :host([theme~='filled']) {\n    padding-top: 0;\n    padding-bottom: 0;\n  }\n`;\n\nregisterStyles('vaadin-accordion-heading', [detailsSummary, accordionHeading], { moduleId: 'lumo-accordion-heading' });\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from 'lit';\n\nexport const accordionHeading = css`\n  :host {\n    display: block;\n    outline: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n\n  :host([hidden]) {\n    display: none !important;\n  }\n\n  button {\n    display: flex;\n    align-items: center;\n    justify-content: inherit;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n    background-color: initial;\n    color: inherit;\n    border: initial;\n    outline: none;\n    font: inherit;\n    text-align: inherit;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { ActiveMixin } from '@vaadin/a11y-base/src/active-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DirMixin } from '@vaadin/component-base/src/dir-mixin.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { accordionHeading } from './vaadin-accordion-heading-styles.js';\n\nregisterStyles('vaadin-accordion-heading', accordionHeading, { moduleId: 'vaadin-accordion-heading-styles' });\n\n/**\n * The accordion heading element.\n *\n * `vaadin-accordion-heading` is the element for the headings in the accordion.\n * As recommended by the WAI ARIA Best Practices, each heading needs to wrap a\n * `<button>`. This element puts that button in the Shadow DOM, as it is more\n * convenient to use and doesn't make styling of the heading more problematic.\n *\n * The WAI ARIA Best Practices also recommend setting `aria-level` depending\n * on what level the headings are. It is hard to determine the level of a heading\n * algorithmically, and setting it is not strictly required to have an accessible\n * accordion. To keep things easier to use, this element does not set `aria-level`\n * attribute but leaves that to the developer creating an accordion.\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name  | Description\n * -----------|-------------------\n * `toggle`   | The icon element\n * `content`  | The content wrapper\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description\n * -------------| -----------\n * `active`     | Set when the element is pressed down, either with mouse, touch or the keyboard.\n * `opened`     | Set when the collapsible content is expanded and visible.\n * `disabled`   | Set when the element is disabled.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ActiveMixin\n * @mixes DirMixin\n * @mixes ThemableMixin\n */\nclass AccordionHeading extends ActiveMixin(DirMixin(ThemableMixin(PolymerElement))) {\n  static get is() {\n    return 'vaadin-accordion-heading';\n  }\n\n  static get template() {\n    return html`\n      <button id=\"button\" part=\"content\" disabled$=\"[[disabled]]\" aria-expanded$=\"[[__updateAriaExpanded(opened)]]\">\n        <span part=\"toggle\" aria-hidden=\"true\"></span>\n        <slot></slot>\n      </button>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * When true, the element is opened.\n       */\n      opened: {\n        type: Boolean,\n        reflectToAttribute: true,\n      },\n    };\n  }\n\n  /**\n   * @param {DocumentFragment} dom\n   * @return {null}\n   * @protected\n   * @override\n   */\n  _attachDom(dom) {\n    const root = this.attachShadow({ mode: 'open', delegatesFocus: true });\n    root.appendChild(dom);\n    return root;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    // By default, if the user hasn't provided a custom role,\n    // the role attribute is set to \"heading\".\n    if (!this.hasAttribute('role')) {\n      this.setAttribute('role', 'heading');\n    }\n  }\n\n  /** @private */\n  __updateAriaExpanded(opened) {\n    return opened ? 'true' : 'false';\n  }\n}\n\ndefineCustomElement(AccordionHeading);\n\nexport { AccordionHeading };\n", "import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport { details } from '@vaadin/details/theme/lumo/vaadin-details-styles.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nconst accordionPanel = css`\n  :host {\n    margin: 0;\n    border-bottom: solid 1px var(--lumo-contrast-10pct);\n  }\n\n  :host(:last-child) {\n    border-bottom: none;\n  }\n\n  :host([theme~='filled']) {\n    border-bottom: none;\n  }\n\n  :host([theme~='filled']:not(:last-child)) {\n    margin-bottom: 2px;\n  }\n`;\n\nregisterStyles('vaadin-accordion-panel', [details, accordionPanel], { moduleId: 'lumo-accordion-panel' });\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { css } from 'lit';\n\nexport const accordionPanel = css`\n  :host {\n    display: block;\n  }\n\n  :host([hidden]) {\n    display: none !important;\n  }\n\n  [part='content'] {\n    display: none;\n    overflow: hidden;\n  }\n\n  :host([opened]) [part='content'] {\n    display: block;\n    overflow: visible;\n  }\n`;\n", "/**\n * @license\n * Copyright (c) 2019 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-accordion-heading.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { DelegateFocusMixin } from '@vaadin/a11y-base/src/delegate-focus-mixin.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { DelegateStateMixin } from '@vaadin/component-base/src/delegate-state-mixin.js';\nimport { TooltipController } from '@vaadin/component-base/src/tooltip-controller.js';\nimport { CollapsibleMixin } from '@vaadin/details/src/collapsible-mixin.js';\nimport { SummaryController } from '@vaadin/details/src/summary-controller.js';\nimport { registerStyles, ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { accordionPanel } from './vaadin-accordion-panel-styles.js';\n\nregisterStyles('vaadin-accordion-panel', accordionPanel, { moduleId: 'vaadin-accordion-panel-styles' });\n\n/**\n * The accordion panel element.\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name        | Description\n * -----------------|----------------\n * `content`        | The wrapper for the collapsible panel content.\n *\n * The following attributes are exposed for styling:\n *\n * Attribute    | Description\n * -------------| -----------\n * `opened`     | Set when the collapsible content is expanded and visible.\n * `disabled`   | Set when the element is disabled.\n * `focus-ring` | Set when the element is focused using the keyboard.\n * `focused`    | Set when the element is focused.\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes CollapsibleMixin\n * @mixes ControllerMixin\n * @mixes DelegateFocusMixin\n * @mixes DelegateStateMixin\n * @mixes ThemableMixin\n */\nclass AccordionPanel extends CollapsibleMixin(\n  DelegateFocusMixin(DelegateStateMixin(ThemableMixin(ControllerMixin(PolymerElement)))),\n) {\n  static get is() {\n    return 'vaadin-accordion-panel';\n  }\n\n  static get template() {\n    return html`\n      <slot name=\"summary\"></slot>\n\n      <div part=\"content\">\n        <slot></slot>\n      </div>\n\n      <slot name=\"tooltip\"></slot>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * A text that is displayed in the heading, if no\n       * element is assigned to the `summary` slot.\n       */\n      summary: {\n        type: String,\n        observer: '_summaryChanged',\n      },\n    };\n  }\n\n  static get observers() {\n    return ['__updateAriaAttributes(focusElement, _contentElements)'];\n  }\n\n  static get delegateAttrs() {\n    return ['theme'];\n  }\n\n  static get delegateProps() {\n    return ['disabled', 'opened'];\n  }\n\n  constructor() {\n    super();\n\n    this._summaryController = new SummaryController(this, 'vaadin-accordion-heading');\n    this._summaryController.addEventListener('slot-content-changed', (event) => {\n      const { node } = event.target;\n\n      this._setFocusElement(node);\n      this.stateTarget = node;\n\n      this._tooltipController.setTarget(node);\n    });\n\n    this._tooltipController = new TooltipController(this);\n    this._tooltipController.setPosition('bottom-start');\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this.addController(this._summaryController);\n    this.addController(this._tooltipController);\n  }\n\n  /**\n   * Override method inherited from `DisabledMixin`\n   * to not set `aria-disabled` on the host element.\n   *\n   * @protected\n   * @override\n   */\n  _setAriaDisabled() {\n    // The `aria-disabled` is set on the details summary.\n  }\n\n  /** @private */\n  _summaryChanged(summary) {\n    this._summaryController.setSummary(summary);\n  }\n\n  /** @private */\n  __updateAriaAttributes(focusElement, contentElements) {\n    if (focusElement && contentElements) {\n      const node = contentElements[0];\n\n      if (node) {\n        node.setAttribute('role', 'region');\n        node.setAttribute('aria-labelledby', focusElement.id);\n      }\n\n      if (node && node.id) {\n        focusElement.setAttribute('aria-controls', node.id);\n      } else {\n        focusElement.removeAttribute('aria-controls');\n      }\n    }\n  }\n}\n\ndefineCustomElement(AccordionPanel);\n\nexport { AccordionPanel };\n"],
  "mappings": "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",
  "names": ["accordionHeading", "accordionHeading", "accordionPanel", "accordionPanel"]
}
