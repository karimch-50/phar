{
  "version": 3,
  "sources": ["../../@vaadin/app-layout/theme/lumo/vaadin-app-layout-styles.js", "../../@vaadin/app-layout/src/detect-ios-navbar.js", "../../@vaadin/app-layout/src/safe-area-inset.js", "../../@vaadin/app-layout/src/vaadin-app-layout.js"],
  "sourcesContent": ["import '@vaadin/vaadin-lumo-styles/color.js';\nimport '@vaadin/vaadin-lumo-styles/spacing.js';\nimport '@vaadin/vaadin-lumo-styles/typography.js';\nimport { css, registerStyles } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\nregisterStyles(\n  'vaadin-app-layout',\n  css`\n    [part='navbar'],\n    [part='drawer'] {\n      background-color: var(--lumo-base-color);\n      background-clip: padding-box;\n    }\n\n    [part='navbar'] {\n      min-height: var(--lumo-size-xl);\n      border-bottom: 1px solid var(--lumo-contrast-10pct);\n    }\n\n    [part='navbar'][bottom] {\n      border-bottom: none;\n      border-top: 1px solid var(--lumo-contrast-10pct);\n    }\n\n    [part='drawer'] {\n      border-inline-end: 1px solid var(--lumo-contrast-10pct);\n    }\n\n    :host([overlay]) [part='drawer'] {\n      border-inline-end: none;\n      box-shadow: var(--lumo-box-shadow-s);\n    }\n\n    :host([primary-section='navbar']) [part='navbar'] {\n      border: none;\n      background-image: linear-gradient(var(--lumo-contrast-5pct), var(--lumo-contrast-5pct));\n    }\n\n    :host([primary-section='drawer']:not([overlay])) [part='drawer'] {\n      background-image: linear-gradient(var(--lumo-shade-5pct), var(--lumo-shade-5pct));\n    }\n\n    [part='backdrop'] {\n      background-color: var(--lumo-shade-20pct);\n      opacity: 1;\n    }\n\n    [part] ::slotted(h2),\n    [part] ::slotted(h3),\n    [part] ::slotted(h4) {\n      margin-top: var(--lumo-space-xs) !important;\n      margin-bottom: var(--lumo-space-xs) !important;\n    }\n  `,\n  { moduleId: 'lumo-app-layout' },\n);\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { isIOS } from '@vaadin/component-base/src/browser-utils.js';\n\nexport function _detectIosNavbar() {\n  /* c8 ignore next 11 */\n  if (isIOS) {\n    const innerHeight = window.innerHeight;\n    const innerWidth = window.innerWidth;\n    const landscape = innerWidth > innerHeight;\n    const clientHeight = document.documentElement.clientHeight;\n    if (landscape && clientHeight > innerHeight) {\n      document.documentElement.style.setProperty('--vaadin-viewport-offset-bottom', `${clientHeight - innerHeight}px`);\n    } else {\n      document.documentElement.style.setProperty('--vaadin-viewport-offset-bottom', '');\n    }\n  }\n}\n\n_detectIosNavbar();\nwindow.addEventListener('resize', _detectIosNavbar);\n", "const template = document.createElement('template');\n\ntemplate.innerHTML = `\n  <style>\n    /* Use units so that the values can be used in calc() */\n    html {\n      --safe-area-inset-top: env(safe-area-inset-top, 0px);\n      --safe-area-inset-right: env(safe-area-inset-right, 0px);\n      --safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);\n      --safe-area-inset-left: env(safe-area-inset-left, 0px);\n    }\n  </style>\n`;\n\ndocument.head.appendChild(template.content);\n", "/**\n * @license\n * Copyright (c) 2018 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './detect-ios-navbar.js';\nimport './safe-area-inset.js';\nimport { afterNextRender, beforeNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { AriaModalController } from '@vaadin/a11y-base/src/aria-modal-controller.js';\nimport { FocusTrapController } from '@vaadin/a11y-base/src/focus-trap-controller.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ElementMixin } from '@vaadin/component-base/src/element-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\n\n/**\n * @typedef {import('./vaadin-app-layout.js').AppLayoutI18n} AppLayoutI18n\n */\n\n/**\n * `<vaadin-app-layout>` is a Web Component providing a quick and easy way to get a common application layout structure done.\n *\n * ```\n * <vaadin-app-layout primary-section=\"navbar|drawer\">\n *  <vaadin-drawer-toggle slot=\"navbar [touch-optimized]\"></vaadin-drawer-toggle>\n *  <h3 slot=\"navbar [touch-optimized]\">Company Name</h3>\n *  <vaadin-tabs orientation=\"vertical\" slot=\"drawer\">\n *    <vaadin-tab>Menu item 1</vaadin-tab>\n *  </vaadin-tabs>\n *  <!-- Everything else will be the page content -->\n *  <div>\n *    <h3>Page title</h3>\n *    <p>Page content</p>\n *  </div>\n * </vaadin-app-layout>\n * ```\n *\n * For best results, the component should be added to the root level of your application (i.e., as a direct child of `<body>`).\n *\n * The page should include a viewport meta tag which contains `viewport-fit=cover`, like the following:\n * ```\n * <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">\n * ```\n * This causes the viewport to be scaled to fill the device display.\n * To ensure that important content is displayed, use the provided css variables.\n * ```\n * --safe-area-inset-top\n * --safe-area-inset-right\n * --safe-area-inset-bottom\n * --safe-area-inset-left\n * ```\n *\n * ### Styling\n *\n * The following Shadow DOM parts of the `<vaadin-app-layout>` are available for styling:\n *\n * Part name     | Description\n * --------------|---------------------------------------------------------|\n * `navbar`      | Container for the navigation bar\n * `drawer`      | Container for the drawer area\n *\n * See [Styling Components](https://vaadin.com/docs/latest/styling/styling-components) documentation.\n *\n * ### Component's slots\n *\n * The following slots are available to be set\n *\n * Slot name          | Description\n * -------------------|---------------------------------------------------|\n * no name            | Default container for the page content\n * `navbar `          | Container for the top navbar area\n * `drawer`           | Container for an application menu\n * `touch-optimized`  | Container for the bottom navbar area (only visible for mobile devices)\n *\n * #### Touch optimized\n *\n * App Layout has a pseudo-slot `touch-optimized` in order to give more control of the presentation of\n * elements with `slot[navbar]`. Internally, when the user is interacting with App Layout from a\n * touchscreen device, the component will search for elements with `slot[navbar touch-optimized]` and move\n * them to the bottom of the page.\n *\n * ### Navigation\n *\n * As the drawer opens as an overlay in small devices, it makes sense to close it once a navigation happens.\n * If you are using Vaadin Router, this will happen automatically unless you change the `closeDrawerOn` event name.\n *\n * In order to do so, there are two options:\n * - If the `vaadin-app-layout` instance is available, then `drawerOpened` can be set to `false`\n * - If not, a custom event `close-overlay-drawer` can be dispatched either by calling\n *  `window.dispatchEvent(new CustomEvent('close-overlay-drawer'))` or by calling\n *  `AppLayout.dispatchCloseOverlayDrawerEvent()`\n *\n * ### Scrolling areas\n *\n * By default, the component will act with the \"body scrolling\", so on mobile (iOS Safari and Android Chrome),\n * the toolbars will collapse when a scroll happens.\n *\n * To use the \"content scrolling\", in case of the content of the page relies on a pre-defined height (for instance,\n * it has a `height:100%`), then the developer can set `height: 100%` to both `html` and `body`.\n * That will make the `[content]` element of app layout scrollable.\n * On this case, the toolbars on mobile device won't collapse.\n *\n * @fires {CustomEvent} drawer-opened-changed - Fired when the `drawerOpened` property changes.\n * @fires {CustomEvent} overlay-changed - Fired when the `overlay` property changes.\n * @fires {CustomEvent} primary-section-changed - Fired when the `primarySection` property changes.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ElementMixin\n * @mixes ThemableMixin\n * @mixes ControllerMixin\n */\nclass AppLayout extends ElementMixin(ThemableMixin(ControllerMixin(PolymerElement))) {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          box-sizing: border-box;\n          height: 100%;\n          --vaadin-app-layout-transition: 200ms;\n          transition: padding var(--vaadin-app-layout-transition);\n          --_vaadin-app-layout-drawer-width: var(--vaadin-app-layout-drawer-width, 16em);\n          --vaadin-app-layout-touch-optimized: false;\n          --vaadin-app-layout-navbar-offset-top: var(--_vaadin-app-layout-navbar-offset-size);\n          --vaadin-app-layout-navbar-offset-bottom: var(--_vaadin-app-layout-navbar-offset-size-bottom);\n          padding-block: var(--vaadin-app-layout-navbar-offset-top) var(--vaadin-app-layout-navbar-offset-bottom);\n          padding-inline-start: var(--vaadin-app-layout-navbar-offset-left);\n        }\n\n        :host([hidden]),\n        [hidden] {\n          display: none !important;\n        }\n\n        :host([no-anim]) {\n          --vaadin-app-layout-transition: none !important;\n        }\n\n        :host([drawer-opened]) {\n          --vaadin-app-layout-drawer-offset-left: var(--_vaadin-app-layout-drawer-offset-size);\n        }\n\n        :host([overlay]) {\n          --vaadin-app-layout-drawer-offset-left: 0;\n          --vaadin-app-layout-navbar-offset-left: 0;\n        }\n\n        :host(:not([no-scroll])) [content] {\n          overflow: auto;\n        }\n\n        [content] {\n          height: 100%;\n        }\n\n        @media (pointer: coarse) and (max-width: 800px) and (min-height: 500px) {\n          :host {\n            --vaadin-app-layout-touch-optimized: true;\n          }\n        }\n\n        [part='navbar'] {\n          position: fixed;\n          display: flex;\n          align-items: center;\n          top: 0;\n          inset-inline: 0;\n          transition: inset-inline-start var(--vaadin-app-layout-transition);\n          padding-top: var(--safe-area-inset-top);\n          padding-left: var(--safe-area-inset-left);\n          padding-right: var(--safe-area-inset-right);\n          z-index: 1;\n        }\n\n        :host([primary-section='drawer'][drawer-opened]:not([overlay])) [part='navbar'] {\n          inset-inline-start: var(--vaadin-app-layout-drawer-offset-left, 0);\n        }\n\n        :host([primary-section='drawer']) [part='drawer'] {\n          top: 0;\n        }\n\n        [part='navbar'][bottom] {\n          top: auto;\n          bottom: 0;\n          padding-bottom: var(--safe-area-inset-bottom);\n        }\n\n        [part='drawer'] {\n          overflow: auto;\n          position: fixed;\n          top: var(--vaadin-app-layout-navbar-offset-top, 0);\n          bottom: var(--vaadin-app-layout-navbar-offset-bottom, var(--vaadin-viewport-offset-bottom, 0));\n          inset-inline: var(--vaadin-app-layout-navbar-offset-left, 0) auto;\n          transition: transform var(--vaadin-app-layout-transition), visibility var(--vaadin-app-layout-transition);\n          transform: translateX(-100%);\n          max-width: 90%;\n          width: var(--_vaadin-app-layout-drawer-width);\n          box-sizing: border-box;\n          padding: var(--safe-area-inset-top) 0 var(--safe-area-inset-bottom) var(--safe-area-inset-left);\n          outline: none;\n          /* The drawer should be inaccessible by the tabbing navigation when it is closed. */\n          visibility: hidden;\n          display: flex;\n          flex-direction: column;\n        }\n\n        :host([drawer-opened]) [part='drawer'] {\n          /* The drawer should be accessible by the tabbing navigation when it is opened. */\n          visibility: visible;\n          transform: translateX(0%);\n          touch-action: manipulation;\n        }\n\n        [part='backdrop'] {\n          background-color: #000;\n          opacity: 0.3;\n        }\n\n        :host(:not([drawer-opened])) [part='backdrop'] {\n          opacity: 0;\n        }\n\n        :host([overlay]) [part='backdrop'] {\n          position: fixed;\n          inset: 0;\n          pointer-events: none;\n          transition: opacity var(--vaadin-app-layout-transition);\n          -webkit-tap-highlight-color: transparent;\n        }\n\n        :host([overlay]) [part='drawer'] {\n          top: 0;\n          bottom: 0;\n        }\n\n        :host([overlay]) [part='drawer'],\n        :host([overlay]) [part='backdrop'] {\n          z-index: 2;\n        }\n\n        :host([drawer-opened][overlay]) [part='backdrop'] {\n          pointer-events: auto;\n          touch-action: manipulation;\n        }\n\n        :host([dir='rtl']) [part='drawer'] {\n          transform: translateX(100%);\n        }\n\n        :host([dir='rtl'][drawer-opened]) [part='drawer'] {\n          transform: translateX(0%);\n        }\n\n        :host([drawer-opened]:not([overlay])) {\n          padding-inline-start: var(--vaadin-app-layout-drawer-offset-left);\n        }\n\n        @media (max-width: 800px), (max-height: 600px) {\n          :host {\n            --vaadin-app-layout-drawer-overlay: true;\n            --_vaadin-app-layout-drawer-width: var(--vaadin-app-layout-drawer-width, 20em);\n          }\n        }\n\n        /* If a vaadin-scroller is used in the drawer, allow it to take all remaining space and contain scrolling */\n        [part='drawer'] ::slotted(vaadin-scroller) {\n          flex: 1;\n          overscroll-behavior: contain;\n        }\n      </style>\n      <div part=\"navbar\" id=\"navbarTop\">\n        <slot name=\"navbar\" on-slotchange=\"_updateTouchOptimizedMode\"></slot>\n      </div>\n      <div part=\"backdrop\" on-click=\"_onBackdropClick\" on-touchend=\"_onBackdropTouchend\"></div>\n      <div part=\"drawer\" id=\"drawer\">\n        <slot name=\"drawer\" id=\"drawerSlot\" on-slotchange=\"_updateDrawerSize\"></slot>\n      </div>\n      <div content>\n        <slot></slot>\n      </div>\n      <div part=\"navbar\" id=\"navbarBottom\" bottom hidden>\n        <slot name=\"navbar-bottom\"></slot>\n      </div>\n      <div hidden>\n        <slot id=\"touchSlot\" name=\"navbar touch-optimized\" on-slotchange=\"_updateTouchOptimizedMode\"></slot>\n      </div>\n    `;\n  }\n\n  static get is() {\n    return 'vaadin-app-layout';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * The object used to localize this component.\n       * To change the default localization, replace the entire\n       * `i18n` object with a custom one.\n       *\n       * To update individual properties, extend the existing i18n object as follows:\n       * ```js\n       * appLayout.i18n = {\n       *   ...appLayout.i18n,\n       *   drawer: 'Drawer'\n       * }\n       * ```\n       *\n       * The object has the following structure and default values:\n       * ```\n       * {\n       *   drawer: 'Drawer'\n       * }\n       * ```\n       *\n       * @type {AppLayoutI18n}\n       * @default {English/US}\n       */\n      i18n: {\n        type: Object,\n        observer: '__i18nChanged',\n        value: () => {\n          return {\n            drawer: 'Drawer',\n          };\n        },\n      },\n\n      /**\n       * Defines whether navbar or drawer will come first visually.\n       * - By default (`primary-section=\"navbar\"`), the navbar takes the full available width and moves the drawer down.\n       * - If `primary-section=\"drawer\"` is set, then the drawer will move the navbar, taking the full available height.\n       * @attr {navbar|drawer} primary-section\n       * @type {!PrimarySection}\n       */\n      primarySection: {\n        type: String,\n        value: 'navbar',\n        notify: true,\n        reflectToAttribute: true,\n        observer: '__primarySectionChanged',\n      },\n\n      /**\n       * Controls whether the drawer is opened (visible) or not.\n       * Its default value depends on the viewport:\n       * - `true`, for desktop size views\n       * - `false`, for mobile size views\n       * @attr {boolean} drawer-opened\n       * @type {boolean}\n       */\n      drawerOpened: {\n        type: Boolean,\n        notify: true,\n        value: true,\n        reflectToAttribute: true,\n        observer: '__drawerOpenedChanged',\n      },\n\n      /**\n       * Drawer is an overlay on top of the content\n       * Controlled via CSS using `--vaadin-app-layout-drawer-overlay: true|false`;\n       * @type {boolean}\n       */\n      overlay: {\n        type: Boolean,\n        notify: true,\n        readOnly: true,\n        value: false,\n        reflectToAttribute: true,\n      },\n\n      /**\n       * A global event that causes the drawer to close (be hidden) when it is in overlay mode.\n       * - The default is `vaadin-router-location-changed` dispatched by Vaadin Router\n       *\n       * @attr {string} close-drawer-on\n       * @type {string}\n       */\n      closeDrawerOn: {\n        type: String,\n        value: 'vaadin-router-location-changed',\n        observer: '_closeDrawerOnChanged',\n      },\n    };\n  }\n\n  /**\n   * Helper static method that dispatches a `close-overlay-drawer` event\n   */\n  static dispatchCloseOverlayDrawerEvent() {\n    window.dispatchEvent(new CustomEvent('close-overlay-drawer'));\n  }\n\n  constructor() {\n    super();\n    // TODO(jouni): might want to debounce\n    this.__boundResizeListener = this._resize.bind(this);\n    this.__drawerToggleClickListener = this._drawerToggleClick.bind(this);\n    this.__onDrawerKeyDown = this.__onDrawerKeyDown.bind(this);\n    this.__closeOverlayDrawerListener = this.__closeOverlayDrawer.bind(this);\n    this.__trapFocusInDrawer = this.__trapFocusInDrawer.bind(this);\n    this.__releaseFocusFromDrawer = this.__releaseFocusFromDrawer.bind(this);\n\n    // Hide all the elements except the drawer toggle and drawer content\n    this.__ariaModalController = new AriaModalController(this, () => [\n      ...this.querySelectorAll('vaadin-drawer-toggle, [slot=\"drawer\"]'),\n    ]);\n    this.__focusTrapController = new FocusTrapController(this);\n  }\n\n  /** @protected */\n  connectedCallback() {\n    super.connectedCallback();\n\n    this._blockAnimationUntilAfterNextRender();\n\n    window.addEventListener('resize', this.__boundResizeListener);\n    this.addEventListener('drawer-toggle-click', this.__drawerToggleClickListener);\n\n    beforeNextRender(this, this._afterFirstRender);\n\n    this._updateTouchOptimizedMode();\n    this._updateDrawerSize();\n    this._updateOverlayMode();\n\n    this._navbarSizeObserver = new ResizeObserver(() => {\n      requestAnimationFrame(() => {\n        // Prevent updating offset size multiple times\n        // during the drawer open / close transition.\n        if (this.__isDrawerAnimating) {\n          this.__updateOffsetSizePending = true;\n        } else {\n          this._updateOffsetSize();\n        }\n      });\n    });\n    this._navbarSizeObserver.observe(this.$.navbarTop);\n    this._navbarSizeObserver.observe(this.$.navbarBottom);\n\n    window.addEventListener('close-overlay-drawer', this.__closeOverlayDrawerListener);\n    window.addEventListener('keydown', this.__onDrawerKeyDown);\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.addController(this.__focusTrapController);\n    this.__setAriaExpanded();\n\n    this.$.drawer.addEventListener('transitionstart', () => {\n      this.__isDrawerAnimating = true;\n    });\n\n    this.$.drawer.addEventListener('transitionend', () => {\n      // Update offset size after drawer animation.\n      if (this.__updateOffsetSizePending) {\n        this.__updateOffsetSizePending = false;\n        this._updateOffsetSize();\n      }\n\n      // Delay resetting the flag until animation frame\n      // to avoid updating offset size again on resize.\n      requestAnimationFrame(() => {\n        this.__isDrawerAnimating = false;\n      });\n    });\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    window.removeEventListener('resize', this.__boundResizeListener);\n    this.removeEventListener('drawer-toggle-click', this.__drawerToggleClickListener);\n    window.removeEventListener('close-overlay-drawer', this.__drawerToggleClickListener);\n    window.removeEventListener('keydown', this.__onDrawerKeyDown);\n  }\n\n  /**\n   * A callback for the `primarySection` property observer.\n   *\n   * Ensures the property is set to its default value `navbar`\n   * whenever the new value is not one of the valid values: `navbar`, `drawer`.\n   *\n   * @param {string} value\n   * @private\n   */\n  __primarySectionChanged(value) {\n    const isValid = ['navbar', 'drawer'].includes(value);\n    if (!isValid) {\n      this.set('primarySection', 'navbar');\n    }\n  }\n\n  /**\n   * A callback for the `drawerOpened` property observer.\n   *\n   * When the drawer opens, the method ensures the drawer has a proper height and sets focus on it.\n   * As long as the drawer is open, the focus is trapped within the drawer.\n   *\n   * When the drawer closes, the method releases focus from the drawer, setting focus on the drawer toggle.\n   *\n   * @param {boolean} drawerOpened\n   * @param {boolean} oldDrawerOpened\n   * @private\n   */\n  __drawerOpenedChanged(drawerOpened, oldDrawerOpened) {\n    if (this.overlay) {\n      if (drawerOpened) {\n        this.__trapFocusInDrawer();\n      } else if (oldDrawerOpened) {\n        this.__releaseFocusFromDrawer();\n      }\n    }\n\n    this.__setAriaExpanded();\n  }\n\n  /**\n   * A callback for the `i18n` property observer.\n   *\n   * The method ensures the drawer has ARIA attributes updated\n   * once the `i18n` property changes.\n   *\n   * @private\n   */\n  __i18nChanged() {\n    this.__updateDrawerAriaAttributes();\n  }\n\n  /** @protected */\n  _afterFirstRender() {\n    this._blockAnimationUntilAfterNextRender();\n    this._updateOffsetSize();\n  }\n\n  /** @private */\n  _drawerToggleClick(e) {\n    e.stopPropagation();\n    this.drawerOpened = !this.drawerOpened;\n  }\n\n  /** @private */\n  __closeOverlayDrawer() {\n    if (this.overlay) {\n      this.drawerOpened = false;\n    }\n  }\n\n  /** @private */\n  __setAriaExpanded() {\n    const toggle = this.querySelector('vaadin-drawer-toggle');\n    if (toggle) {\n      toggle.setAttribute('aria-expanded', this.drawerOpened);\n    }\n  }\n\n  /** @protected */\n  _updateDrawerSize() {\n    const childCount = this.querySelectorAll('[slot=drawer]').length;\n    const drawer = this.$.drawer;\n\n    if (childCount === 0) {\n      drawer.setAttribute('hidden', '');\n      this.style.setProperty('--_vaadin-app-layout-drawer-width', 0);\n    } else {\n      drawer.removeAttribute('hidden');\n      this.style.removeProperty('--_vaadin-app-layout-drawer-width');\n    }\n    this._updateOffsetSize();\n  }\n\n  /** @private */\n  _resize() {\n    this._blockAnimationUntilAfterNextRender();\n    this._updateTouchOptimizedMode();\n    this._updateOverlayMode();\n  }\n\n  /** @protected */\n  _updateOffsetSize() {\n    const navbar = this.$.navbarTop;\n    const navbarRect = navbar.getBoundingClientRect();\n\n    const navbarBottom = this.$.navbarBottom;\n    const navbarBottomRect = navbarBottom.getBoundingClientRect();\n\n    const drawer = this.$.drawer;\n    const drawerRect = drawer.getBoundingClientRect();\n\n    this.style.setProperty('--_vaadin-app-layout-navbar-offset-size', `${navbarRect.height}px`);\n    this.style.setProperty('--_vaadin-app-layout-navbar-offset-size-bottom', `${navbarBottomRect.height}px`);\n    this.style.setProperty('--_vaadin-app-layout-drawer-offset-size', `${drawerRect.width}px`);\n  }\n\n  /** @protected */\n  _updateOverlayMode() {\n    const overlay = this._getCustomPropertyValue('--vaadin-app-layout-drawer-overlay') === 'true';\n\n    if (!this.overlay && overlay) {\n      // Changed from not overlay to overlay\n      this._drawerStateSaved = this.drawerOpened;\n      this.drawerOpened = false;\n    }\n\n    this._setOverlay(overlay);\n\n    if (!this.overlay && this._drawerStateSaved) {\n      this.drawerOpened = this._drawerStateSaved;\n      this._drawerStateSaved = null;\n    }\n\n    this.__updateDrawerAriaAttributes();\n  }\n\n  /**\n   * Updates ARIA attributes on the drawer depending on the drawer mode.\n   *\n   * - In the overlay mode, the method marks the drawer with ARIA attributes as a dialog\n   * labelled with the `i18n.drawer` property.\n   * - In the normal mode, the method removes the ARIA attributes that has been set for the overlay mode.\n   *\n   * @private\n   */\n  __updateDrawerAriaAttributes() {\n    const drawer = this.$.drawer;\n    if (this.overlay) {\n      drawer.setAttribute('role', 'dialog');\n      drawer.setAttribute('aria-modal', 'true');\n      drawer.setAttribute('aria-label', this.i18n.drawer);\n    } else {\n      drawer.removeAttribute('role');\n      drawer.removeAttribute('aria-modal');\n      drawer.removeAttribute('aria-label');\n    }\n  }\n\n  /**\n   * Returns a promise that resolves when the drawer opening/closing CSS transition ends.\n   *\n   * The method relies on the `--vaadin-app-layout-transition` CSS variable to detect whether\n   * the drawer has a CSS transition that needs to be awaited. If the CSS variable equals `none`,\n   * the promise resolves immediately.\n   *\n   * @return {Promise}\n   * @private\n   */\n  __drawerTransitionComplete() {\n    return new Promise((resolve) => {\n      if (this._getCustomPropertyValue('--vaadin-app-layout-transition') === 'none') {\n        resolve();\n        return;\n      }\n\n      this.$.drawer.addEventListener('transitionend', resolve, { once: true });\n    });\n  }\n\n  /** @private */\n  async __trapFocusInDrawer() {\n    // Wait for the drawer CSS transition before focusing the drawer\n    // in order for VoiceOver to have a proper outline.\n    await this.__drawerTransitionComplete();\n\n    if (!this.drawerOpened) {\n      // The drawer has been closed during the CSS transition.\n      return;\n    }\n\n    this.$.drawer.setAttribute('tabindex', '0');\n\n    this.__ariaModalController.showModal();\n    this.__focusTrapController.trapFocus(this.$.drawer);\n  }\n\n  /** @private */\n  async __releaseFocusFromDrawer() {\n    // Wait for the drawer CSS transition in order to restore focus to the toggle\n    // only after `visibility` becomes `hidden`, that is, the drawer becomes inaccessible by the tabbing navigation.\n    await this.__drawerTransitionComplete();\n\n    if (this.drawerOpened) {\n      // The drawer has been opened during the CSS transition.\n      return;\n    }\n\n    this.__ariaModalController.close();\n    this.__focusTrapController.releaseFocus();\n    this.$.drawer.removeAttribute('tabindex');\n\n    // Move focus to the drawer toggle when closing the drawer.\n    const toggle = this.querySelector('vaadin-drawer-toggle');\n    if (toggle) {\n      toggle.focus();\n      toggle.setAttribute('focus-ring', 'focus');\n    }\n  }\n\n  /**\n   * Closes the drawer on Escape press if it has been opened in the overlay mode.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  __onDrawerKeyDown(event) {\n    if (event.key === 'Escape' && this.overlay) {\n      this.drawerOpened = false;\n    }\n  }\n\n  /** @private */\n  _closeDrawerOnChanged(closeDrawerOn, oldCloseDrawerOn) {\n    if (oldCloseDrawerOn) {\n      window.removeEventListener(oldCloseDrawerOn, this.__closeOverlayDrawerListener);\n    }\n    if (closeDrawerOn) {\n      window.addEventListener(closeDrawerOn, this.__closeOverlayDrawerListener);\n    }\n  }\n\n  /** @private */\n  _onBackdropClick() {\n    this._close();\n  }\n\n  /** @private */\n  _onBackdropTouchend(event) {\n    // Prevent the click event from being fired\n    // on clickable element behind the backdrop\n    event.preventDefault();\n\n    this._close();\n  }\n\n  /** @protected */\n  _close() {\n    this.drawerOpened = false;\n  }\n\n  /** @private */\n  _getCustomPropertyValue(customProperty) {\n    const customPropertyValue = getComputedStyle(this).getPropertyValue(customProperty);\n    return (customPropertyValue || '').trim().toLowerCase();\n  }\n\n  /** @protected */\n  _updateTouchOptimizedMode() {\n    const touchOptimized = this._getCustomPropertyValue('--vaadin-app-layout-touch-optimized') === 'true';\n\n    const navbarItems = this.querySelectorAll('[slot*=\"navbar\"]');\n\n    if (navbarItems.length > 0) {\n      Array.from(navbarItems).forEach((navbar) => {\n        if (navbar.getAttribute('slot').indexOf('touch-optimized') > -1) {\n          navbar.__touchOptimized = true;\n        }\n\n        if (touchOptimized && navbar.__touchOptimized) {\n          navbar.setAttribute('slot', 'navbar-bottom');\n        } else {\n          navbar.setAttribute('slot', 'navbar');\n        }\n      });\n    }\n\n    if (this.$.navbarTop.querySelector('[name=navbar]').assignedNodes().length === 0) {\n      this.$.navbarTop.setAttribute('hidden', '');\n    } else {\n      this.$.navbarTop.removeAttribute('hidden');\n    }\n\n    if (this.$.navbarBottom.querySelector('[name=navbar-bottom]').assignedNodes().length === 0) {\n      this.$.navbarBottom.setAttribute('hidden', '');\n    } else {\n      this.$.navbarBottom.removeAttribute('hidden');\n    }\n\n    this._updateOffsetSize();\n  }\n\n  /** @protected */\n  _blockAnimationUntilAfterNextRender() {\n    this.setAttribute('no-anim', '');\n    afterNextRender(this, () => {\n      this.removeAttribute('no-anim');\n    });\n  }\n\n  /**\n   * App Layout listens to `close-overlay-drawer` on the window level.\n   * A custom event can be dispatched and the App Layout will close the drawer in overlay.\n   *\n   * That can be used, for instance, when a navigation occurs when user clicks in a menu item inside the drawer.\n   *\n   * See `dispatchCloseOverlayDrawerEvent()` helper method.\n   *\n   * @event close-overlay-drawer\n   */\n}\n\ndefineCustomElement(AppLayout);\n\nexport { AppLayout };\n"],
  "mappings": "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",
  "names": []
}
