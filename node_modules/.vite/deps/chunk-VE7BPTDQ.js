import {
  Triangulation_default,
  calculateSourceExtentResolution,
  render
} from "./chunk-L75HGMIB.js";
import {
  ERROR_THRESHOLD
} from "./chunk-5WYTDWXW.js";
import {
  TileState_default
} from "./chunk-JJIVDN2V.js";
import {
  listenImage
} from "./chunk-K3YCFAS2.js";
import {
  createCanvasContext2D
} from "./chunk-PN2SGMHC.js";
import {
  getArea,
  getIntersection
} from "./chunk-C7XNUD4N.js";
import {
  clamp
} from "./chunk-JFL7O5KA.js";
import {
  easeIn
} from "./chunk-FV2F4KM5.js";
import {
  EventType_default,
  Target_default,
  listen,
  unlistenByKey
} from "./chunk-OAOBVDCL.js";
import {
  abstract
} from "./chunk-K4RYKKJS.js";

// node_modules/ol/Tile.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Tile = (
  /** @class */
  function(_super) {
    __extends(Tile2, _super);
    function Tile2(tileCoord, state, opt_options) {
      var _this = _super.call(this) || this;
      var options = opt_options ? opt_options : {};
      _this.tileCoord = tileCoord;
      _this.state = state;
      _this.interimTile = null;
      _this.key = "";
      _this.transition_ = options.transition === void 0 ? 250 : options.transition;
      _this.transitionStarts_ = {};
      _this.interpolate = !!options.interpolate;
      return _this;
    }
    Tile2.prototype.changed = function() {
      this.dispatchEvent(EventType_default.CHANGE);
    };
    Tile2.prototype.release = function() {
    };
    Tile2.prototype.getKey = function() {
      return this.key + "/" + this.tileCoord;
    };
    Tile2.prototype.getInterimTile = function() {
      if (!this.interimTile) {
        return this;
      }
      var tile = this.interimTile;
      do {
        if (tile.getState() == TileState_default.LOADED) {
          this.transition_ = 0;
          return tile;
        }
        tile = tile.interimTile;
      } while (tile);
      return this;
    };
    Tile2.prototype.refreshInterimChain = function() {
      if (!this.interimTile) {
        return;
      }
      var tile = this.interimTile;
      var prev = this;
      do {
        if (tile.getState() == TileState_default.LOADED) {
          tile.interimTile = null;
          break;
        } else if (tile.getState() == TileState_default.LOADING) {
          prev = tile;
        } else if (tile.getState() == TileState_default.IDLE) {
          prev.interimTile = tile.interimTile;
        } else {
          prev = tile;
        }
        tile = prev.interimTile;
      } while (tile);
    };
    Tile2.prototype.getTileCoord = function() {
      return this.tileCoord;
    };
    Tile2.prototype.getState = function() {
      return this.state;
    };
    Tile2.prototype.setState = function(state) {
      if (this.state !== TileState_default.ERROR && this.state > state) {
        throw new Error("Tile load sequence violation");
      }
      this.state = state;
      this.changed();
    };
    Tile2.prototype.load = function() {
      abstract();
    };
    Tile2.prototype.getAlpha = function(id, time) {
      if (!this.transition_) {
        return 1;
      }
      var start = this.transitionStarts_[id];
      if (!start) {
        start = time;
        this.transitionStarts_[id] = start;
      } else if (start === -1) {
        return 1;
      }
      var delta = time - start + 1e3 / 60;
      if (delta >= this.transition_) {
        return 1;
      }
      return easeIn(delta / this.transition_);
    };
    Tile2.prototype.inTransition = function(id) {
      if (!this.transition_) {
        return false;
      }
      return this.transitionStarts_[id] !== -1;
    };
    Tile2.prototype.endTransition = function(id) {
      if (this.transition_) {
        this.transitionStarts_[id] = -1;
      }
    };
    return Tile2;
  }(Target_default)
);
var Tile_default = Tile;

// node_modules/ol/ImageTile.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ImageTile = (
  /** @class */
  function(_super) {
    __extends2(ImageTile2, _super);
    function ImageTile2(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
      var _this = _super.call(this, tileCoord, state, opt_options) || this;
      _this.crossOrigin_ = crossOrigin;
      _this.src_ = src;
      _this.key = src;
      _this.image_ = new Image();
      if (crossOrigin !== null) {
        _this.image_.crossOrigin = crossOrigin;
      }
      _this.unlisten_ = null;
      _this.tileLoadFunction_ = tileLoadFunction;
      return _this;
    }
    ImageTile2.prototype.getImage = function() {
      return this.image_;
    };
    ImageTile2.prototype.setImage = function(element) {
      this.image_ = element;
      this.state = TileState_default.LOADED;
      this.unlistenImage_();
      this.changed();
    };
    ImageTile2.prototype.handleImageError_ = function() {
      this.state = TileState_default.ERROR;
      this.unlistenImage_();
      this.image_ = getBlankImage();
      this.changed();
    };
    ImageTile2.prototype.handleImageLoad_ = function() {
      var image = (
        /** @type {HTMLImageElement} */
        this.image_
      );
      if (image.naturalWidth && image.naturalHeight) {
        this.state = TileState_default.LOADED;
      } else {
        this.state = TileState_default.EMPTY;
      }
      this.unlistenImage_();
      this.changed();
    };
    ImageTile2.prototype.load = function() {
      if (this.state == TileState_default.ERROR) {
        this.state = TileState_default.IDLE;
        this.image_ = new Image();
        if (this.crossOrigin_ !== null) {
          this.image_.crossOrigin = this.crossOrigin_;
        }
      }
      if (this.state == TileState_default.IDLE) {
        this.state = TileState_default.LOADING;
        this.changed();
        this.tileLoadFunction_(this, this.src_);
        this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
      }
    };
    ImageTile2.prototype.unlistenImage_ = function() {
      if (this.unlisten_) {
        this.unlisten_();
        this.unlisten_ = null;
      }
    };
    return ImageTile2;
  }(Tile_default)
);
function getBlankImage() {
  var ctx = createCanvasContext2D(1, 1);
  ctx.fillStyle = "rgba(0,0,0,0)";
  ctx.fillRect(0, 0, 1, 1);
  return ctx.canvas;
}
var ImageTile_default = ImageTile;

// node_modules/ol/reproj/Tile.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ReprojTile = (
  /** @class */
  function(_super) {
    __extends3(ReprojTile2, _super);
    function ReprojTile2(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges, opt_interpolate) {
      var _this = _super.call(this, tileCoord, TileState_default.IDLE, { interpolate: !!opt_interpolate }) || this;
      _this.renderEdges_ = opt_renderEdges !== void 0 ? opt_renderEdges : false;
      _this.pixelRatio_ = pixelRatio;
      _this.gutter_ = gutter;
      _this.canvas_ = null;
      _this.sourceTileGrid_ = sourceTileGrid;
      _this.targetTileGrid_ = targetTileGrid;
      _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
      _this.sourceTiles_ = [];
      _this.sourcesListenerKeys_ = null;
      _this.sourceZ_ = 0;
      var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
      var maxTargetExtent = _this.targetTileGrid_.getExtent();
      var maxSourceExtent = _this.sourceTileGrid_.getExtent();
      var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;
      if (getArea(limitedTargetExtent) === 0) {
        _this.state = TileState_default.EMPTY;
        return _this;
      }
      var sourceProjExtent = sourceProj.getExtent();
      if (sourceProjExtent) {
        if (!maxSourceExtent) {
          maxSourceExtent = sourceProjExtent;
        } else {
          maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
        }
      }
      var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
      var sourceResolution = calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);
      if (!isFinite(sourceResolution) || sourceResolution <= 0) {
        _this.state = TileState_default.EMPTY;
        return _this;
      }
      var errorThresholdInPixels = opt_errorThreshold !== void 0 ? opt_errorThreshold : ERROR_THRESHOLD;
      _this.triangulation_ = new Triangulation_default(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
      if (_this.triangulation_.getTriangles().length === 0) {
        _this.state = TileState_default.EMPTY;
        return _this;
      }
      _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
      var sourceExtent = _this.triangulation_.calculateSourceExtent();
      if (maxSourceExtent) {
        if (sourceProj.canWrapX()) {
          sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
          sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
        } else {
          sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
        }
      }
      if (!getArea(sourceExtent)) {
        _this.state = TileState_default.EMPTY;
      } else {
        var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
        for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
          for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
            var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
            if (tile) {
              _this.sourceTiles_.push(tile);
            }
          }
        }
        if (_this.sourceTiles_.length === 0) {
          _this.state = TileState_default.EMPTY;
        }
      }
      return _this;
    }
    ReprojTile2.prototype.getImage = function() {
      return this.canvas_;
    };
    ReprojTile2.prototype.reproject_ = function() {
      var sources = [];
      this.sourceTiles_.forEach((function(tile, i, arr) {
        if (tile && tile.getState() == TileState_default.LOADED) {
          sources.push({
            extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
            image: tile.getImage()
          });
        }
      }).bind(this));
      this.sourceTiles_.length = 0;
      if (sources.length === 0) {
        this.state = TileState_default.ERROR;
      } else {
        var z = this.wrappedTileCoord_[0];
        var size = this.targetTileGrid_.getTileSize(z);
        var width = typeof size === "number" ? size : size[0];
        var height = typeof size === "number" ? size : size[1];
        var targetResolution = this.targetTileGrid_.getResolution(z);
        var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
        var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
        this.canvas_ = render(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);
        this.state = TileState_default.LOADED;
      }
      this.changed();
    };
    ReprojTile2.prototype.load = function() {
      if (this.state == TileState_default.IDLE) {
        this.state = TileState_default.LOADING;
        this.changed();
        var leftToLoad_1 = 0;
        this.sourcesListenerKeys_ = [];
        this.sourceTiles_.forEach((function(tile, i, arr) {
          var state = tile.getState();
          if (state == TileState_default.IDLE || state == TileState_default.LOADING) {
            leftToLoad_1++;
            var sourceListenKey_1 = listen(tile, EventType_default.CHANGE, function(e) {
              var state2 = tile.getState();
              if (state2 == TileState_default.LOADED || state2 == TileState_default.ERROR || state2 == TileState_default.EMPTY) {
                unlistenByKey(sourceListenKey_1);
                leftToLoad_1--;
                if (leftToLoad_1 === 0) {
                  this.unlistenSources_();
                  this.reproject_();
                }
              }
            }, this);
            this.sourcesListenerKeys_.push(sourceListenKey_1);
          }
        }).bind(this));
        if (leftToLoad_1 === 0) {
          setTimeout(this.reproject_.bind(this), 0);
        } else {
          this.sourceTiles_.forEach(function(tile, i, arr) {
            var state = tile.getState();
            if (state == TileState_default.IDLE) {
              tile.load();
            }
          });
        }
      }
    };
    ReprojTile2.prototype.unlistenSources_ = function() {
      this.sourcesListenerKeys_.forEach(unlistenByKey);
      this.sourcesListenerKeys_ = null;
    };
    return ReprojTile2;
  }(Tile_default)
);
var Tile_default2 = ReprojTile;

// node_modules/ol/TileRange.js
var TileRange = (
  /** @class */
  function() {
    function TileRange2(minX, maxX, minY, maxY) {
      this.minX = minX;
      this.maxX = maxX;
      this.minY = minY;
      this.maxY = maxY;
    }
    TileRange2.prototype.contains = function(tileCoord) {
      return this.containsXY(tileCoord[1], tileCoord[2]);
    };
    TileRange2.prototype.containsTileRange = function(tileRange) {
      return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
    };
    TileRange2.prototype.containsXY = function(x, y) {
      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
    };
    TileRange2.prototype.equals = function(tileRange) {
      return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
    };
    TileRange2.prototype.extend = function(tileRange) {
      if (tileRange.minX < this.minX) {
        this.minX = tileRange.minX;
      }
      if (tileRange.maxX > this.maxX) {
        this.maxX = tileRange.maxX;
      }
      if (tileRange.minY < this.minY) {
        this.minY = tileRange.minY;
      }
      if (tileRange.maxY > this.maxY) {
        this.maxY = tileRange.maxY;
      }
    };
    TileRange2.prototype.getHeight = function() {
      return this.maxY - this.minY + 1;
    };
    TileRange2.prototype.getSize = function() {
      return [this.getWidth(), this.getHeight()];
    };
    TileRange2.prototype.getWidth = function() {
      return this.maxX - this.minX + 1;
    };
    TileRange2.prototype.intersects = function(tileRange) {
      return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;
    };
    return TileRange2;
  }()
);
function createOrUpdate(minX, maxX, minY, maxY, tileRange) {
  if (tileRange !== void 0) {
    tileRange.minX = minX;
    tileRange.maxX = maxX;
    tileRange.minY = minY;
    tileRange.maxY = maxY;
    return tileRange;
  } else {
    return new TileRange(minX, maxX, minY, maxY);
  }
}
var TileRange_default = TileRange;

export {
  ImageTile_default,
  Tile_default2 as Tile_default,
  createOrUpdate,
  TileRange_default
};
//# sourceMappingURL=chunk-VE7BPTDQ.js.map
