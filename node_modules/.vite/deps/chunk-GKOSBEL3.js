import {
  assert
} from "./chunk-FE3DXTD6.js";
import {
  EventType_default,
  Object_default,
  listen,
  unlistenByKey
} from "./chunk-OAOBVDCL.js";

// node_modules/ol/Feature.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Feature = (
  /** @class */
  function(_super) {
    __extends(Feature2, _super);
    function Feature2(opt_geometryOrProperties) {
      var _this = _super.call(this) || this;
      _this.on;
      _this.once;
      _this.un;
      _this.id_ = void 0;
      _this.geometryName_ = "geometry";
      _this.style_ = null;
      _this.styleFunction_ = void 0;
      _this.geometryChangeKey_ = null;
      _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);
      if (opt_geometryOrProperties) {
        if (typeof /** @type {?} */
        opt_geometryOrProperties.getSimplifiedGeometry === "function") {
          var geometry = (
            /** @type {Geometry} */
            opt_geometryOrProperties
          );
          _this.setGeometry(geometry);
        } else {
          var properties = opt_geometryOrProperties;
          _this.setProperties(properties);
        }
      }
      return _this;
    }
    Feature2.prototype.clone = function() {
      var clone = (
        /** @type {Feature<Geometry>} */
        new Feature2(this.hasProperties() ? this.getProperties() : null)
      );
      clone.setGeometryName(this.getGeometryName());
      var geometry = this.getGeometry();
      if (geometry) {
        clone.setGeometry(
          /** @type {Geometry} */
          geometry.clone()
        );
      }
      var style = this.getStyle();
      if (style) {
        clone.setStyle(style);
      }
      return clone;
    };
    Feature2.prototype.getGeometry = function() {
      return (
        /** @type {Geometry|undefined} */
        this.get(this.geometryName_)
      );
    };
    Feature2.prototype.getId = function() {
      return this.id_;
    };
    Feature2.prototype.getGeometryName = function() {
      return this.geometryName_;
    };
    Feature2.prototype.getStyle = function() {
      return this.style_;
    };
    Feature2.prototype.getStyleFunction = function() {
      return this.styleFunction_;
    };
    Feature2.prototype.handleGeometryChange_ = function() {
      this.changed();
    };
    Feature2.prototype.handleGeometryChanged_ = function() {
      if (this.geometryChangeKey_) {
        unlistenByKey(this.geometryChangeKey_);
        this.geometryChangeKey_ = null;
      }
      var geometry = this.getGeometry();
      if (geometry) {
        this.geometryChangeKey_ = listen(geometry, EventType_default.CHANGE, this.handleGeometryChange_, this);
      }
      this.changed();
    };
    Feature2.prototype.setGeometry = function(geometry) {
      this.set(this.geometryName_, geometry);
    };
    Feature2.prototype.setStyle = function(opt_style) {
      this.style_ = opt_style;
      this.styleFunction_ = !opt_style ? void 0 : createStyleFunction(opt_style);
      this.changed();
    };
    Feature2.prototype.setId = function(id) {
      this.id_ = id;
      this.changed();
    };
    Feature2.prototype.setGeometryName = function(name) {
      this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.geometryName_ = name;
      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
      this.handleGeometryChanged_();
    };
    return Feature2;
  }(Object_default)
);
function createStyleFunction(obj) {
  if (typeof obj === "function") {
    return obj;
  } else {
    var styles_1;
    if (Array.isArray(obj)) {
      styles_1 = obj;
    } else {
      assert(typeof /** @type {?} */
      obj.getZIndex === "function", 41);
      var style = (
        /** @type {import("./style/Style.js").default} */
        obj
      );
      styles_1 = [style];
    }
    return function() {
      return styles_1;
    };
  }
}
var Feature_default = Feature;

export {
  createStyleFunction,
  Feature_default
};
//# sourceMappingURL=chunk-GKOSBEL3.js.map
